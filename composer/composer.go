package composer

import (
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"strings"
	"text/template"
	"unicode"
)

// The Config struct is used to deserialise the config file only.
type Config struct {
	// repos containing elements
	ElementSources ElementSources `json:"ElementSources"`
	// the directory in which we build the result
	OutDir string
}

func ConfigFromReader(r io.Reader) (*Config, error) {
	c := &Config{}
	dec := json.NewDecoder(r)
	if err := dec.Decode(c); err != nil {
		return nil, err
	} else {
		c.ElementSources.Sort()
		if len(c.OutDir) == 0 {
			if c.OutDir, err = ioutil.TempDir("", "antha-composer"); err != nil {
				return nil, err
			}
		}
		if err := os.MkdirAll(c.OutDir, 0700); err != nil {
			return nil, err
		}
		return c, nil
	}
}

// The composer manages the whole operation:
// - taking a configuration and a workflow,
// - locating the source of elements
// - transpiling those elements and writing them out to the right place
// - generating a suitable main.go from the workflow
type Composer struct {
	Config   *Config
	Workflow *Workflow

	classes map[string]*LocatedElement
}

func NewComposer(cfg *Config, workflow *Workflow) *Composer {
	return &Composer{
		Config:   cfg,
		Workflow: workflow,

		classes: make(map[string]*LocatedElement),
	}
}

func (c *Composer) LocateElementClasses() error {
	for _, class := range c.Workflow.ElementClasses() {
		if locElem, err := c.Config.ElementSources.Match(class); err != nil {
			return err
		} else if locElem == nil {
			return fmt.Errorf("Unable to resolve element name: %s", class)
		} else if err := locElem.FetchFiles(); err != nil {
			return err
		} else {
			c.classes[class] = locElem
		}
	}
	return nil
}

func (c *Composer) GenerateMain(w io.Writer) error {
	mr := &mainRenderer{
		Composer: c,
		varMemo:  make(map[string]string),
	}
	return mr.render(w)
}

type mainRenderer struct {
	*Composer
	varCount uint64
	varMemo  map[string]string
}

func (mr *mainRenderer) render(w io.Writer) error {
	funcs := template.FuncMap{
		"varName":        mr.varName,
		"elementClasses": mr.elementClasses,
		"packageName":    packageName,
	}
	if t, err := template.New("main").Funcs(funcs).Parse(tpl); err != nil {
		return err
	} else {
		return t.Execute(w, mr.Workflow)
	}
}

func (mr *mainRenderer) varName(name string) string {
	if res, found := mr.varMemo[name]; found {
		return res
	}

	res := make([]rune, 0, len(name))
	ensureUpper := false
	for _, r := range []rune(name) {
		switch {
		case 'a' <= r && r <= 'z' && ensureUpper:
			ensureUpper = false
			res = append(res, unicode.ToUpper(r))
		case 'a' <= r && r <= 'z':
			res = append(res, r)
		case 'A' <= r && r <= 'Z' && len(res) == 0:
			res = append(res, unicode.ToLower(r))
		case 'A' <= r && r <= 'Z':
			res = append(res, r)
			ensureUpper = false
		case strings.ContainsRune(" -_", r):
			ensureUpper = true
		}
	}
	resStr := fmt.Sprintf("%s%d", string(res), mr.varCount)
	mr.varCount++
	mr.varMemo[name] = resStr
	return resStr
}

func (mr *mainRenderer) elementClasses() map[string]*LocatedElement {
	return mr.classes
}

func packageName(element string) string {
	return path.Base(element)
}

var tpl = `// Code generated by antha composer. DO NOT EDIT.
package main

import (
	"log"

	"github.com/antha-lang/antha/laboratory"

{{range elementClasses}}	{{printf "%q" .ImportPath}}
{{end}})

func main() {
	lab := laboratory.NewLaboratory()
	// Register line maps for the elements we're using
{{range elementClasses}}	{{.PackageName}}.RegisterLineMap(lab)
{{end}}
	// Create the elements
{{range $name, $proc := .Processes}}	{{varName $name}} := {{packageName $proc.Component}}.New(lab)
{{end}}
	// Add wiring
{{range .Connections}}	lab.AddLink({{varName .Source.Process}}, {{varName .Target.Process}}, func () { {{varName .Target.Process}}.Inputs.{{.Target.Port}} = {{varName .Source.Process}}.Outputs.{{.Source.Port}} })
{{end}}
	// Set parameters
{{range $name, $params := .Parameters}}{{range $param, $value := $params}}	if err := {{varName $name}}.Inputs.{{$param}}.SetFromJSON([]byte({{printf "%q" $value}})); err != nil {
		log.Fatal(err)
	}
{{end}}{{end}}
	// Run!
	if err := lab.Run(); err != nil {
		log.Fatal(err)
	}
}
`
