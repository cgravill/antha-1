// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/actions.schema.json (13.229kB)
// schemas/layout.schema.json (7.968kB)

package liquidhandling

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _actionsSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1a\xcb\x8e\xdc\xb8\xf1\x3c\xf3\x15\x05\xed\x22\xb0\x91\x9e\xc7\x9e\x82\xcc\xcd\xc0\x5e\x36\x08\x62\x03\xbb\xc9\xc5\x70\x1a\x6c\xa9\x7a\xc4\x35\x45\x6a\x49\xca\x72\xc7\x98\x7f\x0f\xf8\xd0\x9b\x92\xa8\xee\xb6\xe3\x43\xfa\x30\xa3\x47\x55\xb1\x58\xef\x2a\xea\xcb\xed\x4d\xf2\x23\xcd\x92\x27\x48\x72\xad\x4b\xf5\xf4\xf0\x40\xb8\xce\xc9\x7d\x2a\x8a\x07\x92\x6a\x2a\xb8\xba\x53\x69\x8e\x05\x49\x76\x06\xd6\x5f\x7b\xf8\xa7\x87\x87\xdf\x95\xe0\x1e\xe2\x5e\xc8\xe7\x87\x4c\x92\xa3\xbe\x7b\xfc\xcb\x83\x7b\xf6\x83\x45\xcb\x50\xa5\x92\x96\x86\x9c\x41\xfd\xdb\xaf\x6f\xff\x01\xbf\xda\xf7\x70\x14\x12\xdc\xeb\x03\xe5\xcf\xe0\xd7\x84\x94\x48\x49\x31\x03\x51\x69\xc8\x2a\x69\x5e\x31\xfa\x47\x45\xb3\x9c\xf0\x8c\x51\xfe\x6c\xe9\xea\x53\x89\x86\x20\x91\x92\x9c\x92\xdd\x2d\x00\x40\x52\x50\xfe\x8b\xc6\x42\x25\x4f\xf0\x93\x7f\x44\xfd\xfd\x17\x7b\x6b\x1f\x09\x8e\x6f\x8f\xc9\x13\xbc\x6f\x1f\x99\xdf\x17\x48\x7e\x94\x68\x9e\x27\x3f\x3c\x64\x78\xa4\x9c\x5a\x7e\x1e\xb4\x24\x5c\x1d\x51\xbe\xb1\xfc\x25\xf0\xb2\x8b\xc3\x2b\xa5\x28\x4a\xbd\x15\xab\x26\xb4\xc3\x69\x51\x3e\xd8\xab\x17\x27\xd0\x16\xd8\x6e\xeb\xe6\x26\x71\xe2\xf1\x77\x13\x91\xff\xec\x44\x8c\x40\xbc\x1c\x81\x72\x20\x50\x32\xa2\x11\x6a\x64\xcc\xc8\xf3\xa6\x93\xa8\x38\xfc\x8e\xa9\xf6\x0f\x25\xfe\x51\x51\x89\x86\xf8\xfb\x84\x93\x02\x93\x1d\x24\x5a\x68\xc2\xf6\x9f\x04\xab\x0a\x4c\x3e\x38\xc0\x52\x8a\x12\xa5\xa6\xd8\x70\x75\x73\xe3\xe0\x9b\xbb\x09\x5f\xbf\xe5\x08\x19\x55\x25\x23\x27\x30\x90\x20\x8e\xa0\x73\xf4\x4c\xba\xf5\x7b\x6c\x29\x6d\x4c\x21\xb1\x4f\x5f\xdc\xcb\x21\x23\x8b\x0b\x59\x48\x70\x90\x50\x4a\x54\xc8\xf5\xcc\x82\x61\xbd\x14\x48\x54\x25\xb1\x40\xae\x87\x3c\xa4\xa2\x28\x05\x47\xae\xd5\x32\x07\xaa\x3a\xdc\x75\xb0\x50\xe7\x34\xcd\xa1\x20\x1f\x11\xaa\x12\x74\x4e\xd5\xdc\xc6\x1b\x0b\x77\x4f\x3b\x7b\xbe\x09\x2e\xf5\xc6\x2c\x04\xed\x42\x0d\x5e\x58\xbd\xb3\x1a\x4e\x05\x4f\x91\x6b\x49\x2c\xd9\x1d\x24\x15\xa7\xda\xab\x7a\x46\xdb\x53\x85\x07\xb8\xd3\x33\x3a\x1f\x08\xa7\xe5\x6d\x46\xfb\x9d\xf0\x9d\xfc\xfb\xac\xae\x2d\x3e\x80\x8e\x5e\x9d\x57\xc5\x01\x65\xff\x4d\x41\x39\x2d\xaa\x22\x79\x82\xc7\xfb\xc7\x00\x57\x56\x5e\x6b\xcc\x18\x20\x65\xbc\xd1\x19\xc3\x94\x3f\xaa\x00\x3f\x1b\x6b\x55\x98\xc5\x48\xe5\x76\xc4\x47\x42\xb2\xcc\xda\x2f\x61\xef\xfa\x1a\x3b\x12\xa6\xf0\x76\x00\xbb\x0e\x6a\xa9\x3b\xf0\x35\x60\x0b\x95\xf4\x5d\x66\x26\x36\xbd\x81\x1e\xd0\x0e\xf4\xa9\xa4\x29\x61\xec\x64\x34\x43\xe0\x5f\xce\xb1\x63\xc3\xd3\x27\xc2\x2a\x1c\x19\x6b\x30\x2e\x39\xc0\x45\x6f\xb5\x20\x8d\x7d\xf4\x37\x32\xf6\x4e\x6f\x1a\x83\x90\x30\x54\x7e\x88\x7c\x40\xf3\xbd\x45\x82\x7a\x0f\x07\xc2\x5b\xff\xa7\x97\x5e\x12\x13\xd3\xff\x2e\xd2\xce\x21\xfa\x89\x27\x64\x87\xcc\x03\x3b\xa9\x1b\x74\xa8\xa9\xce\x6d\x9a\x18\xa6\x5e\x90\xe2\x20\x74\x32\xcc\x65\x53\xd5\x0c\xde\xf6\x75\x64\x96\x4f\x3f\xee\x4d\x10\xdb\x9b\x50\x07\x89\x14\xb5\x0b\x38\x2c\x81\x0f\x23\xcc\x91\xee\x60\xf4\x1b\xd2\x0a\x41\x0c\xb8\xf3\x72\xdb\x85\xa1\x02\x4a\xfa\xe5\x67\x2b\x10\x0e\x66\x09\x78\x55\x4a\x2a\x24\x68\x31\x12\xc9\xeb\x64\x42\xf0\x65\xba\x86\xdd\xe7\x2a\x8b\x6d\x9c\x89\x61\xd1\x68\x4e\x8a\xba\xcd\x62\x8d\xc6\x67\xb0\x8b\x8a\x69\x5a\x32\x57\xfa\xfc\x74\xff\x38\x07\x36\x08\x6c\x31\x3b\x33\xaa\xbb\xfe\xce\x52\xe3\xfb\xfc\xdb\x6e\xee\x76\x61\xab\xcb\x21\x2f\x80\x64\x12\x93\x46\xae\xff\x59\x66\x44\xe3\xaa\x1f\x56\x16\x4c\x35\x49\x40\xdb\x22\xa1\xf5\xc7\x4b\x3c\x8e\x89\xd4\x78\x18\xc7\x7a\xef\x09\x6f\xf7\x34\x43\xe3\x69\xa1\x68\xed\x47\x9c\xa0\x91\xf4\x57\x5f\x20\xe4\x4b\xa0\x6b\xab\x22\x47\xfa\x9c\xeb\x55\x1d\x18\xa7\x77\xa0\x8d\xdd\x21\xcf\x9a\x4b\x4d\x4b\x90\xc8\x88\xa6\x9f\x4c\x39\x09\x4a\x14\x68\x62\xe4\x38\xa2\x6c\xd2\x8d\xc4\x23\x4a\xe4\xa9\x4d\x5b\xc3\xfc\xb5\x59\x47\x1d\xad\x59\x6f\x0c\x55\xe0\x44\x57\x85\x6d\xc5\x74\xbb\xfb\x39\x2f\x43\x6e\x7d\xe7\xbd\x4b\x31\xfb\x83\xd0\x5a\x14\x86\x61\x7b\xab\x45\x69\xae\x9d\x0a\xf7\x0c\x3f\xa1\x09\xe9\xa1\x10\x72\x56\x12\x6e\x59\xfb\x4a\xf9\xd7\x2b\x7e\x43\xea\xbd\xaa\x89\x2a\xca\x9f\x19\xfe\xe6\x7b\xcd\x55\x53\xed\x35\x75\x0e\x13\xd2\x9c\x70\x8e\x0c\x9a\x76\xf5\x12\xb3\x3c\x4a\xa7\x57\x2d\xac\x5d\xfa\x32\x0c\x92\x9a\x28\x8d\x36\x6d\x97\x82\xd1\xf4\x64\xae\x88\xb2\x6a\xcf\xdc\xbf\x1c\x49\xb6\xdd\x74\xed\x7a\xb1\x56\x6b\x2b\x76\x51\xc9\x74\x58\xb8\x58\x1f\x0d\xef\xbd\xa5\x14\x0e\x3a\xc3\x40\x1d\x95\xf3\xb4\xd8\xc4\x6e\x86\x4a\x53\x6e\x59\x7d\xa5\x5e\x8f\xb9\xdd\x41\x93\xbe\x80\x16\x25\xa3\xa8\xdc\x83\x3b\xd3\x29\x21\x57\x38\xb7\x9d\xd0\x0c\x64\x02\xd4\x36\x8c\x71\xdb\x0f\x6d\x17\xc6\xb3\x95\x28\x19\xf5\xda\xf2\x58\x39\xf9\xfe\x5c\x1c\x9b\x49\x45\x23\x22\x89\x76\x6a\x61\xdb\x64\x63\x4a\x8b\xc5\x40\x44\x03\x1f\xc3\xbf\x37\xf6\x8b\xf8\x77\x34\xbe\x39\xeb\xde\x3b\xb7\xb0\x3e\x9d\xc0\x98\x6e\x0c\x7d\x66\xa0\x6a\xd5\xb7\xc6\x31\x32\x86\x4f\x13\x3b\x62\x99\x7c\x47\x24\x29\x50\xa3\x54\x2e\x0d\x63\x66\xb2\xb0\x61\xb7\x26\xa7\x2e\x94\x13\x55\x52\xdf\x3d\xd7\x44\x41\x89\xf2\x28\x64\x61\x63\xf9\x06\x89\x97\xb4\x44\xad\x29\x7f\x7e\x5b\xba\x49\x5b\xd4\x76\xb2\xeb\x6f\xc7\x87\x00\xd3\x7a\x45\x6d\x87\x30\x16\x98\x6d\xf6\x7f\xf3\xf3\xca\xf1\x9e\xe7\x42\x81\xa5\x32\xfb\x06\x56\x93\xcd\x04\x7a\x98\x7c\xb4\xa8\xd2\x5c\x1c\x8f\x93\x34\x32\xc1\x2b\x5b\x19\xce\x8a\x7d\x00\x7f\x60\xa2\x16\xd5\xb4\x0e\x9c\x45\x18\xe9\xac\x0c\xea\x8c\x80\xa7\xbb\xea\xde\x13\xfa\x9b\xc4\xd4\x62\x0d\xc5\xd5\x65\xe7\xa6\x42\x82\xe4\xc8\x44\xbd\x97\x36\x9c\xaf\xc8\xb0\x25\xba\x92\xa2\x67\xf1\x56\xa2\xfc\x2c\xde\x7c\xf4\xac\x14\x66\x36\xec\xb4\x82\xdd\x01\x3d\xae\x9a\xfe\xec\x4a\x67\xc4\xd4\xb9\xdf\x82\x43\x4c\x96\x9d\xe9\x39\x56\xf1\x02\x82\xf1\xa5\xa9\xa9\x92\x9a\x82\x55\x34\xf2\xe8\xa4\x74\x1d\xb9\x78\xb6\xbf\x8a\x48\x3a\xb3\xbc\x86\x54\x0c\x35\x30\xd4\xda\xee\xe5\x5c\x3f\x6c\x57\xb9\xa6\xa9\x44\x41\xae\x43\x45\xc8\xb7\x8b\x98\xe7\x06\xb6\x3a\x47\x9d\xa3\x04\x21\x81\x0b\x0d\x04\x1a\x8a\xa6\x1d\xda\xea\x78\x6d\x54\x3b\x08\xc1\x90\xf0\x75\x99\x2d\x4b\x61\xfe\x6d\xf8\x4d\xb0\xe5\x9c\x30\x69\x1b\x95\x2d\x05\x92\x41\xb0\xd3\x3f\x61\xfe\xd3\x52\x99\x1b\x21\xa1\xe2\xdd\x13\xd7\x37\x5d\x32\x09\xfb\x1e\x07\x59\x93\xc2\x60\xad\x39\xf5\x87\xba\x68\x0a\x5e\x77\xa6\x4b\x0e\xc6\x2f\x73\x51\x43\x4b\xcc\xd6\x33\xbd\xb3\xde\x4b\xfa\xd5\x50\xe6\x1b\x8d\x22\xf6\x47\xc1\x98\xa8\xb7\xf7\xa6\x5d\x1c\x5f\x09\x99\x41\x33\x1b\x84\xbc\x98\x00\x13\xa4\x12\xda\x48\xac\xed\xd2\x23\x68\x59\xe1\x0e\x1c\x5e\xbf\xc0\xb7\xf4\x9a\x33\x76\xf3\x7c\xb5\x3f\x59\x75\xed\x10\xf7\x05\xfd\x6c\x3a\x82\x58\x86\x55\x55\x14\x44\xd2\xff\xa0\x65\xa9\x53\x8f\x1f\xc6\x3b\x93\x22\x0c\x1c\xd9\x78\x9e\x17\x8b\xac\x91\x41\xa5\xa7\x94\xa1\x1a\x0e\x3f\x2e\x30\xb2\x76\x95\xc8\x2a\xab\x59\x7f\x2d\x9e\x87\x46\x5b\x2e\xbe\x18\x61\x15\xf4\x33\x38\x42\xa0\x73\xa2\xa1\x46\x89\x0b\x1e\x37\x2b\xb8\xc5\x88\xd5\x42\xc7\x45\xae\x0e\x7c\x31\x82\x35\xbf\x85\xec\xd7\xab\x3c\xcf\xf5\xab\x96\xd4\x45\x3e\xde\x52\xb9\x8a\xaf\xb7\xd4\xb6\xf8\x7c\x8b\xf4\x15\x7d\xbf\x5d\x23\x3a\xbd\x87\xd3\xf3\xdc\x7c\x29\x2a\x2d\x85\x49\xbf\x84\xd3\x16\x91\x84\x31\x64\xd1\x33\x55\x89\xfe\xc3\x10\x65\xcf\x3d\x95\x3b\x05\xf0\xd8\xde\x87\xc8\xd0\x85\x40\x51\x63\xf7\x84\xa3\xa8\x14\x3b\xc1\xe1\x04\x04\x14\x5a\x4c\x3f\x90\x55\x97\x24\xb6\x8e\x06\x24\x1f\x29\x3f\x63\xb4\x6a\xb1\xac\x3d\xa6\x82\x2b\xdd\xb4\xb1\x46\x30\xfb\x76\xa4\x13\x3e\xd7\x6b\xd6\xde\x52\x25\xd9\x51\x64\x7f\xf7\x3b\xa0\x3c\xc3\xcf\x98\x19\xd9\x34\x33\xea\xe5\x1a\x28\x2e\x60\x97\x44\x6b\x94\xfc\x5d\x64\x44\xfd\xf7\xfb\xc7\xbb\xbf\x7e\xf8\xf3\x92\x6b\x8e\x46\xf0\xdf\xd0\x7e\x2f\xad\xd0\x34\x2d\xfd\x37\x63\xb1\xa5\x99\x75\x79\xf7\xc5\x9d\x1d\x57\x0a\x92\xd9\x64\xda\xd4\xb3\x36\x2a\xd0\xf2\xba\xc6\x7b\xf6\xf9\x40\x63\xc4\x61\xc9\x77\xc7\x52\x86\x73\x77\x80\x66\xaf\xfe\xdf\x0a\x5c\xcf\xb1\x4b\xa1\x68\x73\x7e\x31\xd8\xba\x9d\x4a\x08\x09\x99\x14\x65\x2b\x0c\xd3\x91\x23\x49\xf3\xc6\xe3\xef\xbf\x37\x5f\x1f\x9d\x58\xff\x6f\x33\xd5\xe8\x0b\xd3\x68\x1f\x26\x1c\x90\x6b\x2a\xbb\xa3\x24\xef\xd2\x3b\x3f\x26\xa2\xfd\x4c\x66\x54\xb6\x6b\x6c\xf4\x4f\x30\x4e\x8f\x5d\x01\xd0\x4b\x75\x4c\x3c\xfb\x0f\xb2\x9e\xa5\xa8\xca\xc9\x0c\x60\x53\x3c\x68\x62\x40\x9a\x53\x96\x49\xe4\x57\x49\x66\x6b\x39\xcc\x2f\xb5\xc5\xd4\x2d\xd2\xd2\xe7\xc8\x9b\xce\x43\xe2\x0e\xe7\xe6\x8d\x39\xfc\xb5\xf2\xf8\x37\xff\xf5\x72\x9b\x1a\xd6\x46\x49\xf3\x07\x03\xe3\x42\x6a\x61\x24\x33\x8d\xb8\xb0\xe0\x49\xcb\x67\x8a\x57\x9e\x62\xf4\x3f\xc7\x8e\x9f\x60\x98\x8e\x93\xdf\xa9\x54\x22\x72\x70\x34\xbc\x73\xd5\x84\x6a\x65\x23\x5d\xa5\x50\x02\xe5\xe5\x65\x43\x8c\xc6\x3d\x0a\x54\x8a\x3c\x4f\x47\xf7\x67\x95\x7a\x96\xe1\xb0\x6f\x34\xeb\x6c\x71\x0d\x8f\xe3\x02\x04\x55\xa0\x72\x51\xf3\xe6\xe0\xca\x88\xe1\xec\xd3\xc1\xeb\x2a\xbb\xf7\x15\xfd\xf7\xac\xea\xac\x72\x11\x77\xaf\x30\x15\x3c\x53\x57\xd1\xb9\x61\x36\xac\xf1\xc9\x72\xb1\xaa\xcf\x45\x0d\x4c\x98\xc8\x27\xac\x2c\x8c\x28\x4c\x61\x0f\x0d\xa1\xcb\x0a\x9d\xcd\x15\xcc\x39\xa6\xfb\xaa\x19\x1c\xbd\x5e\xb7\x62\xa3\x76\x86\x76\xab\x0b\x9f\x8c\x7e\x0b\x9b\xbe\xbd\x79\x81\xdb\x97\xdb\xff\x06\x00\x00\xff\xff\x8e\x56\x2d\x83\xad\x33\x00\x00")

func actionsSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_actionsSchemaJson,
		"actions.schema.json",
	)
}

func actionsSchemaJson() (*asset, error) {
	bytes, err := actionsSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "actions.schema.json", size: 13229, mode: os.FileMode(0644), modTime: time.Unix(1551958493, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x15, 0x7, 0xd7, 0x2d, 0x97, 0x93, 0x91, 0x29, 0x9, 0x83, 0xfa, 0xe, 0xd3, 0xc3, 0xef, 0x16, 0x32, 0x8b, 0xc4, 0x74, 0xe6, 0x90, 0xbe, 0x99, 0xd4, 0x52, 0x98, 0x8b, 0x78, 0xf7, 0x33, 0x59}}
	return a, nil
}

var _layoutSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\x4f\x6f\xdb\x36\x14\x3f\xcb\x9f\x82\x50\x0b\xe4\x30\x27\xce\xd6\xc3\xb0\xdc\x0a\xf4\xd2\x6d\x58\x8b\x75\xd8\x0e\x41\x16\xd0\xd2\x53\xcc\x56\x22\x55\x92\x8a\xe3\x16\xfe\xee\xc3\x23\x29\x99\x94\x28\x59\x76\xdb\x01\xc3\x02\x6c\x96\xe5\xf7\xe7\xf7\xfe\xf2\x3d\xf6\xf3\x22\x49\x9f\xb3\x3c\xbd\x21\xe9\x46\xeb\x5a\xdd\xac\x56\x94\xeb\x0d\xbd\xca\x44\xb5\x2a\xe9\x4e\x34\xfa\x52\x65\x1b\xa8\x68\xba\x44\x52\xf7\xec\xc8\x6f\x56\xab\xf7\x4a\x70\x47\x71\x25\xe4\xc3\x2a\x97\xb4\xd0\x97\xd7\x3f\xae\xec\xbb\x67\x86\x2d\x07\x95\x49\x56\x6b\x26\x38\xb2\xfe\xfc\xee\xcd\x6f\xe4\x9d\xf9\x9d\x14\x42\x92\x1c\xb2\x0f\xc4\x2a\x23\x3e\x29\xb2\xea\x5d\x0d\xc8\x23\xd6\xef\x21\xd3\xe6\x95\x84\x8f\x0d\x93\x80\xa0\x6f\xd3\x35\x14\x42\x42\xba\x24\x29\x2d\x34\x48\x7c\xe0\xb0\xbd\x67\xb9\x4a\xef\x90\xb8\x96\xa2\x06\xa9\x19\xa8\xf4\x86\x7c\x5e\x24\x49\xcb\x61\xbf\x25\xe9\x73\x09\x05\x2a\x78\xb6\xca\xa1\x60\x9c\xa1\x66\xb5\x42\x48\xef\x9a\xaa\xa2\x72\x97\x2e\x92\x64\xbf\x44\x4e\xab\xe1\x0c\xc6\x16\x51\xcb\x3a\x34\x2a\x19\x38\xa9\xa2\xb5\x22\x85\x14\x15\xd1\x1b\x20\x96\x92\xbc\x7e\xa5\x08\xe3\xe4\xc2\xda\x70\x41\xb4\x20\x17\x06\xd5\x85\x13\x42\xf3\xdc\x00\xa1\xe5\xdb\xbe\xe1\x9e\x5e\xa5\x25\xe3\x0f\x96\x65\xa0\xf8\x25\x27\xaf\x5f\x19\x2d\x4e\x32\x52\xed\x17\xe6\xbf\xbd\x8d\x66\x67\x6e\xeb\x53\xdf\xea\x53\x8c\x7c\x65\xbe\xae\x41\x19\x23\x5d\x0a\x88\x82\x50\x52\xb2\x8f\x0d\xcb\x37\x94\xe7\x25\xe3\x0f\x36\x45\xa8\x26\x94\x3c\xb0\x47\xe0\xa4\x16\x8c\x6b\x04\xa9\x59\x05\x4e\x76\x90\x17\xb5\x50\x0e\xe2\x9d\xfd\x75\x90\x08\xf8\xae\x23\x6a\x5f\xc5\x61\x0f\x81\xff\x02\x3b\x45\xa8\x04\x83\x9b\xd3\x0a\x14\xc2\xee\xe4\x11\xc1\xcd\x2f\x06\xb6\x28\xac\x75\x43\x8b\x3a\xe9\x93\x61\x9b\xcc\xb5\xb7\x4e\x65\x6a\x49\xf7\x8b\xee\xff\xfb\x2e\xfd\x02\xba\x53\xc2\x43\x3b\x8b\x5a\x83\x46\x8d\x88\x7b\x1f\xcb\x51\xb1\x4f\x30\x27\x08\x5e\x0c\xe2\xe6\x66\x42\xc8\x9c\x71\xaa\x41\xbd\xb0\xe6\xee\x5d\x06\x1b\x15\x27\xb0\xff\x10\xb2\x33\x0d\xd5\xf1\x0c\x10\x1c\xde\xa0\xd8\xdb\x36\x2a\x63\x8a\xea\x92\x6a\x70\xf1\x68\x75\x24\xc9\x31\x2e\xcd\xea\xb5\x78\x3a\x87\x6d\x4b\x95\xa7\xcf\x7e\xde\x79\x79\x30\xd9\x19\x0a\x5a\x2a\xe8\x32\x25\xf0\xd1\x29\x99\xf2\xc7\x56\x90\x9c\x55\xc0\x95\x51\x41\x3c\x41\xb1\xfc\x78\xba\xaf\x2a\xcc\x8d\x1d\x7e\x4e\xe4\x86\xa1\x1b\x46\x86\x37\xd5\x1a\x7b\x7d\xbc\x36\x9f\x3c\xed\xd8\x22\xaa\x2a\x0c\xf7\xee\x1c\xa1\xbb\x31\xa1\x5f\xe0\xe2\x17\xa7\xb9\x78\x23\x01\xfe\xa7\x4e\x76\x42\x3f\x9d\x23\xf4\xd3\xd7\x8a\x9c\xdf\x26\xe2\x11\x0b\xdc\xcf\x72\x33\x8c\xd0\xca\x4c\x27\x86\x7e\x89\xc7\x3a\x6f\x0a\x9a\xe9\x46\xda\x61\x25\x98\x77\x48\x2a\xc5\x56\xe1\x67\x26\xca\xa6\xe2\xe6\xb1\x8b\xb8\xf9\xb6\x85\xb2\xbc\x8f\xbc\x52\x9a\x4a\xdd\x7d\x33\xda\x26\x42\x6e\x26\xbe\xbe\x1b\x83\xa9\x20\x92\x7e\x40\x1a\xce\x3e\x36\x80\xe3\x81\x3b\xd3\x9c\xf5\x41\x90\x8c\xc5\xe7\x48\x47\x46\x2b\x98\x29\x52\x53\xa9\x59\xd6\x94\x54\x46\x95\x38\xa9\xa7\x2b\x41\xca\x50\x93\x15\xbf\x24\x70\xf5\x70\x45\x2e\xea\x4c\x9a\xfe\x7d\x11\xea\x0b\xc2\xf6\x65\xc6\x01\xf1\x85\xf5\x60\x84\x5a\x43\x39\xa7\x29\x7d\x49\xf0\x94\xde\xf9\x03\xf5\xa4\x2e\x93\x79\xa7\xd6\x96\xb1\xcc\x50\xa0\x6c\x14\x81\x9f\x98\x82\x8a\x08\x49\x34\xab\xcd\xbc\xea\x2b\x6d\x25\x55\x4d\xa9\x59\x5d\xda\x33\xf5\xfb\xab\xeb\xee\x3d\xe3\xac\x6a\xb0\xd0\xae\xaf\xae\x03\x84\x6d\x4d\x7c\x19\x48\x27\xe5\x1b\xe2\xf4\xaa\xf3\x00\x35\x82\x09\xa7\x96\x7e\x48\x96\x67\x4e\x40\xfd\xb6\x30\x53\x31\xcc\xf3\xc1\x59\x68\x6c\x47\x9a\x04\x72\x98\x2e\x2d\x98\x0c\xb8\x6e\x4b\x02\x48\x53\xd7\x20\x49\x09\x85\xbe\xac\x84\xd2\x06\xaa\x43\xfa\x55\x81\xf6\x7a\xc9\x48\xd3\x58\xa2\x6a\x49\xf5\x06\xa4\x41\xa7\x36\xd4\xbc\xf4\xdd\xd8\xa2\xb2\x13\xe0\x72\xba\x5e\x81\x9b\xec\xb9\x4d\xb3\x5d\xc9\x78\x6e\x8f\x83\xac\x59\x0b\x96\xa7\x77\xb1\x31\xde\x4a\x6d\x0f\xa0\x1e\xcc\xdf\xa1\x96\xa0\x80\xe3\x8a\x64\x08\xfd\x15\xa4\x5d\x0e\xcb\xd2\x4e\xb0\x0b\xd2\xfb\xfb\x4c\x46\x5c\x67\xce\x3c\xe2\xdc\xd5\x7a\x28\x72\xa2\x24\x49\xfa\x81\x71\xef\x54\x19\x22\x6c\x14\xe4\xb8\xb0\x3e\x82\x64\xc5\xce\x60\xb3\x87\x62\xc7\x90\x09\xae\x30\x63\xd2\xfe\x04\xdd\x87\xdb\xfe\xa5\x12\x14\xcb\x1b\x5a\xde\x3f\x62\x55\x5b\xe7\x8c\x11\x1b\x86\x1e\x26\xcb\x46\xb6\x1b\x96\x6d\x48\x46\x39\x17\x9a\xac\x81\x48\xa8\xc4\x23\xe4\x87\xf5\xdb\x55\x49\xd1\x3a\x37\x1d\xc7\x64\xd4\xc4\x9d\x59\x01\x55\x8d\x84\x0a\xb8\x4e\x47\xf9\xbb\xc9\x1f\xdd\xa1\x81\x6b\x15\x38\xb5\xa6\x5a\x83\xe4\xd1\x35\x31\x49\xd2\xbf\x6f\xaf\x2f\x7f\xba\xfb\xee\x79\xf0\x36\xb2\xd7\xd9\x2e\xd8\x35\xc1\x43\x10\x46\xf7\x9f\x19\xda\x47\xf5\x0f\x11\x98\x6a\x77\xf6\xf9\x35\x84\x3b\x3e\x3e\xb7\x5b\xbe\xeb\x0f\xcc\xe6\xb2\x45\xed\x23\x1a\xad\x79\xbb\xa8\xa6\x1e\xe5\xfe\xf0\xbc\xf7\x6d\x3a\x32\xfb\xf5\x98\x0f\xac\x73\x18\x1d\x5b\xcb\x14\x0e\x88\xa6\x60\x96\xc3\x24\x26\x5e\xf5\xdf\x75\xd5\xef\xf6\xc3\x19\xe5\x6f\x29\xa7\xea\x7f\x7a\x51\x36\x35\xef\xb7\xc9\x7f\xad\xee\x47\x76\xe0\xb4\x62\x4a\x31\xfe\x70\x8f\x67\xd4\x94\xaa\x5f\x99\xd2\xf6\x2a\xe9\x70\x13\x43\xb5\x2b\x6f\x73\xc0\x51\x09\x04\x8b\xdc\x79\xcb\x03\xd1\x66\x3d\x95\x92\xee\xbc\xf7\xe8\x8d\x5e\x91\xf5\xb4\xfe\x85\x79\xeb\x9d\x31\xdd\x98\x67\x51\xa3\x62\x2f\x65\xc7\xcb\x2b\xcc\x0e\x29\xb6\x6e\x11\x70\x83\xfc\x44\x0c\xdc\xfc\xd6\x2f\xc6\xf8\x78\xe4\x5c\x1a\x1f\x6b\x5a\x7f\xf7\x67\x9b\x61\xd9\x20\xb0\x6f\xad\x6f\x11\xd1\x3c\xab\x5e\xf7\xb3\xeb\x6f\xac\xd6\xec\xa5\xca\xbc\x6a\x33\xb4\xff\xd1\x7a\x0b\x2f\x8f\xba\x8a\xcb\x99\xca\xa8\xcc\x21\x1f\xd6\xdc\x58\x94\xa7\xc7\xee\x4e\xa0\x37\x68\x02\xb1\xda\x0f\x22\x46\xb3\x24\x9a\x22\x67\x46\xd7\x1d\x0d\x23\xb1\x6d\xaf\xa4\xbb\x3b\x68\xc4\xda\xce\x54\x78\x44\xb9\xe0\x1e\xbf\x00\xe8\x56\x7f\xa1\x0f\xcd\x7d\x62\x29\xef\x2d\xce\x11\x77\xe6\x4c\xd5\x25\xdd\x05\xcb\xa4\xb3\x66\x64\xd8\x0c\xa6\xdd\x00\xc8\xf4\xc0\x8b\x94\xc4\x4d\x47\x6d\xae\xc7\x15\xce\x18\x75\x92\x60\x89\xab\x6a\xc1\xc3\xb1\x26\xba\xa3\x34\xeb\xcb\x03\xad\x6b\xe1\x15\xfd\x80\x6b\x81\x1d\xb2\x47\x0c\x0f\xfa\xf7\xa0\x7b\x0f\xb7\x64\xd5\xac\x49\xa7\xa8\x4b\xc5\xb1\x2e\x1d\x8f\x70\x26\x38\xae\x2e\x92\xb6\xd7\x38\x0d\x67\xfa\xd0\xb6\x47\x9a\x76\x2f\xe0\x23\x53\x52\x2c\xe6\x81\x73\x62\x67\x8b\x1f\xfd\x70\x68\x09\xa1\x1e\x53\x1e\x50\xcf\xd6\x3e\xe8\xff\xf1\x06\xef\xa1\x32\xfe\x3a\x06\x06\x89\x4c\xe7\x70\xe7\xf9\x00\x1f\x53\x04\x9e\x30\x5b\x15\xe4\x73\xbc\x32\xe8\x7a\xc7\x8f\x96\xfd\x91\x7f\xb1\x39\x90\x9e\x7c\xbd\xe8\x97\xcc\x48\x6f\x7a\x49\x3c\xa2\x25\xb6\x75\x96\xd1\xb2\xdc\xd9\xcd\xe4\x4f\x5b\xd8\x73\xdb\xd3\x23\x2d\x1b\xe8\x25\x6b\xb4\x2f\x59\xc2\xc9\x6a\x35\x24\xdd\xdc\xe3\x19\xd2\xaf\x4e\x97\x1a\x41\x4b\x08\x83\x3f\x72\xef\xd8\x8f\xbc\xa7\x24\x1a\xf7\x78\x23\x3c\x21\x26\x8b\x64\xbf\xd8\x2f\xfe\x09\x00\x00\xff\xff\x23\xdf\x16\x17\x20\x1f\x00\x00")

func layoutSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_layoutSchemaJson,
		"layout.schema.json",
	)
}

func layoutSchemaJson() (*asset, error) {
	bytes, err := layoutSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layout.schema.json", size: 7968, mode: os.FileMode(0644), modTime: time.Unix(1551958493, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xde, 0xa8, 0xd8, 0xf7, 0xa9, 0x98, 0x9e, 0x85, 0xd6, 0x4d, 0x9e, 0xbf, 0x46, 0x92, 0xd6, 0xc3, 0x8f, 0x39, 0x2b, 0x6f, 0xca, 0xd8, 0x28, 0x52, 0x2e, 0xb0, 0x63, 0xf0, 0x10, 0x2f, 0x28, 0xd8}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"actions.schema.json": actionsSchemaJson,

	"layout.schema.json": layoutSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"actions.schema.json": &bintree{actionsSchemaJson, map[string]*bintree{}},
	"layout.schema.json":  &bintree{layoutSchemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
