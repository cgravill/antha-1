// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/actions.schema.json (13.644kB)
// schemas/layout.schema.json (8.11kB)

package liquidhandling

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _actionsSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x1a\xcb\x8e\xdc\xb8\xf1\x3c\xf3\x15\x05\xed\x22\xb0\x91\x9e\x87\x4f\x41\xe6\x66\x60\x2f\x1b\x04\xb1\x81\xdd\xe4\x62\x38\x03\xb6\x54\x3d\xe2\x9a\x22\x65\x92\x1a\xb9\x63\xcc\xbf\x07\x7c\xe9\x49\xbd\xba\xdb\x8e\x0f\xe9\xc3\x4c\xb7\x58\x55\xac\x77\x15\x8b\xfa\x7a\x7d\x95\xfc\x4c\xb3\xe4\x01\x92\x5c\xeb\x52\x3d\xdc\xdd\x11\xae\x73\x72\x9b\x8a\xe2\x8e\xa4\x9a\x0a\xae\x6e\x54\x9a\x63\x41\x92\x9d\x81\xf5\xdf\x3d\xfc\xc3\xdd\xdd\x1f\x4a\x70\x0f\x71\x2b\xe4\xd3\x5d\x26\xc9\x41\xdf\xdc\xff\xe5\xce\x3d\xfb\xc9\xa2\x65\xa8\x52\x49\x4b\x43\xce\xa0\xfe\xed\xb7\x77\xff\x80\xdf\xec\x3a\x1c\x84\x04\xb7\xbc\xa7\xfc\x09\xfc\x9e\x90\x12\x29\x29\x66\x20\x2a\x0d\x59\x25\xcd\x12\xa3\x9f\x2b\x9a\xe5\x84\x67\x8c\xf2\xa7\x64\x77\x0d\x00\x90\xe8\x63\x89\x86\xa6\xd8\xff\x81\xa9\x0e\x4f\x25\x7e\xae\xa8\x44\x23\xd8\x87\xe4\x19\xa5\x32\x3b\xef\x20\xf1\xe4\x93\x8f\x1e\xae\x94\xa2\x44\xa9\x29\xaa\xe4\x01\xbe\xda\x67\xf6\x79\x40\xe9\x3e\xb4\x0b\x03\x49\x74\x8e\xe0\x61\x41\x1c\xc0\xfc\x74\x72\xef\xac\x60\xcf\x84\xd1\x8c\x58\xe0\x5d\x9f\x4e\x2a\xb8\xd2\x86\xc2\x9b\xdb\xfb\xa4\x59\x7a\x69\xa1\x1a\x56\xd7\xb0\x30\xa3\x35\xb3\xdc\xd7\x1c\x18\x91\xa3\x4c\x05\x5d\x12\x29\xc9\x71\xb8\x58\x50\xfe\xab\xc6\xc2\x30\xf4\x66\xb0\x44\xfd\xf3\x3e\xa3\x76\x49\x70\x7c\x77\x30\x56\x18\x2d\x99\xcf\x57\x48\x7e\x96\x68\xd6\x93\x9f\xee\x32\x3c\x50\x4e\xad\x20\x77\x5a\x12\xae\x0e\x28\xdf\x5a\xc1\x92\xae\x62\x56\xe1\x97\x52\x14\xa5\x3e\x15\xbb\x26\xb4\xc5\x1d\xa1\x7e\xec\x3d\x69\xd7\xdd\xb7\x17\xe7\xef\x0d\x31\xab\x96\xab\xab\xc4\xd9\xc0\xff\x1a\x45\xc4\x2f\x2e\x02\x10\x88\x37\x16\x50\x0e\x04\x4a\x46\x34\x42\x8d\x8c\x99\x30\xba\xba\x1a\x7b\xbb\x79\xd8\x73\x76\x4e\x0a\x34\x9e\xae\x85\x26\xec\xf1\x59\xb0\xaa\x40\xe3\xee\x06\x70\xe0\xed\x57\xe6\x99\x85\x0f\xbf\x46\x7c\xfd\x9e\x23\x64\x54\x95\x8c\x1c\xc1\x40\x06\x27\xf7\xd2\xec\x3c\x56\x60\x4b\x69\xe3\x73\x89\x7d\xfa\xe2\x16\xfb\x8c\xcc\x6e\x64\x21\xc1\x41\x42\x29\x51\x21\xd7\x13\x1b\xc6\xed\x56\x20\x51\x95\xc4\x02\xb9\xee\xf3\x90\x8a\xa2\x14\x1c\xb9\x56\xf3\x1c\xa8\x6a\x7f\xd3\xc2\x42\x9d\xd3\x34\x87\x82\x7c\x42\xa8\x4a\xd0\x39\x55\x53\x82\x87\x88\x71\x4f\xdb\x78\xb8\x8a\x6e\xf5\xd6\x6c\x04\xcd\x46\x01\x2f\x6e\xde\x49\x0b\xa7\x82\xa7\xc8\x75\x08\x65\x48\x2a\x4e\xb5\x37\xf5\x84\xb5\xc7\x06\x8f\x70\xa7\x27\x6c\xde\x53\x4e\xc3\xdb\x84\xf5\x5b\xe5\x3b\xfd\x77\x59\x5d\xda\xbc\x07\xbd\x7a\x77\x5e\x15\x7b\x94\xdd\x95\x82\x72\x5a\x54\x45\xf2\x00\xf7\xb7\xf7\x11\xae\xac\xbe\x96\x98\x31\x40\xca\x44\xa3\x73\x86\x31\x7f\x54\x01\x7e\x31\xde\xaa\x30\x5b\xa3\x95\xeb\x01\x1f\x09\xc9\x32\xeb\xbf\x84\xbd\xef\x5a\xec\x40\x98\xc2\xeb\x1e\xec\x32\xa8\xa5\xee\xc0\x97\x80\x2d\x54\xd2\x0d\x99\x89\xdc\xf4\x16\x3a\x40\x3b\xd0\xc7\x92\xa6\x84\xb1\xa3\xb1\x0c\x81\x7f\xb9\xc0\x5e\x9b\x9e\x9e\x09\xab\x70\xe0\xac\xd1\xbc\xe4\x00\x67\xa3\xd5\x82\x04\xff\xe8\x0a\x32\x8c\x4e\xef\x1a\xbd\x94\xd0\x37\x7e\x8c\x7c\xc4\xf2\x9d\x4d\xa2\x76\x8f\x27\xc2\x6b\xff\xa7\x5b\xdd\x4d\x4e\xff\xbb\x48\xdb\x80\xe8\x55\xcd\x88\x1f\x32\x0f\xec\xb4\x6e\xd0\xa1\xa6\x3a\xb7\x65\x62\x50\xdf\xa5\xd8\x0b\x3d\x55\xdb\x7b\x7d\x52\xb3\xda\xb5\x91\xd9\x3e\xfd\xf4\x68\x92\xd8\xa3\x49\x75\x90\x48\x51\xbb\x84\xc3\x12\xf8\x38\xc0\x9c\xe8\xa0\x3a\xa2\x74\x68\xc5\x20\x7a\xdc\x79\xbd\xc5\xeb\x75\xcc\x48\xbf\xfe\x62\x15\xc2\xc1\x6c\x01\xaf\x4a\x49\x85\x04\x2d\x06\x2a\x79\x9d\x8c\x08\x46\x7a\x02\x2b\xe7\x22\x8b\x4d\x9e\x59\xc3\xa2\xb1\x9c\x14\x75\x53\xc5\x82\xc5\x27\xb0\x8b\x8a\x69\x5a\x32\xd7\x32\xbd\xb9\xbd\x9f\x02\xeb\x25\xb6\x35\x92\x19\xd3\x5d\x5e\xb2\xd4\xc4\x3e\xff\xbe\xc2\x5d\xcf\x88\x3a\x9f\xf2\x22\x48\xa6\x30\x69\xe4\xfa\x9f\x65\x46\x34\x2e\xc6\x61\x65\xc1\x54\x28\x02\xda\x36\x09\x4d\x3c\x9e\x13\x71\x4c\xa4\x26\xc2\x38\xd6\x8f\x9e\xf0\xf6\x48\x33\x34\x1e\x66\x9a\xda\x6e\xc6\x89\x3a\x49\x77\xf7\x19\x42\xbe\x05\xba\xb4\x29\x72\xa4\x4f\xb9\x5e\xb4\x81\x09\x7a\x07\x1a\xfc\x0e\x79\x16\xbe\x6a\x5a\x82\x44\x46\x34\x7d\x36\xed\x24\x28\x51\xa0\xc9\x91\xc3\x8c\xb2\xc9\x36\x12\x0f\x28\x91\xa7\xb6\x6c\xf5\xeb\xd7\x66\x1b\xb5\xb4\x26\xa3\x31\xd6\x81\x13\x5d\x15\xf6\x40\xa9\x1b\xe9\xa7\xa2\x0c\xb9\x8d\x9d\x0f\xae\xc4\x3c\xee\x85\xd6\xa2\x30\x0c\xdb\x9f\x5a\x94\xe6\xbb\x33\xe1\x23\xc3\x67\x34\x29\x3d\x96\x42\x4e\x2a\xc2\x0d\x6b\xdf\xa8\xfe\x7a\xc3\x6f\x28\xbd\x17\x75\x51\x45\xf9\x13\xc3\xdf\xfd\xd9\x74\xd1\x55\x3b\x87\x3a\x87\x09\x69\x4e\x38\x47\x06\xe1\x78\x7b\x8e\x5b\x1e\xa4\xb3\xab\x16\xd6\x2f\x7d\x1b\x06\x49\x4d\x94\x46\x5b\xb6\x4b\xc1\x68\x7a\xb4\x63\x0f\x65\xcd\x9e\xb9\x7f\x39\x92\x6c\xbb\xeb\xda\xfd\xd6\x7a\xad\xed\xd8\x45\x25\xd3\x7e\xe3\x62\x63\x34\x2e\x7b\x43\x29\x9e\x74\xfa\x89\x7a\x55\xcd\xd3\x62\x13\xbb\x19\x2a\x4d\xb9\x65\xf5\x95\x7a\x3d\xe4\x76\x07\xa1\x7c\x01\x2d\x4a\x46\x51\xb9\x07\x37\xe6\xa4\x84\x5c\xe1\x94\x38\x73\x33\x95\x06\xa8\x39\x30\xae\x13\x7f\x6a\xa0\xd1\x9b\xd1\xac\xd2\x51\xe7\x58\xbe\x56\x4f\xfe\x7c\x2e\x0e\x61\x52\x11\x54\x24\xd1\x4e\x2d\xec\x31\x79\x6a\xc4\xd4\x10\x5e\x71\x80\x5f\xc3\xbf\x77\xf6\xb3\xf8\x77\x34\xbe\x3b\xeb\x3e\x3a\xb7\xb0\x3e\x9e\xc0\x98\xd3\x18\xfa\xca\x40\xd5\x62\x6c\x0d\x73\xe4\x1a\x3e\x4d\xee\x58\xcb\xe4\x7b\x22\x49\x81\x1a\xa5\x72\x65\x18\x33\x53\x85\x0d\xbb\x35\x39\xb6\xa9\x9c\xa8\x92\xfa\xd3\x73\x4d\x14\x94\x28\x0f\x42\x16\x36\x97\x6f\xd0\x78\x49\x4b\xd4\x9a\xf2\xa7\x77\xa5\x9b\xb4\xad\x12\x27\xbb\xbc\x38\x3e\x05\x98\xa3\xd7\x2a\x71\x08\x63\x33\x33\x51\x98\x9d\x6b\x0e\x65\x9e\x4a\x05\x96\xca\xe4\x0a\x2c\x16\x9b\x11\x74\xbf\xf8\x68\x51\xa5\xb9\x38\x1c\x46\x65\x64\x84\x57\x36\x3a\x9c\x54\x7b\x0f\x7e\xcf\x44\x2d\xaa\x71\x1f\x38\x89\x30\xb0\x59\x19\xb5\x19\x01\x4f\x77\x31\xbc\x47\xf4\x37\xa9\xa9\xc1\xea\xab\xab\xad\xce\xa1\x43\x82\xe4\xc0\x44\xfd\x28\x6d\x3a\x5f\xd0\x61\x43\x74\xa1\x44\x4f\xe2\x2d\x64\xf9\x49\xbc\xe9\xec\x59\x29\xcc\x6c\xda\x69\x14\xbb\x03\x7a\x58\x74\xfd\xc9\x9d\x4e\xc8\xa9\x53\x9f\x99\x80\x18\x6d\x3b\x71\xe6\x58\xc4\x8b\x28\xc6\xb7\xa6\xa6\x4b\x0a\x0d\xab\x08\xfa\x68\xb5\x74\x19\xbd\x78\xb6\xbf\x89\x4a\x5a\xb7\xbc\x84\x56\x0c\x35\x30\xd4\x9a\xd3\xcb\xa9\x71\xd8\xec\x72\x49\x57\x59\x05\xb9\x0c\xb5\x42\xbf\x6d\xc6\x3c\x35\xb1\xd5\x39\xea\x1c\x25\x08\x09\x5c\x68\x20\x10\x28\x9a\xe3\xd0\xd6\xc0\x6b\xb2\xda\x5e\x08\x86\x84\x2f\xeb\x6c\x5e\x0b\xd3\xab\xf1\x95\xe8\x91\x73\xc4\xa4\x3d\xa8\x6c\x69\x90\x0c\x82\x9d\xfe\x09\xf3\x9f\x96\xca\xfc\x10\x12\x2a\xde\x3e\x71\xe7\xa6\x73\x26\x61\x3f\xe2\x20\x6b\xd4\x18\x2c\x1d\x4e\xfd\x9d\x3b\x9a\x86\xd7\x5d\x1e\x93\xbd\x89\xcb\x5c\xd4\xd0\x10\xb3\xfd\x4c\xe7\x52\xf9\x9c\xf3\x6a\xac\xf2\x0d\x46\x11\x8f\x07\xc1\x98\xa8\xb7\x9f\x4d\xdb\x3c\xbe\x90\x32\xa3\x6e\xd6\x4b\x79\x6b\x12\x4c\x94\x4a\x4c\x90\xb5\xbe\x4b\x0f\xa0\x65\x85\x3b\x70\x78\xdd\x06\xdf\xd2\xeb\x5e\xe6\x2f\x9e\x4f\x16\x43\x3b\xc6\x7d\x41\xbf\x98\x13\xc1\x5a\x86\x55\x55\x14\x44\xd2\xff\xa0\x65\xa9\x35\x8f\x1f\xc6\x3b\x97\x22\x0c\x1c\xd9\xf5\x3c\xcf\x36\x59\x03\x87\x4a\x8f\x29\x43\xd5\x1f\x7e\x9c\xe1\x64\xcd\x2e\x2b\xbb\xac\xb0\xff\x52\x3e\x8f\x8d\xb6\x5c\x7e\x31\xca\x2a\xe8\x17\x70\x84\x40\xe7\x44\x43\x8d\x12\x67\x22\x6e\x52\x71\xb3\x19\xab\x81\x5e\x97\xb9\x5a\xf0\xd9\x0c\x16\x3e\x33\xd5\xaf\xd3\x79\x9e\x1a\x57\x0d\xa9\xb3\x62\xbc\xa1\x72\x91\x58\x6f\xa8\x6d\x89\xf9\x06\xe9\x1b\xc6\x7e\xb3\xc7\xea\xf2\x1e\x2f\xcf\x53\xf3\xa5\x55\x65\x29\x4e\xfa\x25\x5e\xb6\x88\x24\x8c\x21\x5b\x3d\x53\x95\xe8\x5f\x0c\x51\xf6\xde\x53\xb9\x5b\x00\x8f\xed\x63\x88\xf4\x43\x08\x14\x35\x7e\x4f\x38\x8a\x4a\xb1\x23\xec\x8f\x40\x40\xa1\xc5\xf4\x03\x59\x75\x4e\x61\x6b\x69\x40\xf2\x89\xf2\x13\x46\xab\x16\xcb\xfa\x63\xf3\x5a\x58\x50\xcc\x63\x33\xd2\x89\xdf\xeb\x85\xbd\xb7\x74\x49\x76\x14\xd9\x95\x7e\x07\x94\x67\xf8\x05\x33\xa3\x9b\x30\xa3\x9e\xef\x81\xd6\x25\xec\x92\x68\x8d\x92\xbf\x5f\x99\x51\xff\xfd\xe1\xfe\xe6\xaf\x1f\xff\x3c\x17\x9a\x83\x11\xfc\x77\xf4\xdf\x73\x3b\x34\x4d\x4b\xff\x4e\xd9\xda\xd6\x0c\xda\x57\xfb\xec\xb8\x52\x90\xcc\x16\xd3\xd0\xcf\xda\xac\x40\xcb\xcb\x3a\xef\xc9\xf7\x03\xc1\x89\xe3\x9a\x6f\xaf\xa5\x0c\xe7\xee\x02\xcd\x7e\xfb\xff\x51\xe0\x72\x81\x5d\x0a\x45\xc3\xfd\x45\x4f\x74\x3b\x95\x10\x12\x32\x29\xca\x46\x19\xe6\x44\x8e\x24\xcd\x43\xc4\xdf\xfe\x68\xb1\x3e\xb8\xb1\xfe\xdf\x56\xaa\xc1\x1b\xa9\xab\x63\x98\x70\x40\xae\xa9\x6c\xaf\x92\x7c\x48\xef\xfc\x98\x88\x76\x2b\x99\x31\xd9\x2e\xf8\xe8\x9f\x60\x58\x1e\xdb\x06\xa0\x53\xea\x98\x78\xf2\x2f\x64\x3d\x49\x51\x95\xa3\x19\xc0\xa6\x7c\x10\x72\x40\x9a\x53\x96\x49\xe4\x17\x29\x66\x4b\x35\xcc\x6f\xb5\xc5\xd5\x2d\xd2\xfc\x7b\xcf\x1b\xee\x43\xd6\x5d\xce\x4d\x3b\xf3\xfc\x5b\xce\xe1\x33\xfd\xb6\x73\x53\x1a\x96\x46\x49\xd3\x17\x03\xc3\x46\x6a\x66\x24\x33\xce\xb8\x30\x13\x49\xf3\x77\x8a\x17\x9e\x62\x74\x5f\xdb\x5e\x3f\xc1\x30\x27\x4e\x7e\xa3\x52\x89\xc8\xc1\xd1\xf0\xc1\x55\x13\xaa\x95\xcd\x74\x95\x42\x09\x94\x97\xe7\x0d\x31\x42\x78\x14\xa8\x14\x79\x1a\x8f\xee\x4f\x6a\xf5\x2c\xc3\xf1\xd8\x08\xfb\x6c\x09\x0d\x8f\xe3\x12\x04\x55\xa0\x72\x51\xf3\x70\x71\x65\xd4\x70\xf2\xed\xe0\x65\x8d\xdd\x79\xcb\xfe\x47\x36\x75\x56\xb9\x8c\xfb\xa8\x30\x15\x3c\x53\x17\xb1\xb9\x61\x36\x6e\xf1\xd1\x76\x6b\x4d\x9f\x8b\x1a\x98\x30\x99\x4f\x58\x5d\x18\x55\x98\xc6\x1e\x02\xa1\xf3\x1a\x9d\xcd\x1d\xcc\x29\xae\xfb\x2a\x0c\x8e\x5e\x2f\x7b\xb1\x31\x3b\x43\x2b\xea\xcc\x2b\xa3\xdf\xc3\xa7\xaf\xaf\x5e\xe0\xfa\xe5\xfa\xbf\x01\x00\x00\xff\xff\x89\x96\x7f\x75\x4c\x35\x00\x00")

func actionsSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_actionsSchemaJson,
		"actions.schema.json",
	)
}

func actionsSchemaJson() (*asset, error) {
	bytes, err := actionsSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "actions.schema.json", size: 13644, mode: os.FileMode(0644), modTime: time.Unix(1552923551, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfb, 0xf6, 0xf9, 0x99, 0x10, 0x81, 0xf9, 0x3c, 0x54, 0xef, 0x5d, 0x8b, 0x19, 0x77, 0x22, 0xe4, 0x11, 0xef, 0x69, 0x5b, 0x1e, 0x3c, 0x79, 0xef, 0xa7, 0xcc, 0xeb, 0x5a, 0x32, 0xfd, 0x62, 0xf7}}
	return a, nil
}

var _layoutSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\x5b\x6f\xdb\xb6\x17\x7f\x96\x3f\x05\xa1\x16\xc8\xc3\xdf\x89\xd3\x7f\x1f\x86\xe5\xad\x40\x5f\xba\x0d\x6b\xb1\x0e\xdb\x43\x90\x05\xb4\x74\x14\xb3\x95\x48\x95\xa4\xe2\xb8\x85\xbf\xfb\x70\x48\x4a\x22\x25\x4a\xbe\xb4\x1d\x30\x2c\xc0\x66\x59\x3e\x97\xdf\xb9\xf2\x1c\xf6\xcb\x22\x49\x9f\xb3\x3c\xbd\x21\xe9\x46\xeb\x5a\xdd\xac\x56\x94\xeb\x0d\xbd\xca\x44\xb5\x2a\xe9\x4e\x34\xfa\x52\x65\x1b\xa8\x68\xba\x44\x52\xf7\xec\xc8\x6f\x56\xab\x0f\x4a\x70\x47\x71\x25\xe4\xc3\x2a\x97\xb4\xd0\x97\xd7\x3f\xac\xec\xbb\x67\x86\x2d\x07\x95\x49\x56\x6b\x26\x38\xb2\xfe\xf4\xfe\xed\xaf\xe4\xbd\xf9\x9d\x14\x42\x92\x1c\xb2\x8f\xc4\x2a\x23\x3e\x29\xb2\xea\x5d\x0d\xc8\x23\xd6\x1f\x20\xd3\xe6\x95\x84\x4f\x0d\x93\x80\xa0\x6f\xd3\x35\x14\x42\x42\xba\x24\x29\x2d\x34\x48\x7c\xe0\xb0\xbd\x67\xb9\xc2\xc7\x47\x90\x0a\x25\xdd\x21\x5f\x2d\x45\x0d\x52\x33\x50\xe9\x0d\xf9\xb2\x20\xee\xaf\x23\xf2\x5f\x9a\x1f\x06\xb0\xf5\x06\x88\xa3\x25\xa2\x20\x7a\xc3\x14\x51\xbd\x15\x8f\xb4\x64\x39\x75\xc0\x03\x39\x99\xe0\x4a\xa3\x84\x17\x57\xd7\x69\xf7\xd3\x7e\xb9\x48\x92\x16\x3f\xea\x4e\x92\x24\x7d\x2e\xa1\x40\xca\x67\xab\x1c\x0a\xc6\x19\x8a\x53\x2b\x74\xd0\xfb\xa6\xaa\xa8\xdc\xa5\x8b\x24\xb1\x9c\xd6\xde\x33\x18\x5b\xff\xb4\xac\x63\x17\x27\xa3\x90\x55\xb4\x56\xa4\x90\xa2\x22\xe8\x05\x4b\x49\xde\xbc\x56\x84\x71\x72\x61\x6d\xb8\x20\x5a\x90\x0b\x83\xea\xc2\x09\xa1\x79\x6e\x80\xd0\xf2\x5d\xe8\xfb\xc4\xd7\xab\xb4\x64\xfc\xc1\xb2\x8c\x14\xbf\xe2\xe4\xcd\x6b\xa3\xc5\x49\x46\xaa\xfd\xc2\xfc\xb7\xb7\xb9\xd5\x99\xeb\x44\xa7\xbe\xd5\xa7\x18\xf9\xda\x7c\x5d\x83\x32\x46\xba\x84\x14\x05\xa1\xa4\x64\x9f\x1a\x96\x6f\x28\xcf\x4b\xc6\x1f\x6c\xc2\x52\x4d\x28\x79\x60\x8f\xc0\x49\x2d\x18\xd7\x08\x52\xb3\x0a\x9c\xec\x20\x4b\x6b\xa1\x1c\xc4\x3b\xfb\x6b\x1d\xf1\x47\x4f\xd4\xbe\x8a\xc3\x1e\x03\xff\x19\x76\x8a\x50\x09\x06\x37\xa7\x15\x28\x84\xdd\xc9\x23\x82\x9b\x5f\x0c\x6c\x93\xb9\x10\xb3\xa8\x93\x3e\x1b\xb6\xd9\x5c\x7b\xe7\x54\xa6\x96\x74\xbf\xe8\xfe\xbf\xef\xd2\x2f\xa0\x3b\x25\x3c\xb4\xb3\xa8\x35\x68\xd2\x88\xb8\xf7\xb1\x23\x28\xf6\x19\x8e\x09\x82\x17\x83\xb8\xb9\x99\x10\x32\x67\x9c\x6a\x50\x2f\xad\xb9\x7b\x97\xc1\x46\xc5\x09\xec\xff\x0f\xd9\x99\x86\xea\x70\x06\x08\x0e\x6f\x51\xec\x6d\x1b\x95\x29\x45\x75\x49\x35\xb8\x78\xb4\x3a\x92\xe4\x10\x97\x66\xf5\x5a\x3c\x9d\xc3\xb6\xa5\xca\xd3\x67\x3f\xef\xbc\x3c\x98\xed\x0c\x05\x2d\x15\x74\x99\x12\xf8\xe8\x94\x4c\xf9\x7d\x2b\x48\xce\x2a\xe0\xca\xa8\x20\x9e\xa0\x58\x7e\x3c\xdd\x57\x15\xe6\xc6\x0e\x3f\x67\x72\xc3\xd0\x8d\x23\xc3\x9b\x6a\x8d\x27\x4f\xbc\x36\x9f\x3c\xed\xd8\x22\xaa\x2a\x0c\xf7\xee\x1c\xa1\xbb\x29\xa1\x5f\xe1\xe2\x97\xa7\xb9\x78\x23\x01\xfe\xa3\x4e\x76\x42\x3f\x9f\x23\xf4\xf3\xb7\x8a\x9c\xdf\x26\xe2\x11\x0b\xdc\xcf\x72\x33\x1a\xd1\xca\xcc\x4a\x86\x7e\x89\xc7\x3a\x6f\x0a\x9a\xe9\x46\xda\xd1\x29\x98\xbe\x48\x2a\xc5\xd6\x8c\x51\x99\x28\x9b\x8a\x9b\xc7\x2e\xe2\xe6\xdb\x16\xca\xf2\x3e\xf2\x4a\x69\x2a\x75\xf7\xcd\x68\x9b\x09\xb9\x99\x3f\x87\x6e\x0c\xa6\x82\x48\xfa\x01\x69\x38\xfb\xd4\x00\x8e\x07\xee\x4c\x73\xd6\x07\x41\x32\x16\x9f\x23\x1d\x19\xbb\x31\xaf\xa6\x52\xb3\xac\x29\xa9\x8c\x2a\x71\x52\x4f\x57\x82\x94\xa1\x26\x2b\x7e\x49\xe0\xea\xe1\x8a\x5c\xd4\x99\x34\xfd\xfb\x22\xd4\x17\x84\xed\xeb\x8c\x03\xe2\x0b\x1b\xc0\x08\xb5\x86\x72\x4e\x53\xfa\x8a\xe0\x29\xbd\xf3\xc7\xfb\x59\x5d\x26\xf3\x4e\xad\x2d\x63\x99\xa1\x40\xd9\x28\x02\x3f\x31\x05\x15\x11\x92\x68\x56\x9b\x79\xd5\x57\xda\x4a\xaa\x9a\x52\xb3\xba\xb4\x67\xea\x8b\xab\xeb\xee\x3d\xe3\xac\x6a\xb0\xd0\xae\xaf\xae\x03\x84\x6d\x4d\x7c\x1d\x48\x27\xe5\x3b\xe2\xf4\xaa\xb3\x87\x1a\xc1\x84\x53\xcb\x30\x24\xcb\x33\x27\xa0\x61\x5b\x38\x52\x31\x1c\xe7\x83\xb3\xd0\xd8\x8e\x34\x0b\xa4\x9f\x2e\x2d\x98\x0c\xb8\x6e\x4b\x02\x48\x53\xd7\x20\x49\x09\x85\xbe\xac\x84\xd2\x06\xaa\x43\xfa\x4d\x81\x0e\x7a\xc9\x44\xd3\x58\xa2\x6a\x49\xf5\x06\xa4\x41\xa7\x36\xd4\xbc\xf4\xdd\xd8\xa2\xb2\x13\xe0\x72\xbe\x5e\x81\x9b\xec\xb9\x4d\xb3\x5d\xc9\x78\x6e\x8f\x83\xac\x59\x0b\x96\xa7\x77\xb1\x31\xde\x4a\x6d\x0f\xa0\x01\xcc\xdf\xa0\x96\xa0\x80\xe3\x8a\x64\x08\xfd\x15\xa4\x5d\x0e\xcb\xd2\x4e\xb0\xc1\xb2\x8c\x7f\x5f\xc8\x84\xeb\xcc\x99\x47\x9c\xbb\x5a\x0f\x45\x4e\x94\x24\x49\x3f\x32\xee\x9d\x2a\x63\x84\x8d\x82\x1c\x17\xd6\x47\x90\xac\xd8\x19\x6c\xf6\x50\xec\x18\xba\xad\x7d\x38\x41\x0f\xe1\x76\x7b\xbe\x04\xc5\xf2\x86\x96\xf7\x8f\x58\xd5\x30\xba\x50\x18\x31\x0c\x30\x59\x36\xb2\xdd\xb0\x6c\x43\x32\xca\xb9\xd0\x64\x0d\x44\x42\x25\x1e\x21\xef\xd7\x6f\x57\x25\x45\xeb\xdc\x74\x1a\x93\x51\x13\x77\x66\x05\x54\x35\x12\x2a\xe0\x3a\x9d\xe4\xef\x26\x7f\x74\x87\x06\xae\x55\xe0\xd4\x9a\x6a\x0d\x92\x47\xd7\xc4\x24\x49\xff\xba\xbd\xbe\xfc\xf1\xee\x7f\xcf\x83\xb7\x91\xbd\xce\x76\xc1\xae\x09\xf6\x41\x98\xdc\x7f\x8e\xd0\x3e\xa9\x7f\x8c\xc0\x54\xbb\xb3\xcf\xaf\x21\xdc\xf1\xf1\xb9\xdd\xf2\x5d\x7f\x60\x36\x97\x2d\x6a\x1f\xd1\x64\xcd\xdb\x45\x35\xf5\x28\xf7\xfd\xf3\xde\xb7\xe9\xc0\xec\x37\x60\xee\x59\x8f\x61\x74\x6c\x2d\x53\x38\x20\x9a\x82\x59\x8e\x93\x98\x78\xd5\x7f\xd7\x55\xbf\xdb\x0f\x8f\x28\x7f\x4b\x39\x57\xff\xf3\x8b\xb2\xa9\x79\xbf\x4d\xfe\x63\x75\x3f\xb1\x03\xa7\x15\x53\x8a\xf1\x87\x7b\x3c\xa3\xe6\x54\xfd\xc2\x94\xb6\x57\x49\xfd\x4d\x0c\xd5\xae\xbc\xcd\x01\x47\x25\x10\x2c\x72\xe7\x2d\x0f\x44\x9b\xf5\x54\x4a\xba\xf3\xde\xa3\x37\x06\x45\x36\xd0\xfa\x27\xe6\xad\x77\xc6\x74\x63\x9e\x45\x8d\x8a\xbd\x94\x9d\x2e\xaf\x30\x3b\xa4\xd8\xba\x45\xc0\x0d\xf2\x33\x31\x70\xf3\xdb\xb0\x18\xe3\xe3\x91\x73\x69\x7c\xac\x69\xfd\x3d\x9c\x6d\xc6\x65\x83\xc0\xbe\xb7\xbe\x45\x44\xf3\x51\xf5\xba\x3f\xba\xfe\xa6\x6a\xcd\x5e\xaa\x1c\x57\x6d\x86\xf6\x5f\x5a\x6f\xe1\xe5\x51\x57\x71\x39\x53\x19\x95\x39\xe4\xe3\x9a\x9b\x8a\xf2\xfc\xd8\xdd\x09\xf4\x06\x4d\x20\x56\x7b\x2f\x62\x32\x4b\xa2\x29\x72\x66\x74\xdd\xd1\x30\x11\xdb\xf6\x4a\xba\xbb\x83\x46\xac\xed\x4c\x85\x47\x94\x0b\xee\xe1\x0b\x80\x6e\xf5\x17\xba\x6f\xee\x33\x4b\xf9\x60\x71\x8e\xb8\x33\x67\xaa\x2e\xe9\x2e\x58\x26\x9d\x35\x13\xc3\x66\x30\xed\x06\x40\xe6\x07\x5e\xa4\x24\x6e\x3a\x6a\x73\x3d\xae\xf0\x88\x51\x27\x09\x96\xb8\xaa\x16\x3c\x1c\x6b\xa2\x3b\x4a\xb3\xbe\xec\x69\x5d\x0b\xaf\xe8\x47\x5c\x0b\xec\x90\x3d\x61\x78\xd0\xbf\x47\xdd\x7b\xbc\x25\xab\x66\x4d\x3a\x45\x5d\x2a\x4e\x75\xe9\x78\x84\x33\xc1\x71\x75\x91\xb4\xbd\xc6\x69\x38\xd3\x7d\xdb\x9e\x68\xda\x83\x80\x4f\x4c\x49\xb1\x98\x07\xce\x89\x9d\x2d\x7e\xf4\xc3\xa1\x25\x84\x7a\x48\x79\x40\x7d\xb4\xf6\x51\xff\x8f\x37\x78\x0f\x95\xf1\xd7\x21\x30\x48\x64\x3a\x87\x3b\xcf\x47\xf8\x98\x22\xf0\x84\xd9\xaa\x20\x3f\xc6\x2b\xa3\xae\x77\xf8\x68\xd9\x1f\xf8\x17\x9b\x9e\xf4\xe4\xeb\x45\xbf\x64\x26\x7a\xd3\x2b\xe2\x11\x2d\xb1\xad\xb3\x8c\x96\xe5\xce\x6e\x26\x7f\xd8\xc2\x3e\xb6\x3d\x3d\xd2\xb2\x81\x41\xb2\x46\xfb\x92\x25\x9c\xad\x56\x43\xd2\xcd\x3d\x9e\x21\xc3\xea\x74\xa9\x11\xb4\x84\x30\xf8\x13\xf7\x8e\xc3\xc8\x7b\x4a\xa2\x71\x8f\x37\xc2\x13\x62\xb2\x48\xf6\x8b\xfd\xe2\xef\x00\x00\x00\xff\xff\x94\x3f\x47\xf0\xae\x1f\x00\x00")

func layoutSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_layoutSchemaJson,
		"layout.schema.json",
	)
}

func layoutSchemaJson() (*asset, error) {
	bytes, err := layoutSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "layout.schema.json", size: 8110, mode: os.FileMode(0644), modTime: time.Unix(1552923559, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1d, 0x9e, 0x59, 0x28, 0x2a, 0x44, 0x5c, 0xb1, 0xc3, 0xd6, 0x5a, 0xf2, 0xeb, 0x2b, 0x69, 0xed, 0xf5, 0x8a, 0x34, 0x89, 0x50, 0xdc, 0xfe, 0xa, 0x6e, 0xf5, 0x86, 0x6e, 0x23, 0x1e, 0x87, 0xf8}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"actions.schema.json": actionsSchemaJson,

	"layout.schema.json": layoutSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"actions.schema.json": &bintree{actionsSchemaJson, map[string]*bintree{}},
	"layout.schema.json":  &bintree{layoutSchemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
