// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/workflow.schema.json (12.125kB)

package workflow

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _workflowSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x5d\x73\xd3\x38\x17\xbe\xef\xaf\xd0\x84\xce\xf0\xbe\xac\x93\x30\x7b\xb3\xb3\xbd\x83\x34\x40\x77\xb6\x90\x6d\x32\x7c\x4e\x61\x54\xfb\x24\x11\xb5\x25\x23\xc9\xa5\x86\xe9\x7f\xdf\xb1\x63\xcb\x8e\x23\xd9\x52\xeb\x50\x96\x5c\x30\x83\x75\x8e\xce\xf7\xd1\xa3\xa3\x7e\x3f\x40\x08\xa1\xc1\x21\x09\x06\x47\x68\xb0\x96\x32\x16\x47\xe3\x31\xa6\x72\x8d\x47\x3e\x8b\xc6\x5f\x19\xbf\x5c\x86\xec\xab\x18\x0a\x7f\x0d\x11\x1e\x78\x05\x43\xf1\xdf\x82\xe9\x68\x3c\xfe\x2c\x18\x2d\x88\x46\x8c\xaf\xc6\x01\xc7\x4b\x39\x7c\xfc\xc7\x78\xf3\xed\x41\xc9\x19\x80\xf0\x39\x89\x25\x61\x34\xe3\xfe\x6b\xfe\xea\x25\x9a\xe7\x24\x68\xc9\x38\xda\x2c\x5f\x10\xba\x42\x4a\x76\xc9\x2a\xd3\x18\x32\x1e\x76\xf1\x19\x7c\x59\x7e\xe5\xf0\x25\x21\x1c\x32\x03\x3e\xe4\x5f\xf2\xaf\x9b\x2d\x5f\x03\x17\x99\xa0\xfc\xfb\x79\xc1\x80\x83\x80\x64\xe2\x71\x38\xe3\x2c\x06\x2e\x09\x88\xc1\x11\x5a\xe2\x50\x40\x41\x12\xd7\x17\xbe\x57\xbb\xbe\x29\x54\x3a\x09\xb6\xbe\x6f\x69\x27\x24\x27\x74\x55\x68\xa7\x56\x63\x2c\x25\xf0\xdc\xe4\x8f\x1f\xf0\xf0\xdb\x93\xe1\xfb\xc7\xc3\x3f\x3f\xa1\xe1\xf9\xa3\xc3\x81\x22\xbd\xa9\xb8\x06\xa7\x20\xb1\x51\xca\x07\xe5\x04\x34\xa0\x49\x18\x0e\xce\x9b\xf2\xf4\x16\xa8\xf5\x97\x38\x02\xed\x8a\xce\x96\x1d\xa2\x9b\x03\xfd\xff\xea\xfa\x9f\xd0\x2b\xa0\x92\xf1\x74\x7f\x46\xcc\x42\x2c\x61\x91\xc6\x86\x75\x64\x4c\x9a\x1d\xaa\x22\x3c\xb3\x76\x81\x8a\x7c\xf4\xa8\x75\x3d\xa7\x39\xe4\xb0\xcc\x04\x3f\x18\x07\xb0\x24\x34\x4f\x39\x31\x8e\x4b\x95\x77\x9d\x5a\xfe\x6e\xb4\x2b\xbb\x5f\x6d\x82\xb0\x5d\x06\x8e\x39\x0b\x34\x89\xf2\x30\xfd\x3e\x7a\x3c\x38\xd7\xee\x7f\x06\x31\x13\x44\x32\xae\x73\x59\xbb\xef\x2d\x7d\xde\xe6\x6b\x83\x8f\x79\xa9\x54\x7a\xbb\xcc\x9d\x86\x10\x01\x95\xee\x06\x75\x58\x62\x99\xa9\x98\x73\x9c\x9a\x12\x95\x48\x88\x3a\x92\x53\xef\x14\xd8\x18\x65\x4e\x3d\x4d\x82\xed\xea\x30\x38\xa1\x42\x62\xea\xf7\x50\x71\x1b\x67\xa5\x59\x23\xea\x32\xc8\x67\x51\xa6\x7b\xb6\xe9\x62\x4d\x04\x22\x02\xc9\x35\x20\x8a\x23\x40\x6c\x89\x30\x45\x85\x75\x88\x14\xea\x79\x08\x46\xab\x11\x7a\x18\xa5\x9f\x70\x48\xbe\x24\x4c\x3e\x34\x28\x82\xda\xbb\xf3\x6f\x87\x06\x6f\xdd\x77\x23\x29\x2c\x2e\xe3\xd1\x43\x3b\x69\x8b\xf6\x84\x51\x0a\x7e\x2e\xf9\x9e\x13\xb8\x54\xa9\xd2\xc8\x3a\x9d\x0f\x5a\xcc\xb5\x40\x05\x8a\xb4\x8e\x38\xf4\x6d\x71\xc2\xe8\x92\xac\x6e\xd9\x3f\x5a\x4a\xa2\x51\x0a\xb5\x12\x40\x01\x5c\x11\x1f\x90\x1f\x62\x21\x34\xbe\x57\xcd\x5c\x1f\x95\x49\xfa\x94\x30\x53\xc8\x9e\x93\x50\x30\x3a\x23\x31\xc8\x53\x7c\x6d\xa4\x0a\xd9\x05\x0e\x4f\xc9\x35\x70\x13\xc9\x0b\x1c\x91\x50\x32\x6a\x5a\xff\x1b\x5f\xf8\xa9\x04\xd3\x72\x7e\xdc\x9f\x01\x0e\xcc\x12\xfe\x99\x4d\xce\x4c\x6b\xf3\x35\xbe\x04\x7e\x42\xfd\xe4\x02\x4b\x66\xdc\x62\x01\x3e\xd6\xe4\xd4\x79\x6b\xf6\x58\x9e\x65\x1f\x6b\x4e\x3a\xb4\xee\xa0\xfd\x64\xb2\x2e\x9b\xb4\x85\xb6\xc9\xa4\x49\x9e\x48\xad\x82\xba\xeb\x60\x01\x42\x66\xc0\xa2\x0f\x04\x88\xb4\x26\x9c\x92\xeb\x05\x16\x97\x93\x35\xf8\x97\x06\x9a\x4a\x20\xb2\x6b\x4e\xc6\x5d\x5a\x9c\x16\xd5\xf4\xb8\x65\x43\xd2\x03\x38\x12\x25\x21\x96\x6d\xe8\xed\xce\x30\xba\x92\xa1\xb9\xd7\x34\xa5\xe9\xb1\x62\x25\xcb\xea\x9e\xa3\xb1\x54\xed\x50\x03\xab\x3b\x42\xb5\x0c\x73\x89\xb9\xb4\x27\x9f\xd2\xc0\x9e\xf8\x84\x1e\x13\x6e\x4f\xfe\x2a\x91\x4e\xf4\x53\xce\x19\xef\xed\x44\xd5\xc8\xb4\xf2\xb8\x11\xef\xee\xe8\x61\x05\xe9\x3a\x41\x4f\x3b\x0e\x76\x13\x5a\x09\x77\x02\x5e\x8a\xcd\x02\x80\x29\x5a\x7d\xe5\x8b\x4d\xf5\x40\x30\xed\x42\xd8\xf5\x9f\x1e\x95\x75\xaf\x1a\x70\x27\xb2\xc3\xe6\x8a\xd4\xd1\xb7\xd6\x58\x5d\xb1\xd4\x81\xca\xb4\x01\xce\x11\x09\x74\x10\x65\x57\xac\xb6\x97\x18\x21\x79\xf9\x6b\x71\x11\xfa\xa9\x32\xa5\x1b\xbb\x2b\x93\x6e\x9b\x2d\x4e\x77\x97\x36\x08\xfc\x63\xd0\xf4\xf6\x51\xe4\xa9\xb3\xa0\x86\x2e\x0e\x6a\xe2\x06\x35\xef\x6e\x0f\xea\x6a\x23\x80\x9e\x2f\xf1\xc7\x84\x83\xaf\xdd\x78\x47\x80\x71\x7a\xa6\xe9\xc1\x4f\x39\xa6\xfe\xba\xdf\x3d\x27\x2c\x8a\x88\xec\x6d\xca\xd7\x53\x88\x2b\x07\xea\x31\x63\x7d\x50\xd1\x73\xec\xd4\xb4\x2a\xbd\xe3\xf8\xd3\x7c\x88\xce\xb0\xbc\x4b\x14\xf7\xe2\xf1\x86\xd9\xde\xb6\xb2\xad\x51\x50\x2d\x6a\x0f\xa3\xb0\xfe\x63\xa0\x1d\x99\x37\x77\xec\x82\xcb\xb6\x36\x28\xba\x6b\xfb\xe3\x96\x26\xd1\x05\xf0\x96\x59\x4d\xcb\xe9\x6e\x6e\x38\xee\x62\xfa\x38\x16\x24\x4f\xc0\xc0\xa1\xbf\x18\xb6\xc8\x19\xcc\x30\xc7\x11\x48\xb0\x01\xc3\xbd\xde\x8a\x3b\x8b\x47\x65\xaa\x55\x9d\xd4\xa6\x52\x3d\x57\xcc\x9c\x25\x5c\x53\x87\x6a\x5d\x0f\x39\x7c\xa5\xcf\x02\x78\x44\x28\x0e\xed\x2a\x69\x81\xf9\x0a\x5a\x8e\x8e\x3b\x48\xdb\x0f\x6e\xd8\x78\xc7\x53\x9a\xeb\xa3\xa5\x51\xb0\xe7\x30\x35\xa1\x5d\xaf\xfd\x4d\x55\x49\xaf\xaf\x77\x3d\x85\xa0\x69\xb9\xd7\xd4\x57\x1f\x92\xfa\xb4\xa9\x6f\xa8\x96\x6f\xfd\x53\xbd\x54\x94\x63\xda\xe6\x3b\xc5\x31\xe3\x44\xd8\x3f\x51\x0c\xab\xc9\xca\xff\xfe\x8f\x7e\x8a\x47\x8a\xc6\x60\xba\x8a\x4d\x9b\xdd\x27\x34\x4e\x64\xf5\x8a\x3b\x42\x93\x84\x73\xa0\x32\x4c\x3d\x84\x69\x8a\x2e\x21\x1d\x5f\xe1\x30\x01\x81\x30\x07\x74\x85\x43\x12\xa0\x35\x70\xd3\x88\x58\xa9\xd3\x75\x56\x28\x0f\xe9\xfd\xf6\x63\x4a\x46\x5f\x10\x5b\x93\xc4\x9e\x2b\x22\x2b\x4e\x9e\xd8\xbe\xe3\x18\x0f\x5a\xfd\xe4\x2b\x4e\x64\xe7\x04\xd6\x71\xd7\x05\x89\x60\x2a\x24\x89\xb0\xb4\xe8\x77\x26\xd8\x63\x33\x67\xad\xde\xe5\x7b\x76\x79\xd9\xaa\xed\x06\x82\xa7\x98\x26\x4b\xec\xcb\x84\x83\xc3\x18\xf1\x0d\x84\xe1\x7c\x8d\x63\x07\x41\x19\xcb\x8b\x6d\xf2\xc2\x7d\x46\xf2\x37\x6e\xe4\xc7\xf6\xe4\xa7\xf8\xfa\x35\x0b\x1d\xe8\x09\x75\xa2\x7f\xca\xa4\x64\x51\x19\x5d\x17\x1e\x47\x17\xbd\x75\x23\x7f\xe7\x46\xfe\xde\x9e\x7c\xc2\xc2\x39\xf9\xe6\x60\xee\x19\xfb\xea\xc6\xf0\x02\xc8\x6a\x2d\x1d\xdd\xf3\x6a\xb9\x14\xe0\xc8\xf4\xee\x36\x4c\x6f\x35\x8f\x02\x9d\x82\x6e\xc1\xf3\xde\x91\x67\x7a\x2d\x39\xde\x26\x2f\xda\x8a\x55\x97\xd2\xce\x9a\xf7\x3e\x24\xb1\x7c\xcb\xd8\x1e\x80\xd8\x31\x3d\x67\x73\xee\xbb\xb1\x3c\xa1\x72\x8d\x9d\xb9\x72\xa4\x21\x9e\x11\x08\x83\xfb\xfb\x83\xb1\xa6\xa6\x77\xf9\xd3\x8c\xe2\xc0\xfd\x85\x2c\xaa\x66\x00\xbf\x90\x51\xc7\x58\xe2\xff\xaa\x39\x7b\xb9\x26\xb6\x0f\x23\xbd\x7a\x4b\xf0\x1a\xc5\xee\x69\xca\xd8\xd3\x55\x82\x67\x48\x26\x6f\x27\x1e\x7a\x08\x6e\x7c\xa8\xb9\x57\x6c\x58\x9f\x99\xda\x71\xcc\x70\x76\x99\xda\xd7\xa3\xbe\xf5\x8b\x7e\xfe\xca\xed\xf4\x9e\x2f\xc1\xad\xbb\x3f\x23\x21\x08\xab\x63\xb5\xa7\x2c\x2e\x73\x57\x37\x1d\x3c\xd8\xfc\x7b\x73\xf0\x6f\x00\x00\x00\xff\xff\xea\xeb\x4d\xda\x5d\x2f\x00\x00")

func workflowSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_workflowSchemaJson,
		"workflow.schema.json",
	)
}

func workflowSchemaJson() (*asset, error) {
	bytes, err := workflowSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "workflow.schema.json", size: 12125, mode: os.FileMode(0640), modTime: time.Unix(1559925779, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7a, 0xa4, 0xa2, 0xc1, 0xc, 0x5a, 0x9a, 0x59, 0xe9, 0x3, 0x56, 0xce, 0x62, 0xc7, 0x5, 0xf2, 0x31, 0xf0, 0xa1, 0x51, 0xaa, 0x95, 0x34, 0x46, 0xd9, 0xed, 0x52, 0xed, 0x7b, 0xa2, 0x36, 0x48}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"workflow.schema.json": workflowSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"workflow.schema.json": &bintree{workflowSchemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
