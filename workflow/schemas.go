// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/workflow.schema.json (8.567kB)

package workflow

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _workflowSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x19\xdd\x53\xdb\xb8\xf3\x9d\xbf\x42\x93\x32\xd3\x8f\x5f\x3e\x3a\xbf\x97\x9b\xe3\xed\x08\xcc\xc1\xcd\x51\x72\x24\x53\x5a\x18\xda\xd9\x38\xeb\x58\x45\x96\x5c\x49\x86\xb8\xbd\xfc\xef\x37\x36\xb6\x63\x27\x92\x63\x07\xa7\x2d\x4f\xb1\x76\x57\xfb\xbd\xda\x5d\xbe\x1f\x10\x42\x48\xe7\x90\xce\x3a\x47\xa4\xe3\x69\x1d\xa8\xa3\xc1\x00\xb8\xf6\xa0\xef\x08\x7f\xf0\x28\xe4\xbd\xcb\xc4\xa3\xea\x29\xc7\x43\x1f\x3a\xdd\x94\x20\xfd\x4c\x89\x8e\x06\x83\x2f\x4a\xf0\x14\xa9\x2f\xe4\x7c\x30\x93\xe0\xea\xde\xdb\xdf\x06\x4f\x67\x2f\x32\xca\x19\x2a\x47\xd2\x40\x53\xc1\x63\xea\xbf\xc6\x97\xef\xc8\x38\x41\x21\xae\x90\xe4\x09\x3c\xa5\x7c\x4e\x72\xde\x19\xa9\x8e\x02\x8c\x69\xc4\xf4\x0b\x3a\x3a\x3b\x95\xf8\x35\xa4\x12\x63\x05\x6e\x93\x93\xe4\xf4\xe9\xca\xf7\x28\x55\xcc\x28\x39\xbf\x4b\x09\x60\x36\xa3\x31\x7b\x60\x23\x29\x02\x94\x9a\xa2\xea\x1c\x11\x17\x98\xc2\x14\x25\x28\x02\xbe\xaf\x6e\xbd\x4e\x45\x3a\x9f\x95\xce\x4b\xd2\x29\x2d\x29\x9f\xa7\xd2\xe5\xd0\x00\xb4\x46\x99\xa8\xfc\xe9\x16\x7a\xdf\xfe\xe8\xdd\xbc\xed\xfd\xfe\x99\xf4\xee\xde\x1c\x76\x72\xd4\x65\xb7\xa0\x01\xf5\x43\x06\xb1\xa0\x3f\x82\xdb\x05\x6a\xb0\x72\xb9\xcd\x4d\x4e\x3a\x3c\x64\xac\x73\xb7\xce\xcf\x6c\xaf\x1c\xfe\x0e\x7c\x34\x42\x4c\xba\x6c\x20\x2d\x0f\xcc\x5f\x45\xf9\xcf\xf9\x03\x72\x2d\x64\xb4\x3f\x25\x46\x0c\x34\x4e\xa2\xc0\x02\x27\xd6\x10\xdd\xc0\x4a\xdd\x33\xaa\x66\x98\xa3\xf7\xdf\x54\xc2\x13\x9c\x43\x89\x6e\xcc\xf8\xc5\x60\x86\x2e\xe5\x49\x80\xab\x41\x90\x89\xbc\x69\xd4\xec\x6f\x69\x84\x6c\x9e\xd6\x71\x42\x39\xe9\x1a\xc6\x2c\xf2\xd0\x4f\xdc\xf4\xff\xfe\xdb\xce\x9d\xf1\xfe\x2b\x0c\x84\xa2\x5a\x48\x93\xc9\xaa\x6d\x9f\x79\x37\x8a\x43\xd1\xe2\xe0\x62\xd6\xbc\x92\x31\xaf\x7e\x5e\x09\xff\x9d\x53\xed\x85\xd3\xf8\xe7\xeb\x41\xd9\x9a\x4b\x73\xf2\x6d\xf1\x6e\x95\x57\x2d\xde\x94\x99\xfa\xd1\x6e\x39\x72\xca\xd0\x47\xae\x77\x35\x9d\x55\x93\x9a\x39\x01\x52\x42\x64\x4b\x09\xaa\xd1\xdf\x92\x06\x66\xa3\xe0\x93\x52\xf6\x20\x37\x84\xf2\xa6\x0c\x9d\x73\xae\x34\x70\xa7\x85\xdc\xde\x1a\x67\x2b\x85\x1c\xe1\xc7\xb2\xc7\x97\x4e\x3c\xaa\x08\x55\x44\x7b\x48\x38\xf8\x48\x84\x4b\x80\x93\x54\x3b\x42\x53\xf1\xba\x04\xfb\xf3\x3e\x79\xe9\x47\x9f\x81\xd1\xaf\xa1\xd0\x2f\x2d\x82\x90\xea\x77\xe0\x7f\x87\x16\x6b\xfd\xec\x92\x95\x6a\x9c\xf9\xa3\x85\xc2\x55\xe5\xed\xa1\xe0\x1c\x9d\x84\xf3\x4f\x0e\xe0\x4c\xa4\x95\x44\xb5\xc3\xb9\xb2\x1a\x6d\xef\x76\x72\xd4\x62\x27\x65\x2e\xc0\x43\xc1\x5d\x3a\xdf\x43\xe9\x2d\xa7\x42\x21\x05\xc8\x0c\x1f\xa8\x83\xc4\x61\xa0\x94\xc1\xf6\xf9\xb3\x61\xf6\xca\x30\x3a\xa6\xc2\xe6\xb2\x3f\x29\x53\x82\x8f\x68\x80\xfa\x02\x16\x56\x2c\x26\xa6\xc0\x2e\xe8\x02\xa5\x0d\xe5\x0c\x7c\xca\xb4\xe0\x36\xf8\xdf\x30\x75\x22\x8d\x36\x70\xd2\x58\x5c\x21\xcc\xec\x1c\xfe\x19\x0d\xaf\x6c\xb0\xb1\x07\xf7\x28\xcf\xb9\x13\x4e\x41\x0b\xeb\x15\x13\x74\xc0\x10\x53\x77\x6d\xbc\x65\x9f\x0a\x46\x3a\xac\x5d\x41\xdb\x89\x64\x53\x34\x19\x13\xed\x29\x92\x86\x49\x20\x55\x32\xda\x9e\x07\x13\x54\x3a\x6e\x61\xda\xe8\x35\x89\x51\x85\x0b\xba\x98\x80\xba\x1f\x7a\xe8\xdc\x5b\x70\x56\x0c\x49\xbd\xe2\x64\xbd\xa5\xc2\x68\x7e\x41\x8e\x1d\x0b\xd2\x41\xf9\xd7\x32\x1f\x04\x73\x2e\xe5\x21\xab\xd0\xe6\xb4\xdc\xa8\x9c\x50\x89\x8e\xf1\xe2\x0d\x06\xd6\x59\xc4\x50\x82\x8e\x25\x70\xc7\x6b\xf7\xce\xa1\xf0\x7d\xaa\x5b\x9b\x99\xda\x79\x14\x0a\x06\x34\xe7\x45\xb1\x19\x6b\xd9\x77\x79\xef\x1f\x3d\x73\x98\x34\x18\x3b\x6d\x8c\x47\xa0\x9f\xe3\xc5\xbd\x58\x7c\x4d\xed\x6e\x59\xd8\x4a\x2f\xe4\x2d\x54\xcb\x9e\x38\x5d\x39\xb9\x7d\x57\x18\xf7\x10\xeb\x37\x6e\x2b\xaf\x75\x55\xc9\xf1\x16\xdb\xbb\xd5\x4c\x19\x1e\xfa\x53\x94\x15\x6d\x69\x45\x3b\x6e\xaf\x3b\xcd\xd9\x34\xea\xde\x2d\xd1\xa7\x65\x88\x16\x0a\xf3\x1b\x58\xc1\xa7\x33\x02\x09\x3e\x6a\x94\xf5\x47\xa8\x1f\x94\x43\xeb\x01\x5b\x2b\x6b\x0a\x7d\x78\xcb\xf9\x33\x16\xa1\x34\x64\x65\x0e\x37\x3f\xc4\x4e\x2e\xcf\x04\xa5\x4f\x39\xb0\x7a\x09\x35\x01\x39\xc7\x8a\x87\xe4\x19\xdc\xf6\xe2\xac\xd4\x3a\xdd\x5c\x72\xb3\xb7\x0c\x02\xee\xa7\xcc\x59\xab\xe8\x06\x9b\x26\x65\x2e\x4f\x96\x56\x37\xa3\xed\xe6\x4b\xae\x79\x77\x5d\x5e\xb3\x4b\x8a\xfd\x75\xdb\x8d\x5b\x72\xf5\x2f\xb5\x9b\xc9\x06\xd3\xf5\xcd\xcc\x89\x90\x54\xd5\x5f\xca\xf4\x56\x5b\x99\x57\xaf\xc9\x2f\xb1\x96\x59\x1b\xc5\x57\xbe\xa9\xd2\xfb\x9c\x07\xa1\x5e\x6d\xc8\xfb\x64\x18\x4a\x89\x5c\xb3\xa8\x4b\x80\x47\xe4\x1e\xa3\xc1\x03\xb0\x10\x15\x01\x89\xe4\x01\x18\x9d\x11\x0f\xa5\x6d\x28\xce\xc5\xd9\xf6\x64\xe4\x16\xda\x6d\x38\xd9\xe7\xb6\xa4\x34\x3b\xb5\x9c\x11\x71\x72\xca\xb0\xee\xe6\xca\xfa\xde\x1a\x4a\xd3\x65\xa8\x83\x50\x6f\x9d\x39\x1b\xde\x3a\xa1\x3e\x9e\x2a\x4d\x7d\xd0\x35\xea\x9d\xad\xfb\xa9\xb3\xe5\x5e\xfd\xcf\xa3\x65\x93\x67\xa5\x7a\xa3\x2c\x9b\x1b\x59\xe0\xa1\x0b\x8e\x0e\x25\xca\xfa\x54\xd7\xc8\xd8\xd8\x83\xa0\x01\xa3\x98\xe4\xac\x8c\x9e\x9a\xcf\x8a\x7e\xdd\x0c\xfd\xa4\x3e\xfa\x05\x2c\xde\x0b\xd6\x00\x9f\xf2\x46\xf8\xc7\x42\x6b\xe1\x67\xde\x6d\x42\xd3\xd0\x44\x1f\x9a\xa1\x7f\x6c\x86\x7e\x53\x1f\x7d\x28\xd8\x98\x7e\x6b\xa0\xee\x95\x78\x6c\x46\x70\x86\x74\xee\xe9\x86\xe6\xb9\x74\x5d\x85\x0d\x89\x3e\xee\x42\xf4\x61\xac\x41\x36\x65\xb4\x03\xcd\x4d\x43\x9a\xd3\x85\x96\x50\x46\x4f\xcb\xca\xb6\xfd\xd7\xc1\xf2\xe0\xbf\x00\x00\x00\xff\xff\x84\xf4\x64\x6b\x77\x21\x00\x00")

func workflowSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_workflowSchemaJson,
		"workflow.schema.json",
	)
}

func workflowSchemaJson() (*asset, error) {
	bytes, err := workflowSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "workflow.schema.json", size: 8567, mode: os.FileMode(0640), modTime: time.Unix(1557333790, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x34, 0x3, 0xa4, 0xf7, 0x27, 0xde, 0x69, 0xbb, 0x76, 0x63, 0x90, 0x48, 0xb1, 0xc4, 0x12, 0x23, 0x4d, 0x19, 0x60, 0x69, 0xa6, 0x8d, 0x8c, 0x47, 0xde, 0xd, 0x71, 0x6b, 0xf8, 0x24, 0x9e, 0xe9}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"workflow.schema.json": workflowSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"workflow.schema.json": &bintree{workflowSchemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
