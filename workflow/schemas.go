// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/workflow.schema.json (6.827kB)

package workflow

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _workflowSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\x38\xa8\x01\xb2\x75\xb6\x54\xec\x65\x58\xde\x36\x27\xe8\x32\x20\x8d\xb1\x18\x1b\xb0\x22\x2d\x68\xe9\x6c\xb1\x11\x49\x95\xa4\x92\x68\x5d\xbe\xfb\x40\x59\xa6\x24\x9b\x92\x65\x47\x6e\xf7\x26\x91\xf7\xff\xee\x77\x3c\xf2\xcb\x09\x00\x80\x77\x4a\x23\xef\x1c\xbc\x58\xeb\x54\x9d\x07\x01\xe1\x3a\x26\x7e\x28\x58\xf0\x28\xe4\xfd\x22\x11\x8f\x6a\xac\xc2\x18\x19\xf1\x46\x25\x43\xf9\x5b\x32\x9d\x07\xc1\x27\x25\x78\x49\xe4\x0b\xb9\x0c\x22\x49\x16\x7a\xfc\xe6\xa7\x60\xb5\xf6\x6a\xcd\x19\xa1\x0a\x25\x4d\x35\x15\xdc\x70\xff\x7e\x7b\xf3\x0e\x6e\x0b\x12\x58\x08\x09\xab\xed\x39\xe5\x4b\xb0\xba\xd7\xac\x3a\x4f\xd1\xf0\x88\xf9\x27\x0c\xf5\x7a\x55\xe2\xe7\x8c\x4a\x34\x0e\xbc\x2f\x56\x8a\xd5\x95\xc8\x3f\x51\x2a\xa3\xa8\x58\xbf\x2b\x19\x48\x14\x51\xa3\x9e\x24\x53\x29\x52\x94\x9a\xa2\xf2\xce\x61\x41\x12\x85\x25\x49\x5a\xdf\xf8\x52\x49\xfd\xab\x34\xe9\x2a\x6a\xac\x37\xac\x53\x5a\x52\xbe\x2c\xad\xb3\xbb\x29\xd1\x1a\x65\xe1\xf2\x87\xf7\x64\xfc\xcf\x2f\xe3\xbf\xdf\x8c\x7f\xfe\x08\xe3\xbb\xd7\xa7\x9e\x25\x7d\xae\xb8\xbc\x6b\xd4\xa4\x5d\x0b\xcf\x92\x64\x53\xc7\x69\x28\x18\x43\xae\xcd\xfe\xec\xe6\xe2\xe6\x1c\x28\x4b\x13\x34\x4b\x50\x66\x06\x7e\x23\x0f\xc8\xcf\x34\x28\x44\x0e\x82\x23\x88\x05\xe8\x18\x15\x02\xe5\xe6\x03\x1e\x69\x12\x41\x8e\xda\x6d\xd4\x15\x7f\x40\xae\x85\xcc\xdb\x2d\x6b\x64\xe7\x6b\xda\xd6\x4c\xf9\x9e\xf9\x41\x9e\x31\x53\x41\xde\x8f\xfe\x1b\xef\xce\x29\xff\x0f\x4c\x85\xa2\x5a\xc8\xcd\xb2\xe8\xe1\x7e\x59\x50\xf9\x3b\xc2\x1c\xcc\x5b\x15\xf2\x9d\x34\xba\x7c\x8b\xc3\x7f\x97\x54\xc7\xd9\xdc\x7c\x7e\x1f\x78\x0d\xde\x67\x77\xa1\x4d\xdd\x15\x6c\xc9\xfc\xd7\xce\xf5\x55\xae\x24\x2e\x8c\x19\xaf\x82\x08\x17\x94\x17\x60\x51\x81\x5c\xbb\x9f\x7b\x5b\x6c\xcf\x27\xee\xbf\x7a\xf8\x2e\x57\xd9\x3e\x34\x74\xad\x9e\xcc\xf2\xb4\x65\xab\x21\x9c\x48\x49\xf2\x0d\xd9\x96\x88\x6a\x64\xed\x32\x3a\x82\x82\x2b\xa7\x8c\x0d\xdb\x51\xd9\x8e\x0c\x6c\x27\x0c\x56\xb0\x52\x9a\xf0\xb0\x8f\x1f\xce\x20\x59\xaa\xdd\x75\x56\x39\xb4\x85\xc8\x50\xf0\x05\x95\x0c\x74\x4c\x15\x48\x5c\xe2\x93\x0f\x33\xf3\x4d\x55\x01\x3f\x4e\x58\x81\x49\xc2\xa1\xf4\x1b\x68\x69\xf8\x08\xd0\x5f\xfa\x70\xc6\xf2\x8f\x24\xa1\x9f\x33\xa1\xcf\x5a\x4c\x84\xee\x6e\xf8\xc3\x69\x4b\x1c\xdb\x1c\xee\x55\xee\x96\xbc\xa3\xec\xab\xc0\x74\x65\x7a\x9d\x29\xb7\x95\xe0\xcc\xb8\x7b\xb5\xb3\x0e\x26\x82\x73\x0c\x0b\xcd\xdf\xb8\xb4\xd7\x26\x55\x16\xf5\x2e\xf4\xce\x3e\xb5\xfb\x14\xb6\xa4\xf5\x13\xde\xdd\x9a\x27\xa6\x72\x97\x47\x68\xca\x0e\x90\xc4\x18\xde\xef\x86\x08\x44\xf8\x40\x43\x84\x30\x21\x4a\xad\xd1\xf1\x96\x26\x4a\xf0\x29\x4d\x51\x5f\x93\xa7\x33\x1f\xae\x34\x30\x92\xc3\x1c\x0b\xe6\x90\x28\xf3\x41\x74\x81\x30\x9e\x31\x23\x35\x95\xb8\x40\x49\xe6\x09\xfa\x8e\x14\xb7\x21\x69\x1b\x48\x07\x9e\x13\x1f\xde\x26\x62\x4e\x92\x6b\xfa\x84\xf2\xb4\x77\x77\x1a\xa6\x16\x5c\xf9\x70\x96\xea\x2a\xd6\x13\x13\xea\x6e\xa7\x77\x57\xd2\x0c\x95\x36\xe3\xc1\x81\xa5\x64\x0c\x07\xa7\xe5\xd7\xf4\x69\x46\xd4\xfd\xc4\x94\x4f\x0b\x4d\xa5\x07\xfa\xa1\xba\x55\x4a\x47\xac\x58\xcd\x8e\x03\x91\x7c\xd2\xfc\x7a\xb6\x93\xbd\xd5\xd2\x9c\x9a\x6b\x93\xc3\xc0\x67\xff\x05\x95\x18\x3a\x05\x6f\x29\x28\xc7\xbe\x5e\x6d\xf8\x57\x49\x78\x18\x0f\x2b\x73\x22\x18\xa3\xfa\x05\x32\x8f\xd1\x4d\x6b\x01\x74\xc3\xa1\x3e\xdf\x0c\x9c\x3b\x3b\x4e\x17\xfd\x77\xd8\x60\x97\xb3\xe6\x94\xe8\x97\x64\xf1\x28\x11\xdf\x70\x7b\xd4\x34\xb6\x33\x0b\x76\xf6\x18\x38\x13\x97\x55\x92\x87\x4f\x85\xf3\x1a\xdb\xcf\xf0\xbe\x0e\x58\xba\xa7\xdd\xc3\x5d\x75\x7f\x66\x73\x94\x1d\x53\x5c\xc7\xf4\xda\xde\x6d\xf6\x57\xb3\xd7\xb0\xdb\x52\x73\x5a\x66\xd8\xc2\xe1\x3e\xf0\x3a\xf4\x78\x53\x22\x09\x43\x8d\xb2\xff\x5d\xe4\x2b\x21\x67\xb3\x4c\x7b\x61\xa5\x36\xb6\x0e\x8c\x9a\x5b\x91\x49\x07\x16\xed\xbe\xfb\xf8\x0d\xad\x3d\x33\x94\x8c\x72\x92\xf4\x83\xd1\x8c\xc8\x25\x76\x1c\x1f\x2f\xd0\x76\x94\x64\x95\xd1\x19\x59\xcb\xdd\xd9\x72\x18\x78\x9c\xe6\xd6\xda\x3b\xb7\xd4\xec\xd3\xdc\x2c\x58\x5e\xd8\x37\x8f\x89\x17\xeb\xf9\x68\xd3\x5e\x77\x4a\xea\xc3\xf4\xd0\xe3\x5a\x21\xfa\x1b\x3f\x72\xec\x77\x7f\xdb\x7c\xe0\xb8\x10\x92\xaa\x43\xde\x36\xfe\x1f\x4f\x1b\xf5\x70\xc4\x08\x55\xc2\xba\x9c\xbe\xe2\x69\xa6\xa7\x09\xd1\x58\xbc\xb5\xf9\x30\xc9\xa4\x44\xae\x93\x7c\x04\x84\xe7\x70\x8f\x79\xf0\x40\x92\x0c\x15\x10\x89\xf0\x40\x12\x1a\x41\x8c\x12\x3b\xc2\x04\x7d\xce\x11\x1b\xa1\xc3\xee\x29\xc7\x7c\x71\x68\x5c\xa3\x06\x86\x89\x41\xac\xcc\xaa\xd7\x1f\xe8\x06\xcb\xea\xa2\xd8\xab\x5f\xdd\x64\x3a\xcd\xf4\xce\xeb\xe7\x7e\x42\x67\x94\xe1\xa5\xd2\x94\x11\xdd\xa3\x07\xb6\x09\xee\xbe\x62\x9e\x3c\x9f\xfc\x17\x00\x00\xff\xff\x44\xc7\xca\x51\xab\x1a\x00\x00")

func workflowSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_workflowSchemaJson,
		"workflow.schema.json",
	)
}

func workflowSchemaJson() (*asset, error) {
	bytes, err := workflowSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "workflow.schema.json", size: 6827, mode: os.FileMode(0644), modTime: time.Unix(1554892249, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x88, 0x80, 0x2c, 0xf1, 0x91, 0x7d, 0x60, 0x32, 0x34, 0x47, 0xe7, 0x72, 0x72, 0x9d, 0x6b, 0xaa, 0x48, 0x87, 0x22, 0xa9, 0x11, 0x6b, 0x17, 0x14, 0x13, 0x9c, 0x96, 0xeb, 0x68, 0xa1, 0x75, 0x5f}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"workflow.schema.json": workflowSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"workflow.schema.json": &bintree{workflowSchemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
