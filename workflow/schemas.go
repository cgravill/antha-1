// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/workflow.schema.json (6.283kB)

package workflow

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _workflowSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\x38\xa8\x01\xb2\x75\xb6\x94\xed\x65\x58\xde\xb6\xa4\xe8\x3c\x20\x8d\xb1\x18\x1b\xb0\x22\x2d\x68\xe9\x6c\xb1\x11\x49\xf5\x48\x39\xd1\xba\x7c\xf7\x41\xb2\x4c\x4b\x36\xa5\xc8\xb1\xdd\xed\x4d\x22\xef\xff\xdd\xef\x78\xf7\xe5\x04\x00\xc0\x3b\xe5\x91\x77\x01\x5e\x6c\x4c\xaa\x2f\x82\x80\x49\x13\x33\x3f\x54\x22\x78\x50\x74\x3f\x4b\xd4\x83\x1e\xea\x30\x46\xc1\xbc\x41\xc5\x50\xfd\x56\x4c\x17\x41\xf0\x49\x2b\x59\x11\xf9\x8a\xe6\x41\x44\x6c\x66\x86\xe7\x3f\x06\xcb\xb3\x57\x2b\xce\x08\x75\x48\x3c\x35\x5c\xc9\x82\xfb\xb7\xdb\x9b\x77\x70\x5b\x92\xc0\x4c\x11\x2c\xaf\xa7\x5c\xce\xc1\xea\x5e\xb1\x9a\x3c\xc5\x82\x47\x4d\x3f\x61\x68\x56\xa7\x84\x9f\x33\x4e\x58\x38\xf0\xbe\x3c\x29\x4f\x97\x22\xff\x40\xd2\x85\xa2\xf2\xfc\xae\x62\x60\x51\xc4\x0b\xf5\x2c\x19\x93\x4a\x91\x0c\x47\xed\x5d\xc0\x8c\x25\x1a\x2b\x92\xb4\x7e\xf1\x65\x2d\xf5\xcf\xca\xa4\x51\xd4\x38\x6f\x58\xa7\x0d\x71\x39\xaf\xac\xb3\xb7\x29\x33\x06\xa9\x74\xf9\xc3\x7b\x36\xfc\xfb\xe7\xe1\x5f\xe7\xc3\x9f\x3e\xc2\xf0\xee\xf5\xa9\x67\x49\x9f\xd6\x5c\xde\x35\x1a\xd6\xae\x45\x66\x49\xb2\xa9\xe3\x34\x54\x42\xa0\x34\xc5\xfd\xe4\xe6\xea\xe6\x02\xb8\x48\x13\x2c\x8e\xa0\xca\x0c\xfc\xca\x16\x28\xcf\x0c\x68\x44\x09\x4a\x22\xa8\x19\x98\x18\x35\x02\x97\xc5\x07\x3c\xf0\x24\x82\x1c\x8d\xdb\xa8\x91\x5c\xa0\x34\x8a\xf2\x76\xcb\x1a\xd9\xf9\x9a\xb6\x35\x53\xbe\x63\x7e\x50\x66\xa2\xa8\x20\xef\x07\xff\xdc\xbb\x73\xca\xff\x1d\x53\xa5\xb9\x51\xb4\x59\x16\x3d\xdc\x17\x5c\x36\x8a\xed\xfb\xcd\xf2\x58\x5e\xe6\xef\x98\x70\x08\x87\xcd\x0a\xfa\x86\x0a\x5b\x7c\x8b\xd3\x7f\xe6\xdc\xc4\xd9\xb4\xf8\xfc\x36\xf0\x1a\xbc\x4f\xee\x42\x1c\xbb\x2b\xdc\x92\xf9\xaf\x9d\xe7\xcb\x5c\x12\xce\x0a\x33\x5e\x05\x11\xce\xb8\x2c\xc1\xa4\x03\x5a\x85\x27\xf7\xb6\xd8\x9e\x4e\xdc\x7f\xf5\xf0\xbe\x59\x56\xc3\xce\xa1\x6d\xc1\xaa\xbd\x9f\xe4\x69\xcb\x55\x43\x38\x23\x62\xf9\x86\x6c\x4b\x24\xb8\x1c\x19\x14\x8e\xcc\x59\x12\x5e\xdd\xbb\xd5\x40\x7b\xdc\x70\xe9\x77\x61\xe6\x76\xe0\x60\x2b\x78\xb0\x9d\x53\x58\x22\x53\x1b\x26\xc3\x3e\xae\x3a\xe3\x58\xf7\xb5\xab\x54\x2d\xdd\xf3\x25\xbb\x76\x7c\x0b\xfc\xa1\x92\x33\x4e\x02\x4c\xcc\x35\x10\xce\xf1\xd1\x87\x49\xf1\xcd\x75\x89\x74\xc9\x44\x09\x7f\x26\xa1\x8a\x0f\xf0\xca\xc1\x01\xa0\x3f\xf7\xe1\x4c\xe4\x1f\x59\xc2\x3f\x67\xca\x9c\xb5\xb8\x02\xdd\x8d\xf7\xbb\xd3\x96\x78\xb7\x39\xdc\x0b\x39\x96\xbc\x03\x41\xeb\xc0\x74\x55\xc4\x2a\xa3\x6e\x2b\xc1\x59\x19\xee\xd3\xce\x7a\xb9\x54\x52\x62\x58\x6a\xde\x13\x25\xfb\x42\x60\x65\xd2\xda\xa2\xde\x80\xe8\x6c\x79\xcf\x3f\xf8\x96\xb4\x3e\x4c\x54\x9d\x63\x50\xc7\x96\xfb\x65\xb8\x2c\xaa\x79\xfe\xc2\xc6\xd5\xd5\xf3\x1d\xc0\x89\x31\xbc\x7f\x1e\x36\x10\xe1\x82\x87\x08\x61\xc2\xb4\x5e\x21\xe6\x2d\x4f\xb4\x92\x63\x9e\xa2\xb9\x66\x8f\x67\x3e\x8c\x0c\x08\x96\xc3\x14\x4b\xe6\x90\xe9\xe2\x83\x99\x12\x75\x32\x13\x85\xd4\x94\x70\x86\xc4\xa6\x09\xfa\x8e\xb4\xb7\xa1\x6b\x1b\x5c\x2f\x7c\x86\x3e\xbc\x4d\xd4\x94\x25\xd7\xfc\x11\xe9\xb4\x77\x67\x3b\x4c\x7d\xb8\xf2\xe1\x2c\xdf\x65\xac\x2f\x8b\x50\x77\x3b\x5d\xaf\xae\x5a\x25\x9d\xd4\x68\xbd\x9a\xe0\xe6\xec\x59\x7b\x5f\x0f\xfc\x42\x5e\x71\xc2\xd0\x29\x78\x4b\x41\x35\x3c\xf5\xea\x30\xbf\x10\x93\x61\x7c\x58\x99\x97\x4a\x08\x6e\xf6\x90\x79\x94\x46\xb1\x0e\xa0\xbb\x3f\xd4\x9f\xf8\x03\xe7\xce\x0e\xa5\x65\x1b\x39\x6c\xb0\xab\x89\x6c\xcc\xcc\x3e\x59\x3c\x4a\xc4\x37\xdc\x1e\x34\x8d\xed\xcc\x82\x7d\x56\x0f\x9c\x89\x37\xeb\x24\x1f\x3e\x15\xce\x65\xb0\x9f\xe1\x7d\x1d\xb0\x74\x8f\xcf\xcf\x2d\xeb\x2d\x54\x4c\x91\x3a\x06\x94\x8e\xc1\xac\xbd\xdb\xec\xae\x66\xa7\x39\xae\xa5\xe6\x0c\x65\xd8\xc2\xe1\xee\xdb\x1d\x7a\xbc\x31\x23\x26\xd0\x20\xf5\x1f\xc7\xbf\x12\x72\x36\xcb\x74\xd0\x30\xb6\x17\x72\x6a\xf3\xd9\x81\x31\x74\xab\x32\x72\x20\xd3\xde\xbb\xdf\xdf\xd0\xda\x33\x41\x12\x5c\xb2\xa4\x1f\xa8\x26\x8c\xe6\xd8\xf1\x98\xec\xa1\xed\x28\xa9\xab\xa2\x33\xb0\x96\xbb\xb3\xe5\x30\xf0\x38\xad\xae\xb5\x93\x6e\xa9\xd9\xa5\xd5\xd9\x6a\xdc\xb3\x8b\x1e\x13\x3d\xd6\xf3\xc1\xa6\xbd\xee\x94\xd4\x27\xc4\x43\x0f\x6f\xa5\xe8\xbd\xb7\xfe\xfd\xb6\xf9\xdd\x96\x92\xcd\x4d\xfe\x4a\x11\xd7\x2f\x59\xe2\xff\x1f\x3b\x7c\x3d\x1c\x31\xc2\x3a\x61\x5d\x4e\x8f\x64\x9a\x99\x71\xc2\x0c\x96\x5b\xa6\x0f\x97\x19\x11\x4a\x93\xe4\x03\x60\x32\x87\x7b\xcc\x83\x05\x4b\x32\xd4\xc0\x08\x61\xc1\x12\x1e\x41\x8c\x84\x1d\x61\x82\x3e\xaf\x8a\x8d\xd0\x7f\xb9\x5a\x6f\x2d\x3f\x27\x4f\x27\xff\x06\x00\x00\xff\xff\xe6\x33\x88\x6c\x8b\x18\x00\x00")

func workflowSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_workflowSchemaJson,
		"workflow.schema.json",
	)
}

func workflowSchemaJson() (*asset, error) {
	bytes, err := workflowSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "workflow.schema.json", size: 6283, mode: os.FileMode(0640), modTime: time.Unix(1554801321, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd1, 0x4f, 0xc0, 0x9d, 0x88, 0x4d, 0xf5, 0x86, 0x8f, 0x55, 0xd5, 0x8f, 0xfc, 0x77, 0xf3, 0x72, 0xcc, 0x86, 0x63, 0x17, 0x57, 0x3e, 0x16, 0x1e, 0x94, 0x4f, 0xe6, 0x6f, 0x7a, 0xd9, 0x42, 0x49}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"workflow.schema.json": workflowSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"workflow.schema.json": &bintree{workflowSchemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
