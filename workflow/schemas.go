// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/workflow.schema.json (8.45kB)

package workflow

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _workflowSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdb\x6e\xdb\x38\x13\xbe\xcf\x53\x10\x6e\x80\x1e\x7e\xdb\x2a\xfe\x9b\xc5\xe6\x6e\xeb\x04\x9b\x2c\x36\x8d\x37\x36\x9a\x36\x45\x5a\x8c\xe5\x91\xc5\x46\x22\x55\x92\x4a\xac\x76\xf3\xee\x0b\x29\x32\x25\xd9\xa4\x2c\x39\x72\xdb\xbb\x84\x9c\xc3\x37\x47\xcd\xd0\xdf\x0f\x08\x21\xa4\x77\x48\xe7\xbd\x23\xd2\xf3\x95\x8a\xe4\x91\xe3\x00\x53\x3e\x0c\x5d\x1e\x3a\xf7\x5c\xdc\x7a\x01\xbf\x97\x03\xe9\xfa\x18\x42\xaf\x9f\x33\xe4\xff\xe6\x4c\x47\x8e\xf3\x45\x72\x96\x13\x0d\xb9\x58\x38\x73\x01\x9e\x1a\xbc\xfe\xcd\x79\x3c\x7b\xb6\xe2\x9c\xa3\x74\x05\x8d\x14\xe5\x2c\xe5\xfe\x6b\x72\xf1\x96\x4c\x32\x12\xe2\x71\x41\x1e\xaf\x67\x94\x2d\x88\xd6\xbd\x62\x55\x49\x84\x29\x0f\x9f\x7d\x41\x57\xad\x4e\x05\x7e\x8d\xa9\xc0\xd4\x80\x8f\xd9\x49\x76\xfa\x28\xf2\x1d\x0a\x99\x2a\xca\xce\x6f\x72\x06\x98\xcf\x69\xaa\x1e\x82\xb1\xe0\x11\x0a\x45\x51\xf6\x8e\x88\x07\x81\xc4\x9c\x24\x2a\x5f\x7c\x2f\xa4\x5e\xe5\x90\xce\xe6\x95\xf3\x0a\x3a\xa9\x04\x65\x8b\x1c\x9d\xbe\x8d\x40\x29\x14\x99\xc9\x9f\x3e\xc2\xe0\xdb\x1f\x83\xeb\xd7\x83\xdf\x3f\x93\xc1\xcd\xab\xc3\x9e\x26\x7d\xe8\x97\x2c\xa0\x61\x1c\x40\x0a\xf4\x47\x68\x3b\x47\x05\x76\x2d\x15\x8f\x17\x5a\xcc\x5e\xd2\xf7\x6f\x21\x44\xe3\x8d\xc9\x82\x0d\xa2\x87\x03\xf3\x7f\x65\xd4\x67\xec\x0e\x99\xe2\x22\xe9\x1a\xfa\x38\x00\x85\xd3\x24\xb2\xdc\x57\x34\x80\x10\x90\xac\x29\xd0\x44\x54\x61\x68\x97\x91\x91\x1c\x0a\xf4\x52\x39\xcf\x9c\x39\x7a\x94\x65\xb9\x29\x9d\x68\x85\x60\xd3\x33\x9b\xde\xd9\x3c\x31\xfb\xab\x5a\x15\x2d\x93\x0a\x59\x1c\xa6\x45\xd6\xfb\xff\xf0\x75\xef\xc6\x28\xff\x12\x23\x2e\xa9\xe2\xc2\xe4\xd8\x66\x21\x49\xd2\xac\xb1\x44\xa5\x9c\xd6\x2f\x44\xaa\x6b\xa8\x5b\xd5\xbf\x0b\xaa\xfc\x78\x96\xfe\xf9\xd2\xa9\xfa\xec\xc1\x5c\x1d\xe3\x2d\x39\x30\x7c\x65\x8f\xbd\x39\x66\x62\x65\x7e\xb2\x5b\x3a\x9f\x04\x18\x22\x53\xbb\xba\xce\x6a\xc9\x4f\x4d\x64\x7c\x34\xaa\x55\x2a\x6f\x62\xe8\x9d\x31\xa9\x80\xb9\x4d\xec\x30\x3a\x49\x53\x6d\xcf\xb3\xc2\x20\x97\x87\x29\xf6\x54\xe8\xd4\xa7\x92\x50\x49\x94\x8f\x84\x41\x88\x84\x7b\x04\x18\xc9\xad\x23\x34\x87\xd7\x27\x38\x5c\x0c\xc9\xf3\x30\xf9\x0c\x01\xfd\x1a\x73\xf5\xdc\x02\x84\xd4\x37\xea\xff\x1d\x5a\xbc\x65\x33\xab\x51\x52\x6b\xf2\x9a\xe4\x2e\xcc\xaf\x8b\xe7\x2a\x1e\x66\x94\xc4\x18\x57\xf3\x69\x6d\xb4\x47\x9c\x31\x74\x33\xcd\x3f\x39\x81\x57\x90\x0a\x44\x3b\x76\xe6\xb5\xe2\xdd\x3e\x8e\x68\xd2\xf2\xa8\x63\x6e\xc0\x23\xce\x3c\xba\xd8\x43\xeb\xad\x96\x42\xa9\x04\xc8\x1c\xef\xa8\x8b\xc4\x0d\x40\x4a\x83\xef\xf5\x67\xc3\x1c\x95\x51\xf2\x86\x72\x5b\xc8\xfe\xa4\x81\xe4\x6c\x4c\x23\x54\xe7\xb0\xb4\x52\x05\x7c\x06\xc1\x39\x5d\xa2\xb0\x91\x9c\x42\x48\x03\xc5\x99\xed\xfe\x6f\x98\xb9\x89\x42\xdb\x75\x36\x0d\x5c\x22\xcc\xed\x1a\xfe\x19\x8f\x2e\x6d\x77\x13\x1f\x6e\x51\x9c\x31\x37\x9e\x81\xe2\x56\x11\x53\x74\xc1\x90\x53\x37\x5d\x7c\xcb\x3e\x95\x9c\x74\xd8\xb8\x83\x76\x93\xc9\xa6\x6c\x32\x16\xda\x63\x26\x8d\xb2\x44\xaa\x55\xb4\xbd\x0e\xa6\x28\x55\x3a\xc2\xec\x58\x08\x29\x70\x62\x44\x7e\x4e\x97\x53\x90\xb7\x23\x1f\xdd\x5b\x0b\x4d\xa1\x87\x34\xeb\x49\x56\x29\x35\xbe\x0a\x4b\x38\x9e\x3c\x21\x66\x7f\x3d\xe8\x05\x4d\x6b\xa9\x2e\x3f\xa5\xe9\xa6\xe3\xf9\xe4\x98\x0a\x74\x8d\x82\x37\x14\x58\xb7\x05\x43\xe7\x79\x23\x80\xb9\x7e\xb7\x32\x47\x3c\x0c\xa9\xea\x6c\xab\xe9\xe6\x5b\x50\x72\xa0\xb9\x1c\xca\x33\x58\xc7\xb1\xd3\x23\x7f\xf2\xc4\x75\xcf\xe0\xec\x7c\x1e\x1e\x83\x7a\x4a\x14\xf7\xe2\xf1\x35\xb3\xfb\x55\xb0\xb5\x51\xd0\x93\x53\xc7\x91\x38\x29\x82\xdc\x7d\x28\x8c\xef\x03\xcd\x80\x37\x35\x40\xd3\x2d\xb7\x8f\xa6\x2b\x85\x2c\x0e\x67\x28\x6a\x66\xd0\x9a\xd9\xdb\xde\x6d\xda\xab\x69\x35\xaa\x5b\x72\x4e\x89\x18\x2d\x1c\xe6\x0f\x5e\x8d\x9e\xde\x18\x04\x84\xa8\x50\x34\xdf\x97\x7e\x50\xe5\xac\xa7\x69\xa3\x5a\x29\x0d\xdd\x1d\x57\xcd\x84\xc7\xc2\x50\x8b\xfa\xde\xfc\xf9\x75\x35\x9e\x29\x8a\x90\x32\x08\x9a\x95\xd1\x14\xc4\x02\x6b\x3e\x1f\x4f\xd0\xb6\x97\x60\xe5\xde\xe9\x6b\xe4\xe6\x68\x19\x00\xee\xa7\xb9\x59\x7b\xe7\x86\x9a\x36\xcd\x4d\x17\x4b\xa7\x2f\x96\xdd\xd6\x8b\xb6\xbc\xbf\x8e\xd7\x1c\x92\xf2\x30\xdd\xf5\xb8\x96\x89\xfe\xa5\x1e\x62\x56\x5b\xe8\xfa\x33\xcc\x31\x17\x54\x36\x7f\x81\x19\x14\x4f\x30\x2f\x5e\x92\x5f\xe2\x0d\x66\x6d\xef\x2e\x62\x53\x67\xf7\x19\x8b\x62\x55\xbc\x61\x0f\xc9\x28\x16\x02\x99\x0a\x92\x3e\x01\x96\x90\x5b\x4c\x9c\x3b\x08\x62\x94\x04\x04\x92\x3b\x08\xe8\x9c\xf8\x28\x6c\x1b\xb0\x86\xb3\xed\x93\xa1\x3d\xb4\xdb\x4a\xb2\xcf\xa7\x91\xca\xc6\xd4\x71\x45\xa4\xc5\x29\xe2\x76\xcf\x54\x8d\x3a\xd3\x45\xac\xa2\x58\x6d\x5d\x34\xdb\x09\x9d\xd2\x10\x4f\xa4\xa2\x21\xa8\x06\xdd\xce\x26\xd8\xb6\x4c\x96\x5c\x5e\xfc\x86\xb1\xa7\x5f\x96\x36\x7a\xb2\x79\x76\x05\x16\x7b\xe0\xaa\x58\xa0\x68\xce\x75\x85\x41\x30\xf1\x21\x6a\xa1\x28\x65\x39\xad\x92\xe7\x93\xa3\x95\xfc\xaa\x1d\xf9\x71\x73\xf2\x73\x58\xbe\xe3\x41\x0b\x7a\xca\x5a\xd1\xbf\xe1\x4a\xf1\x70\x15\xdd\x36\x3c\x2d\x5d\xf4\xbe\x1d\xf9\x87\x76\xe4\xd7\xcd\xc9\x47\x3c\x98\xd0\x6f\x2d\xcc\xbd\xe4\xf7\xed\x18\x4e\x91\x2e\x7c\xd5\xd2\x3d\x17\x9e\x27\xb1\x25\xd3\x87\x5d\x98\xde\x4f\x14\x88\xb6\x8a\x76\xe0\xb9\x6e\xc9\x73\xb2\x54\x02\xaa\xe4\x79\x5b\xd9\xf6\xe4\x75\xf0\x70\xf0\x5f\x00\x00\x00\xff\xff\x7b\x96\x12\x8d\x02\x21\x00\x00")

func workflowSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_workflowSchemaJson,
		"workflow.schema.json",
	)
}

func workflowSchemaJson() (*asset, error) {
	bytes, err := workflowSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "workflow.schema.json", size: 8450, mode: os.FileMode(420), modTime: time.Unix(1556617019, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x40, 0xd4, 0xc6, 0xb7, 0x23, 0xdb, 0x13, 0x9, 0xe1, 0x42, 0x3a, 0xe3, 0x1c, 0xbc, 0x5f, 0x5f, 0x9b, 0x6d, 0x27, 0x67, 0xcf, 0x51, 0xe2, 0xa9, 0xa0, 0x42, 0x61, 0x90, 0x25, 0xc4, 0x13, 0xc4}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"workflow.schema.json": workflowSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"workflow.schema.json": &bintree{workflowSchemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
