// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/workflow.schema.json (9.85kB)

package workflow

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _workflowSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x19\xdb\x6e\xdb\x36\xf4\x3d\x5f\x41\xa8\x01\x7a\x99\x2f\xc1\x5e\x86\xe5\x6d\x71\x8c\x25\xc3\xdc\x78\xb1\xd1\xb4\x09\xd2\xe2\x58\x3a\xb6\xd8\x48\xa4\x4a\x52\x89\xd5\x2e\xff\x3e\x48\xd6\xcd\x36\x29\x4b\x89\xbc\xa6\x0f\x45\x4c\x9e\xc3\x73\xbf\xea\xc7\x01\x21\x84\x58\x87\xd4\xb1\x8e\x89\xe5\x2a\x15\xc8\xe3\x7e\x1f\x98\x72\xa1\x67\x73\xbf\xff\xc0\xc5\xdd\xdc\xe3\x0f\xb2\x2b\x6d\x17\x7d\xb0\x3a\x29\x42\xfa\x33\x45\x3a\xee\xf7\xbf\x4a\xce\x52\xa0\x1e\x17\x8b\xbe\x23\x60\xae\xba\x47\xbf\xf5\x57\x67\xaf\x32\x4c\x07\xa5\x2d\x68\xa0\x28\x67\x31\xf6\x5f\x93\x8b\xf7\x64\x92\x80\x90\x39\x17\x64\x75\x3d\xa3\x6c\x41\x72\xda\x19\xaa\x8a\x02\x8c\x71\xf8\xec\x2b\xda\x2a\x3b\x15\xf8\x2d\xa4\x02\x63\x01\x6e\x92\x93\xe4\x74\xf5\xe4\x07\x14\x32\x26\x94\x9c\xdf\xa6\x08\xe0\x38\x34\x26\x0f\xde\x58\xf0\x00\x85\xa2\x28\xad\x63\x32\x07\x4f\x62\x0a\x12\x94\x2f\x7e\x14\xaf\x5e\xa5\x2c\x9d\x3b\x6b\xe7\x6b\xdc\x49\x25\x28\x5b\xa4\xdc\xe5\xb7\x01\x28\x85\x22\x11\xf9\xf3\x0d\x74\xbf\xff\xd1\xbd\x3e\xea\xfe\xfe\x85\x74\x6f\xdf\x1d\x5a\x39\xe8\x63\x81\x65\x8d\x50\x81\x91\xca\x4d\xae\x04\x62\xb1\xd0\xf3\xac\xdb\x4d\x7a\x7a\x09\xf2\xfb\xf7\xe0\xa3\xf6\x46\x27\xcb\x16\xd0\xe3\x81\xfe\x57\x99\xff\x73\x76\x8f\x4c\x71\x11\xed\x4f\x88\xb1\x07\x0a\xa7\x51\x60\xb8\x27\x46\xa7\xd9\x82\x4a\xcd\x33\xae\x26\x98\x83\xf7\xde\x55\xde\x27\x30\x87\x02\xe7\x31\xe1\x57\x7d\x07\xe7\x94\x25\x2e\x27\xfb\x41\xc6\xf2\xb6\x52\xb3\x7f\x8f\xda\x9b\xed\xd3\x3a\x46\x58\x0f\x83\x86\x3e\x8b\x2c\xf4\x13\x33\xfd\xda\x3b\xb2\x6e\xb5\xef\x5f\x62\xc0\x25\x55\x5c\xe8\x54\x56\xad\xfb\xcc\xba\x51\xec\x8a\x06\x03\x97\xa3\xe6\x8d\x88\x69\xf5\xf2\xdc\xf4\xef\x82\x2a\x37\x9c\xc5\x7f\xbe\xed\xaf\x6b\xf3\x51\x1f\x7c\x3b\xac\x5b\x65\x55\x83\x35\x45\x26\x7e\xf4\xb4\x18\x19\x7a\xe8\x23\x53\x4f\x55\x9d\x51\x92\x9a\x31\x01\x42\x40\x64\x0a\x09\xaa\xd0\xdf\x11\x06\x7a\xa5\xe0\x4a\x28\xb3\x93\x6b\x5c\x79\x9b\x07\xeb\x9c\x49\x05\xcc\x6e\x21\xb6\x77\xfa\x59\x21\x90\xcd\xfd\x98\xf7\xf8\xd1\xa9\x4b\x25\xa1\x92\x28\x17\x09\x03\x1f\x09\x9f\x13\x60\x24\x95\x8e\xd0\x94\xbd\x0e\xc1\xde\xa2\x47\x5e\xfb\xd1\x17\xf0\xe8\xb7\x90\xab\xd7\x06\x46\x48\x75\x1d\xf8\xe5\xd0\xa0\xad\x9f\x9d\xb2\x52\x89\x33\x7b\xb4\x90\xb8\xaa\xac\x3d\xe0\x8c\xa1\x9d\x50\xfe\xc9\x0e\x9c\xb1\x54\x70\x54\xdb\x9d\x2b\xb3\xd1\xee\xfe\x23\x07\x2d\xf7\x36\xfa\x04\x3c\xe0\x6c\x4e\x17\x7b\x48\xbd\xeb\xa1\x50\x0a\x01\xe2\xe0\x3d\xb5\x91\xd8\x1e\x48\xa9\xd1\x7d\x5e\x36\xf4\x56\x19\x44\x27\x94\x9b\x4c\xf6\x27\xf5\x24\x67\x63\x1a\xa0\x1a\xc1\xd2\x08\xe5\xf1\x19\x78\x23\xba\x44\x61\x02\x39\x03\x9f\x7a\x8a\x33\xd3\xfd\xdf\x30\xb3\x23\x85\xa6\xeb\xa4\xb1\xb8\x44\x70\xcc\x14\xfe\x19\x0f\x2e\x4d\x77\x13\x17\xee\x50\x9c\x33\x3b\x9c\x81\xe2\xc6\x27\xa6\x68\x83\xc6\xa7\x6e\xdb\xa8\x65\x9f\x4b\x4a\x3a\xac\x9d\x41\xdb\xf1\x64\x9d\x37\x69\x03\x6d\xe5\x49\x83\xc4\x91\x2a\x09\xed\x8e\x83\x29\x4a\x15\xb7\x30\x6d\xf4\x9a\x44\x2b\xc2\x88\x2e\xa7\x20\xef\x06\x2e\xda\x77\x06\x98\x82\x20\xa9\x97\x9c\x8c\xaf\x54\x28\xcd\x2f\xf1\xf1\xc4\x84\xa4\x6f\x15\xa9\x1f\x7a\xa0\xaa\xfa\xc4\x67\x37\xec\x05\x0d\xcd\x04\xb5\x49\x4d\xdf\x95\x16\xb4\x6a\x4d\x54\x1a\x49\xf3\x17\x4a\x6d\xf1\x16\x51\x2d\xc2\x44\x81\x50\xf5\xc1\x87\xcc\x69\x00\x6c\x6a\x05\xb7\xd4\xb2\x97\x6e\x67\xb8\xd1\xd6\x10\xea\xe8\x92\x7b\x41\x46\xab\xfd\x97\xdb\xc4\xc8\x95\xe7\xa1\x93\x0a\xda\xfa\xf8\xd5\x7a\x91\x3f\x28\x3d\x6b\x95\x44\x59\xdf\x48\x94\x26\x90\x96\x67\x88\x53\x2a\xd0\xd6\x3e\xbc\x45\xc0\xb8\x26\xd0\xf8\xf9\x89\x00\x66\xbb\xed\xbe\x39\xe0\xbe\x4f\x55\x6b\xeb\x8c\x76\x4c\x59\x52\xa0\xbe\x64\x95\xe7\xa4\x96\x6d\x97\x8f\xe5\xd1\x33\xf7\x3c\xe6\x44\x35\x06\xf5\x1c\x2b\xee\x45\xe3\x1b\x62\x77\xd6\x99\xad\xb4\x42\x3e\xdd\xb4\x6c\x89\x61\x61\xe4\xf6\x4d\xa1\x5d\x11\x6e\xbe\xb8\xab\x68\xd7\x15\x25\x87\x5b\xee\xce\xc1\x99\x30\x2c\xf4\x67\x28\x2a\x72\x6d\x45\x85\x31\xe7\x9d\xe6\x64\x1a\xd5\x24\x83\xf7\x29\x11\xa2\x01\x43\x9f\xc1\x2b\xe8\x58\x63\x10\xe0\xa3\x42\x51\xbf\xde\xff\x4f\x31\xb4\xe9\xb0\xb5\xa2\xa6\x34\x22\xb7\x1c\x3f\x13\x1e\x0a\x4d\x54\xe6\xf7\xfa\x6a\x6f\xe7\xfc\x4c\x51\xf8\x94\x81\x57\x2f\xa0\xa6\x20\x16\x58\x51\x48\x9e\x41\x6d\x2f\xc6\x4a\xb5\xd3\xc9\x39\xd7\x5b\x4b\xc3\xe0\x7e\xd2\x9c\x31\x8b\x6e\x91\x69\x92\xe6\xf2\x60\x69\xf5\xa3\x45\xbb\xf1\x92\x4b\xde\xd9\xe4\x57\x6f\x92\xf2\xe8\xdb\x76\xe3\x96\x3c\xfd\xa2\xd6\xa6\xd9\xce\x68\x73\x69\x7a\xca\x05\x95\xf5\xf7\xa5\xdd\x62\xcc\x7b\xf3\x96\xbc\x88\x61\x63\x63\x4b\x56\xd8\xa6\x4a\xee\x73\x16\x84\xaa\xf8\x78\xd5\x23\x83\x50\x08\x64\xca\x8b\x3a\x04\x58\x44\xee\x30\xea\xdf\x83\x17\xa2\x24\x20\x90\xdc\x83\x47\x1d\xe2\xa2\x30\xed\xab\x72\x76\x76\x95\x8c\x5c\x43\x2f\x64\xc6\x29\x05\xc4\xda\x5a\xa3\xe5\x88\x88\x83\x53\x84\x75\x97\xca\xc6\x7a\xab\x49\x4d\x17\xa1\x0a\x42\xb5\x73\x1d\xd4\xf0\xd5\x29\xf5\x71\x28\x15\xf5\x41\xd5\xc8\x77\xa6\xee\xa7\xce\xd2\xa7\xf8\x1c\xd9\xb2\xca\xb3\x54\x5d\x6f\xf9\x31\x02\x16\xce\xc1\x56\xa1\x40\x51\x1f\xeb\x0a\x3d\x6f\xe2\x42\xd0\x80\x50\x8c\x72\xb6\x0e\x9e\xaa\xcf\x08\x7e\xd5\x0c\xfc\xb4\x3e\xf8\x08\x96\x1f\xb8\xd7\x00\x9e\xb2\x46\xf0\x27\x5c\x29\xee\x67\xd6\x6d\x82\xd3\x50\x45\x1f\x9b\x81\x7f\x6a\x06\x7e\x5d\x1f\x7c\xc0\xbd\x09\xfd\xde\x40\xdc\x4b\xfe\xd0\x0c\xe1\x0c\xe9\xc2\x55\x0d\xd5\x73\x31\x9f\x4b\x6c\x88\xf4\xe9\x29\x48\x1f\x35\x1b\xca\x9d\x84\x9e\x80\x73\xdd\x10\x67\xb8\x54\x02\xd6\xc1\xd3\xb4\x52\x2b\x4b\x6d\x2d\xef\xf6\xdb\xbd\x36\xcb\x5d\x9a\x09\xbf\xf6\x36\x59\x61\xb6\x46\xa9\x87\x32\x86\xb8\x4d\xc8\xd8\xdd\xd3\x0a\xbd\xf6\xfe\x7c\x28\x04\x37\xa5\x6b\x93\x55\x0f\x56\xff\x3f\x1e\xfc\x17\x00\x00\xff\xff\xc0\x3d\x48\x36\x7a\x26\x00\x00")

func workflowSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_workflowSchemaJson,
		"workflow.schema.json",
	)
}

func workflowSchemaJson() (*asset, error) {
	bytes, err := workflowSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "workflow.schema.json", size: 9850, mode: os.FileMode(0640), modTime: time.Unix(1558010151, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x57, 0x9, 0x7d, 0xa4, 0xbc, 0x90, 0x91, 0xa9, 0x7b, 0x1d, 0x40, 0xee, 0x5b, 0xad, 0x1b, 0x86, 0xe5, 0x90, 0x46, 0x77, 0xde, 0x26, 0x1, 0x40, 0x6b, 0xe4, 0x19, 0x48, 0xf8, 0xa0, 0x77, 0xdc}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"workflow.schema.json": workflowSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"workflow.schema.json": &bintree{workflowSchemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
