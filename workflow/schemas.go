// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/workflow.schema.json (8.449kB)

package workflow

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _workflowSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdd\x6f\xdb\x36\x10\x7f\xcf\x5f\x41\xb8\x01\xfa\x31\xdb\x2a\xf6\x32\x2c\x6f\xab\x1b\x2c\x19\x96\xc6\x8b\x8d\xa6\x4d\x91\x16\x67\xf9\x64\xb1\x91\x48\x95\xa4\x12\xab\x5d\xfe\xf7\x41\x8a\x4c\x49\x36\x29\x4b\x8e\x9c\xf5\x2d\x21\xef\xe3\x77\x9f\xba\xa3\x7f\x1c\x10\x42\x48\xef\x90\xce\x7b\x47\xa4\xe7\x2b\x15\xc9\x23\xc7\x01\xa6\x7c\x18\xba\x3c\x74\xee\xb8\xb8\xf1\x02\x7e\x27\x07\xd2\xf5\x31\x84\x5e\x3f\x67\xc8\xff\xcd\x99\x8e\x1c\xe7\xab\xe4\x2c\x27\x1a\x72\xb1\x70\xe6\x02\x3c\x35\x78\xfd\x9b\xf3\x70\xf6\x6c\xc5\x39\x47\xe9\x0a\x1a\x29\xca\x59\xca\xfd\xd7\xe4\xfc\x1d\x99\x64\x24\xc4\xe3\x82\x3c\x5c\xcf\x28\x5b\x10\xad\x7b\xc5\xaa\x92\x08\x53\x1e\x3e\xfb\x8a\xae\x5a\x9d\x0a\xfc\x16\x53\x81\xa9\x01\x9f\xb2\x93\xec\xf4\x41\xe4\x7b\x14\x32\x55\x94\x9d\x5f\xe7\x0c\x30\x9f\xd3\x54\x3d\x04\x63\xc1\x23\x14\x8a\xa2\xec\x1d\x11\x0f\x02\x89\x39\x49\x54\xbe\xf8\x51\x48\xbd\xcc\x21\x9d\xce\x2b\xe7\x15\x74\x52\x09\xca\x16\x39\x3a\x7d\x1b\x81\x52\x28\x32\x93\x3f\x7f\x82\xc1\xf7\x3f\x06\x57\xaf\x07\xbf\x7f\x21\x83\xeb\x57\x87\x3d\x4d\x7a\xdf\x2f\x59\x40\xc3\x38\x80\x14\xe8\x53\x68\x3b\x43\x05\x76\x2d\x15\x8f\x17\x5a\xcc\x5e\xd2\xf7\xef\x20\x44\xe3\x8d\xc9\x82\x0d\xa2\xfb\x03\xf3\x7f\x65\xd4\xa7\xec\x16\x99\xe2\x22\xe9\x1a\xfa\x38\x00\x85\xd3\x24\xb2\xdc\x57\x34\x80\x10\x90\xac\x29\xd0\x44\x54\x61\x68\x97\x91\x91\x1c\x0a\xf4\x52\x39\xcf\xe6\xe8\x51\x96\xa5\xa6\x74\xa2\x15\x80\x4d\xc7\x6c\x3a\x67\xf3\xc4\xec\xae\x6a\x51\xb4\xcc\x29\x64\x71\x98\xd6\x58\xef\xd7\xe1\xeb\xde\xb5\x51\xfe\x05\x46\x5c\x52\xc5\x85\xc9\xaf\xcd\x22\x92\xa4\x49\x63\x09\x4a\x39\xab\x5f\x88\x54\xd7\x50\x77\xaa\x7f\x17\x54\xf9\xf1\x2c\xfd\xf3\xa5\x53\xf5\xd9\xbd\xb9\x38\xc6\x5b\x52\x60\xf8\xca\x1e\x7a\x1d\x32\xa7\x1c\x33\xb1\x32\x3f\xd9\x2d\x9b\x8f\x03\x0c\x91\xa9\x5d\x5d\x67\xb5\xe4\xa9\xf3\xb8\xe2\x14\x7c\x30\xaa\x55\x2a\x6f\x62\xe8\x9d\x32\xa9\x80\xb9\x4d\xec\x30\x3a\x49\x53\x6d\xcf\xb3\xc2\x20\x97\x87\x29\xf6\x54\xe8\xd4\xa7\x92\x50\x49\x94\x8f\x84\x41\x88\x84\x7b\x04\x18\xc9\xad\x23\x34\x87\xd7\x27\x38\x5c\x0c\xc9\xf3\x30\xf9\x02\x01\xfd\x16\x73\xf5\xdc\x02\x84\xd4\xf7\xe9\x5f\x0e\x2d\xde\xb2\x99\xd5\x28\xa9\x35\x79\x4d\x72\x17\xe6\xd7\xc5\x73\x15\x0f\x33\x4a\x62\x8c\xab\xf9\xb4\x36\xda\x23\xce\x18\xba\x99\xe6\xff\x39\x81\x57\x90\x0a\x44\x3b\x76\xe6\xb5\xe2\xdd\x3e\x8d\x68\xd2\xf2\xa4\x63\x6e\xc0\x23\xce\x3c\xba\xd8\x43\xeb\xad\x96\x42\xa9\x04\xc8\x1c\x6f\xa9\x8b\xc4\x0d\x40\x4a\x83\xef\xf5\x67\xc3\x1c\x95\x51\xf2\x86\x72\x5b\xc8\xfe\xa4\x81\xe4\x6c\x4c\x23\x54\x67\xb0\xb4\x52\x05\x7c\x06\xc1\x19\x5d\xa2\xb0\x91\x9c\x40\x48\x03\xc5\x99\xed\xfe\x6f\x98\xb9\x89\x42\xdb\x75\x36\x0c\x5c\x20\xcc\xed\x1a\xfe\x19\x8f\x2e\x6c\x77\x13\x1f\x6e\x50\x9c\x32\x37\x9e\x81\xe2\x56\x11\x53\x74\xc1\x90\x53\xd7\x5d\x7c\xcb\x3e\x97\x9c\x74\xd8\xb8\x83\x76\x93\xc9\xa6\x6c\x32\x16\xda\x43\x26\x8d\xb2\x44\xaa\x55\xb4\xbd\x0e\xa6\x28\x55\x3a\xc2\xec\x58\x08\x29\x70\x62\x44\x7e\x46\x97\x53\x90\x37\x23\x1f\xdd\x1b\x0b\x4d\xa1\x87\x34\xeb\x49\x56\x29\x35\xbe\x0a\x4b\x38\x1e\x3d\x21\x66\x7f\xdd\xeb\xfd\x4c\x6b\xa9\xee\x3e\xa5\xe9\xa6\xe3\xf9\xe4\x2d\x15\xe8\x1a\x05\x6f\x28\xb0\x2e\x0b\x86\xce\xf3\x46\x00\x73\xfd\x6e\x65\x8e\x78\x18\x52\xd5\xd9\x52\xd3\xcd\xb7\xa0\xe4\x40\x73\x39\x94\x67\xb0\x8e\x63\xa7\x47\xfe\xe4\x91\xdb\x9e\xc1\xd9\xf9\x3c\x3c\x06\xf5\x98\x28\xee\xc5\xe3\x6b\x66\xf7\xab\x60\x6b\xa3\xa0\x27\xa7\x8e\x23\x71\x5c\x04\xb9\xfb\x50\x18\x9f\x07\x9a\x01\x6f\x6a\x80\xa6\x5b\x6e\x1f\x4d\x57\x0a\x59\x1c\xce\x50\xd4\xcc\xa0\x35\xb3\xb7\xbd\xdb\xb4\x57\xd3\x6a\x54\xb7\xe4\x9c\x12\x31\x5a\x38\xcc\x1f\xbc\x1a\x3d\xbd\x31\x08\x08\x51\xa1\x68\xbe\x2f\x3d\x51\xe5\xac\xa7\x69\xa3\x5a\x29\x0d\xdd\x1d\x57\xcd\x84\xc7\xc2\x50\x8b\xfa\xde\xfc\xf9\x75\x35\x9e\x29\x8a\x90\x32\x08\x9a\x95\xd1\x14\xc4\x02\x6b\x3e\x1f\x8f\xd0\xb6\x97\x60\xe5\xde\xe9\x6b\xe4\xe6\x68\x19\x00\xee\xa7\xb9\x59\x7b\xe7\x86\x9a\x36\xcd\x4d\x17\x4b\xa7\x0f\x96\xdd\xd6\x8b\xb6\xbc\xbf\x8e\xd7\x1c\x92\xf2\x30\xdd\xf5\xb8\x96\x89\xfe\xa9\x1e\x62\x56\x5b\xe8\xfa\x33\xcc\x5b\x2e\xa8\x6c\xfe\x02\x33\x28\x9e\x60\x5e\xbc\x24\x3f\xc5\x1b\xcc\xda\xde\x5d\xc4\xa6\xce\xee\x53\x16\xc5\xaa\x78\xc2\x1e\x92\x51\x2c\x04\x32\x15\x24\x7d\x02\x2c\x21\x37\x98\x38\xb7\x10\xc4\x28\x09\x08\x24\xb7\x10\xd0\x39\xf1\x51\xd8\x36\x60\x0d\x67\xdb\x27\x43\x7b\x68\xb7\x95\x64\x9f\x4f\x23\x95\x8d\xa9\xe3\x8a\x48\x8b\x53\xc4\xed\x9e\xa9\x1a\x75\xa6\xf3\x58\x45\xb1\xda\xba\x68\xb6\x13\x3a\xa5\x21\x1e\x4b\x45\x43\x50\x0d\xba\x9d\x4d\xb0\x6d\x99\x2c\xb9\xbc\xf8\x0d\x63\x4f\x3f\x2c\x6d\xf4\x64\xf3\xec\x0a\x2c\xf6\xc0\x55\xb1\x40\xd1\x9c\xeb\x12\x83\x60\xe2\x43\xd4\x42\x51\xca\x72\x52\x25\xcf\x27\x47\x2b\xf9\x65\x3b\xf2\xb7\xcd\xc9\xcf\x60\xf9\x9e\x07\x2d\xe8\x29\x6b\x45\xff\x86\x2b\xc5\xc3\x55\x74\xdb\xf0\xb4\x74\xd1\x87\x76\xe4\x1f\xdb\x91\x5f\x35\x27\x1f\xf1\x60\x42\xbf\xb7\x30\xf7\x82\xdf\xb5\x63\x38\x41\xba\xf0\x55\x4b\xf7\x9c\x7b\x9e\xc4\x96\x4c\x1f\x77\x61\xfa\x30\x51\x20\xda\x2a\xda\x81\xe7\xaa\x25\xcf\xf1\x52\x09\xa8\x92\xe7\x6d\x65\xdb\x93\xd7\xc1\xfd\xc1\x7f\x01\x00\x00\xff\xff\xce\x09\x7a\xee\x01\x21\x00\x00")

func workflowSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_workflowSchemaJson,
		"workflow.schema.json",
	)
}

func workflowSchemaJson() (*asset, error) {
	bytes, err := workflowSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "workflow.schema.json", size: 8449, mode: os.FileMode(420), modTime: time.Unix(1556616700, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x39, 0xe1, 0x67, 0xa0, 0x65, 0xee, 0xcd, 0x74, 0xcd, 0xc6, 0xc4, 0x59, 0xa7, 0x1b, 0xd1, 0x29, 0xde, 0x76, 0xe0, 0xa2, 0x78, 0xd0, 0x8f, 0xd2, 0x72, 0x1e, 0x22, 0x94, 0x64, 0xed, 0x31, 0x51}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"workflow.schema.json": workflowSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"workflow.schema.json": &bintree{workflowSchemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
