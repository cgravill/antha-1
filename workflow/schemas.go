// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/workflow.schema.json (6.242kB)

package workflow

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _workflowSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\x38\xa8\x06\xb2\x75\xb6\x95\xed\x65\x98\xdf\x36\xa7\xe8\x32\x20\x8d\xb1\x18\x1b\xb0\x22\x2d\x68\xe9\x6c\xb1\x91\x48\xf5\x48\x39\xd1\xba\x7c\xf7\x41\x32\x4d\x4b\x36\xa5\xc8\xb1\xdd\xed\xc9\x32\x79\xff\xef\x7e\xc7\xbb\x2f\x67\x00\x00\x5e\x8f\x87\xde\x08\xbc\x48\xeb\x54\x8d\x7c\x9f\x09\x1d\xb1\x61\x20\x13\xff\x41\xd2\xfd\x3c\x96\x0f\x6a\xa0\x82\x08\x13\xe6\xf5\x0d\x83\xf9\x6b\x98\x46\xbe\xff\x49\x49\x61\x88\x86\x92\x16\x7e\x48\x6c\xae\x07\x17\x3f\xfa\xab\xb3\x57\x6b\xce\x10\x55\x40\x3c\xd5\x5c\x8a\x82\xfb\xb7\xdb\x9b\x77\x70\x5b\x92\xc0\x5c\x12\xac\xae\x67\x5c\x2c\xc0\xea\x5e\xb3\xea\x3c\xc5\x82\x47\xce\x3e\x61\xa0\xd7\xa7\x84\x9f\x33\x4e\x58\x38\xf0\xbe\x3c\x29\x4f\x57\x22\xff\x40\x52\x85\xa2\xf2\xfc\xce\x30\xb0\x30\xe4\x85\x7a\x16\x4f\x48\xa6\x48\x9a\xa3\xf2\x46\x30\x67\xb1\x42\x43\x92\x56\x2f\xbe\x6c\xa4\xfe\x69\x4c\xba\x0a\x6b\xe7\x35\xeb\x94\x26\x2e\x16\xc6\x3a\x7b\x9b\x32\xad\x91\x4a\x97\x3f\xbc\x67\x83\xbf\x7f\x1e\xfc\x75\x67\x7e\x2f\x06\x3f\x7d\x84\xc1\xdd\xeb\x9e\x67\x59\x9e\x36\xdc\xde\x35\x6a\xd6\xac\x4d\x64\x71\xbc\xad\xab\x17\xc8\x24\x41\xa1\x8b\xfb\xe9\xcd\xe5\xcd\x08\x78\x92\xc6\x58\x1c\x81\xc9\x10\xfc\xca\x96\x28\xce\x35\x28\x44\x01\x52\x20\xc8\x39\xe8\x08\x15\x02\x17\xc5\x07\x3c\xf0\x38\x84\x1c\xb5\xdb\xa8\x2b\xb1\x44\xa1\x25\xe5\xcd\x96\xd5\xb2\xf4\x35\x6d\xab\xa7\x7e\xcf\x3c\xa1\xc8\x92\xa2\x92\xbc\x1f\x86\x17\xde\x9d\x53\xfe\xef\x98\x4a\xc5\xb5\xa4\xed\xf2\xe8\xe0\x7e\xc2\x45\xad\xe8\xbe\xdf\x2e\x93\xd5\x65\xfe\x8e\x25\x0e\xe1\xb0\x5d\x49\xdf\x50\x61\xcb\xd0\xe2\xf5\x9f\x05\xd7\x51\x36\x2b\x3e\xbf\xf5\xbd\x1a\xef\x93\xbb\x20\x27\xee\x4a\xb7\x64\xc3\xd7\xce\xf3\x55\x2e\x09\xe7\x85\x19\xaf\xfc\x10\xe7\x5c\x94\xa0\x52\x3e\xad\xc3\x93\x7b\x3b\x6c\x4f\x67\xee\x7f\xd5\xf0\xbe\x59\x55\xc3\xde\xa1\x6d\xc0\xac\xbd\x9f\xe6\x69\xc3\x55\x4d\x38\x23\x62\xf9\x96\x6c\x4b\x94\x70\x71\xa5\x31\x71\x64\xce\x92\x70\x73\xef\x56\x03\xcd\x71\xc3\x95\xdf\x85\x99\xbb\x81\x83\x9d\xe0\xc1\x6e\x4e\x61\x85\x4c\xa5\x99\x08\xba\xb8\xea\x8c\x63\xd5\xd7\xb6\x52\xb5\x74\xcf\x97\xec\xc6\xf1\x1d\xf0\x07\x52\xcc\x39\x25\xa0\x23\xae\x80\x70\x81\x8f\x43\x98\x16\xdf\x5c\x95\x48\x17\x2c\x29\xe1\xcf\x04\x98\xf8\x00\x37\x0e\xf6\x01\x87\x8b\x21\x9c\x27\xf9\x47\x16\xf3\xcf\x99\xd4\xe7\x0d\xae\x40\x43\x03\x36\x8d\xf7\xbb\x5e\x43\xbc\x9b\x1c\xee\x84\x1c\x4b\xde\x82\xa0\x4d\x60\xda\x2a\x62\x9d\x51\xb7\x95\xe0\xac\x0c\xf7\x69\x6b\xbd\x8c\xa5\x10\x18\x94\x9a\x0f\x44\xc9\xa1\x10\x58\x9b\xb4\xb1\xa8\x33\x20\x5a\x5b\xde\xf3\x0f\xbf\x25\xad\x0e\x15\xa6\x73\xf4\xab\xd8\x72\xbf\x0c\xe3\xa2\x9a\x17\x2f\x6c\x5c\x6d\x3d\xdf\x01\x9c\x08\x83\xfb\xe7\x61\x03\x21\x2e\x79\x80\x10\xc4\x4c\xa9\x35\x62\xde\xf2\x58\x49\x31\xe1\x29\xea\x6b\xf6\xe8\x42\x4d\x13\x5a\x76\xc1\xf2\xc2\x67\xe5\xc3\xdb\x58\xce\x58\x7c\xcd\x1f\x91\x7a\x9d\x3b\xd5\x71\xf2\xed\x8a\xaf\xb3\x1c\x57\xb1\x1b\x17\xa1\x6b\x77\xba\x5a\x2d\x95\xca\x38\xab\xd0\x7a\x15\xc1\xf5\x99\xb2\xf2\x5e\x1e\xf9\xc5\xbb\xe4\x84\x81\x53\xf0\x8e\x02\x33\x0c\x75\xea\x18\xbf\x10\x13\x41\x74\x5c\x99\x63\x99\x24\x5c\x1f\x20\xf3\x24\xc0\xdf\x04\xd0\x8d\xf7\xea\x93\x7d\xe4\xdc\xd9\x21\xb3\x6c\x0b\xc7\x0d\xb6\x99\xb0\x26\x4c\x1f\x92\xc5\x93\x44\x7c\xcb\xed\x7e\xdd\xd8\xd6\x2c\xd8\x67\xf2\xc8\x99\x78\xb3\x49\xf2\xf1\x53\xe1\x5c\xee\xba\x19\xde\xd5\x01\x4b\xf7\xf8\xfc\x1c\xb2\xd9\x2a\x93\x19\x52\xcb\xc0\xd1\x32\x68\x35\x77\x9b\xfd\xd5\xec\x35\x97\x35\xd4\x9c\xa6\x0c\x1b\x38\xdc\x7d\xbb\x45\x8f\x37\x61\xc4\x12\xd4\x48\xdd\xc7\xeb\xaf\x84\x9c\xed\x32\xed\xd7\x8c\xed\x84\x9c\xca\xbc\x75\x64\x0c\xdd\xca\x8c\x1c\xc8\xb4\xf7\xee\xf7\x37\xb0\xf6\x4c\x91\x12\x2e\x58\xdc\x0d\x54\x53\x46\x0b\x6c\x79\x4c\x0e\xd0\x76\x92\xd4\x99\xe8\xf4\xad\xe5\xee\x6c\x39\x0c\x3c\x4d\xab\x6b\xec\xa4\x3b\x6a\xf6\x69\x75\xb6\x1a\x0f\xec\xa2\xa7\x44\x8f\xf5\xbc\xbf\x6d\xaf\x3b\x25\xd5\x09\xf1\xd8\xc3\x5b\x29\xfa\xe0\x2d\xfe\xb0\xed\x7c\xbf\x25\x63\x7b\x33\xbf\x94\xc4\xd5\x4b\x96\xf2\xff\xc7\x4e\x5e\x0d\x47\x84\xb0\x49\x58\x9b\xd3\x57\x22\xcd\xf4\x24\x66\x1a\xcb\xad\x71\x08\xe3\x8c\x08\x85\x8e\xf3\x3e\x30\x91\xc3\x3d\xe6\xfe\x92\xc5\x19\x2a\x60\x84\xb0\x64\x31\x0f\x21\x42\xc2\x96\x30\x41\x97\x57\xc5\x46\xe8\xbf\x5c\x95\x77\x96\x9f\xb3\xa7\x7f\x03\x00\x00\xff\xff\x8a\x19\x38\x33\x62\x18\x00\x00")

func workflowSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_workflowSchemaJson,
		"workflow.schema.json",
	)
}

func workflowSchemaJson() (*asset, error) {
	bytes, err := workflowSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "workflow.schema.json", size: 6242, mode: os.FileMode(420), modTime: time.Unix(1554728009, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x48, 0xf0, 0xca, 0xe2, 0x78, 0x6e, 0x62, 0x55, 0x2b, 0x38, 0xba, 0xdb, 0x4a, 0xa5, 0x81, 0xa0, 0x9, 0x83, 0xdc, 0xbe, 0x76, 0x34, 0x69, 0x83, 0xe7, 0xe2, 0xea, 0x1c, 0x9c, 0xda, 0xa6, 0xe8}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"workflow.schema.json": workflowSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"workflow.schema.json": &bintree{workflowSchemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
