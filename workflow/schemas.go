// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/workflow.schema.json (8.449kB)

package workflow

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _workflowSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x4d\x6f\xdb\x38\x13\xbe\xe7\x57\x10\x6e\x80\x7e\xbc\xb6\x55\xbc\x97\xc5\xe6\xb6\x75\x82\x4d\x16\x9b\xc6\x1b\x1b\x4d\x9b\x22\x2d\xc6\xf2\xc8\x62\x23\x91\x2a\x49\x25\x56\xbb\xf9\xef\x0b\x29\x32\x25\xd9\xa4\x2c\x39\x72\xdb\x9b\x4d\x3e\xc3\xf9\x1e\xce\x50\xdf\x0f\x08\x21\xa4\x77\x48\xe7\xbd\x23\xd2\xf3\x95\x8a\xe4\x91\xe3\x00\x53\x3e\x0c\x5d\x1e\x3a\xf7\x5c\xdc\x7a\x01\xbf\x97\x03\xe9\xfa\x18\x42\xaf\x9f\x13\xe4\x7f\x73\xa2\x23\xc7\xf9\x22\x39\xcb\x41\x43\x2e\x16\xce\x5c\x80\xa7\x06\xaf\x7f\x73\x1e\xd7\x9e\xad\x28\xe7\x28\x5d\x41\x23\x45\x39\x4b\xa9\xff\x9a\x5c\xbc\x25\x93\x0c\x42\x3c\x2e\xc8\xe3\xf6\x8c\xb2\x05\xd1\xbc\x57\xa4\x2a\x89\x30\xa5\xe1\xb3\x2f\xe8\xaa\xd5\xaa\xc0\xaf\x31\x15\x98\x2a\xf0\x31\x5b\xc9\x56\x1f\x8f\x7c\x87\x42\xa6\x8c\xb2\xf5\x9b\x9c\x00\xe6\x73\x9a\xb2\x87\x60\x2c\x78\x84\x42\x51\x94\xbd\x23\xe2\x41\x20\x31\x87\x44\xe5\x8d\xef\xc5\xa9\x57\xb9\x48\x67\xf3\xca\x7a\x45\x3a\xa9\x04\x65\x8b\x5c\x3a\xbd\x1b\x81\x52\x28\x32\x95\x3f\x7d\x84\xc1\xb7\x3f\x06\xd7\xaf\x07\xbf\x7f\x26\x83\x9b\x57\x87\x3d\x0d\x7d\xe8\x97\x34\xa0\x61\x1c\x40\x2a\xe8\x8f\xe0\x76\x8e\x0a\xec\x5c\x2a\x16\x2f\xb8\x98\xad\xa4\xf7\xdf\x42\x88\xc6\x1d\x93\x06\x1b\xa0\x87\x03\xf3\xbf\xb2\xd4\x67\xec\x0e\x99\xe2\x22\xe9\x5a\xf4\x71\x00\x0a\xa7\x49\x64\xd9\xaf\x70\x00\x21\x20\x59\x63\xa0\x41\x54\x61\x68\x3f\x23\x83\x1c\x0a\xf4\xd2\x73\x9e\x39\x73\xf4\x28\xcb\x62\x53\x3a\xd1\x4a\x82\x4d\xcb\x6c\x5a\x67\x73\xc5\x6c\xaf\x6a\x56\xb4\x0c\x2a\x64\x71\x98\x26\x59\xef\xff\xc3\xd7\xbd\x1b\xe3\xf9\x97\x18\x71\x49\x15\x17\x26\xc3\x36\x73\x49\x92\x46\x8d\xc5\x2b\xe5\xb0\x7e\x21\x52\x5e\x43\x5d\xaa\xfe\x5d\x50\xe5\xc7\xb3\xf4\xe7\x4b\xa7\x6a\xb3\x07\x73\x76\x8c\xb7\xc4\xc0\xf0\x95\xdd\xf7\x66\x9f\x89\x95\xfa\xc9\x6e\xe1\x7c\x12\x60\x88\x4c\xed\x6a\x3a\xab\x26\x3f\x35\x90\xf1\x51\xa9\x56\xa1\xbc\x29\x43\xef\x8c\x49\x05\xcc\x6d\xa2\x87\xd1\x48\x1a\xb5\x3d\xce\x0a\x85\x5c\x1e\xa6\xb2\xa7\x87\x4e\x7d\x2a\x09\x95\x44\xf9\x48\x18\x84\x48\xb8\x47\x80\x91\x5c\x3b\x42\x73\xf1\xfa\x04\x87\x8b\x21\x79\x1e\x26\x9f\x21\xa0\x5f\x63\xae\x9e\x5b\x04\x21\xf5\x85\xfa\x7f\x87\x16\x6b\xd9\xd4\x6a\x14\xd4\x1a\x5e\x13\xdc\x85\xfa\x75\xfe\x5c\xf9\xc3\x2c\x25\x31\xfa\xd5\xbc\x5a\xeb\xed\x11\x67\x0c\xdd\x8c\xf3\x4f\x0e\xe0\x95\x48\x85\x44\x3b\x56\xe6\xb5\xe4\xdd\xde\x8e\x68\x68\xb9\xd5\x31\x17\xe0\x11\x67\x1e\x5d\xec\xa1\xf4\x56\x53\xa1\x94\x02\x64\x8e\x77\xd4\x45\xe2\x06\x20\xa5\xc1\xf6\xfa\xda\x30\x7b\x65\x94\xbc\xa1\xdc\xe6\xb2\x3f\x69\x20\x39\x1b\xd3\x08\xd5\x39\x2c\xad\xa8\x80\xcf\x20\x38\xa7\x4b\x14\x36\xc8\x29\x84\x34\x50\x9c\xd9\xf6\xff\x86\x99\x9b\x28\xb4\x6d\x67\xdd\xc0\x25\xc2\xdc\xce\xe1\x9f\xf1\xe8\xd2\xb6\x37\xf1\xe1\x16\xc5\x19\x73\xe3\x19\x28\x6e\x3d\x62\x8a\x2e\x18\x62\xea\xa6\x8b\xbb\xec\x53\xc9\x48\x87\x8d\x2b\x68\x37\x91\x6c\x8a\x26\x63\xa2\x3d\x46\xd2\x28\x0b\xa4\x5a\x46\xdb\xf3\x60\x8a\x52\xa5\x2d\xcc\xee\x17\x29\x31\x0a\x7e\x4e\x97\x53\x90\xb7\x23\x1f\xdd\x5b\x0b\xa6\x60\x43\x9a\x95\x24\xeb\x29\x35\xa6\x0a\x4b\x72\x3c\xb9\x41\xcc\x7e\x3d\xe8\xf9\x4c\x73\xa9\xce\x3e\xa5\xe6\xa6\xe3\xf6\xe4\x98\x0a\x74\x8d\x07\x6f\x30\xb0\x0e\x0b\x86\xc2\xf3\x46\x00\x73\xfd\x6e\xcf\x1c\xf1\x30\xa4\xaa\xb3\xa1\xa6\x9b\xab\xa0\x64\x40\x73\x36\x94\x5b\xb0\x8e\x7d\xa7\x3b\xfe\xe4\x89\xd3\x9e\xc1\xd8\x79\x3b\x3c\x06\xf5\x14\x2f\xee\xc5\xe2\x6b\x6a\xf7\xab\xc2\xd6\x7a\x41\x37\x4e\x1d\x7b\xe2\xa4\x70\x72\xf7\xae\x30\x3e\x0f\x34\x13\xbc\xa9\x02\x1a\xb7\xdc\xde\x99\xae\x18\xb2\x38\x9c\xa1\xa8\x69\x41\x6b\x5a\x6f\x7b\xb5\x69\xcf\xa6\x55\xa7\x6e\x89\x39\x25\x62\xb4\x50\x98\xef\xbb\x1a\x3e\xbd\x31\x08\x08\x51\xa1\x68\x3e\x2e\xfd\xa0\xcc\x59\x0f\xd3\x46\xb9\x52\xea\xb9\x3b\xce\x9a\x09\x8f\x85\x21\x17\xf5\xbe\xf9\xfa\x75\xb5\x3c\x53\x14\x21\x65\x10\x34\x4b\xa3\x29\x88\x05\xd6\x5c\x1f\x4f\xe0\xb6\x17\x67\xe5\xd6\xe9\x6b\xc9\xcd\xde\x32\x08\xb8\x9f\xe2\x66\xad\x9d\x1b\x6c\xda\x14\x37\x9d\x2c\x9d\x3e\x58\x76\x9b\x2f\x5a\xf3\xfe\xba\xbc\x66\x97\x94\x7b\xe9\xae\xdb\xb5\xec\xe8\x5f\xea\x1d\x66\x35\x84\xae\xbf\xc2\x1c\x73\x41\x65\xf3\x07\x98\x41\xf1\x02\xf3\xe2\x25\xf9\x25\x9e\x60\xd6\xc6\xee\xc2\x37\x75\x7a\x9f\xb1\x28\x56\xc5\x13\xf6\x90\x8c\x62\x21\x90\xa9\x20\xe9\x13\x60\x09\xb9\xc5\xc4\xb9\x83\x20\x46\x49\x40\x20\xb9\x83\x80\xce\x89\x8f\xc2\x36\x00\x6b\x71\xb6\x5d\x19\xda\x42\xbb\x8d\x24\xfb\x7c\x19\xa9\x4c\x4c\x1d\x67\x44\x9a\x9c\x22\x6e\xf7\x4a\xd5\xa8\x32\x5d\xc4\x2a\x8a\xd5\xd6\x41\xb3\xdd\xa1\x53\x1a\xe2\x89\x54\x34\x04\xd5\xa0\xda\xd9\x0e\xb6\x0d\x93\x25\x93\x17\x9f\x30\xf6\xf4\x61\x69\xa3\x26\x9b\x7b\x57\x60\xb1\x07\xae\x8a\x05\x8a\xe6\x54\x57\x18\x04\x13\x1f\xa2\x16\x8c\x52\x92\xd3\x2a\x3c\xef\x1c\xad\xf0\xab\x76\xf0\xe3\xe6\xf0\x73\x58\xbe\xe3\x41\x0b\x3c\x65\xad\xf0\x6f\xb8\x52\x3c\x5c\x79\xb7\x0d\x4d\x4b\x13\xbd\x6f\x07\xff\xd0\x0e\x7e\xdd\x1c\x3e\xe2\xc1\x84\x7e\x6b\xa1\xee\x25\xbf\x6f\x47\x70\x8a\x74\xe1\xab\x96\xe6\xb9\xf0\x3c\x89\x2d\x89\x3e\xec\x42\xf4\x7e\xa2\x40\xb4\x65\xb4\x03\xcd\x75\x4b\x9a\x93\xa5\x12\x50\x85\xe7\x65\x65\xdb\x93\xd7\xc1\xc3\xc1\x7f\x01\x00\x00\xff\xff\x7c\xed\x25\xfd\x01\x21\x00\x00")

func workflowSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_workflowSchemaJson,
		"workflow.schema.json",
	)
}

func workflowSchemaJson() (*asset, error) {
	bytes, err := workflowSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "workflow.schema.json", size: 8449, mode: os.FileMode(0640), modTime: time.Unix(1556639391, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x46, 0x45, 0x7, 0x3e, 0xa4, 0x52, 0xd9, 0x6, 0xdd, 0xb7, 0xdf, 0x33, 0xcc, 0xcf, 0xc3, 0x80, 0xd2, 0x95, 0xf8, 0x63, 0x66, 0x40, 0x17, 0xc, 0x49, 0x9e, 0x2a, 0x7e, 0xeb, 0x51, 0xca, 0x69}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"workflow.schema.json": workflowSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"workflow.schema.json": &bintree{workflowSchemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
