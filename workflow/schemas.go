// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/workflow.schema.json (12.231kB)

package workflow

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _workflowSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x5b\x73\xd3\x38\x14\x7e\xef\xaf\xd0\x84\xce\x70\xd9\x5c\x98\x7d\xd9\xd9\xbe\x41\x1a\xa0\x3b\x5b\xc8\x36\x19\xae\x53\x18\xc5\x3e\x89\x45\x6d\xc9\x48\x72\xa9\x61\xfb\xdf\x77\xec\xd8\xb2\x93\x48\xb6\xd4\x3a\x94\x25\x0f\x9d\xc6\x3a\x47\xe7\x7e\xf4\xf9\x28\xdf\x0f\x10\x42\xa8\x77\x48\xfc\xde\x11\xea\x05\x52\xc6\xe2\x68\x34\xc2\x54\x06\x78\xe8\xb1\x68\xf4\x95\xf1\x8b\x65\xc8\xbe\x8a\x81\xf0\x02\x88\x70\xaf\x5f\x30\x14\x5f\x0b\xa6\xa3\xd1\xe8\xb3\x60\xb4\x20\x1a\x32\xbe\x1a\xf9\x1c\x2f\xe5\xe0\xf1\x1f\xa3\xf5\xb3\x7b\x25\xa7\x0f\xc2\xe3\x24\x96\x84\xd1\x8c\xfb\xaf\xd9\xab\x97\x68\x96\x93\xa0\x25\xe3\x68\xbd\xbc\x20\x74\x85\x94\xec\x92\x55\xa6\x31\x64\x3c\x6c\xf1\x19\x3c\x59\x3e\xe5\xf0\x25\x21\x1c\x32\x03\x3e\xe4\x4f\xf2\xa7\xeb\x2d\x5f\x03\x17\x99\xa0\xfc\xf9\x79\xc1\x80\x7d\x9f\x64\xe2\x71\x38\xe5\x2c\x06\x2e\x09\x88\xde\x11\x5a\xe2\x50\x40\x41\x12\xd7\x17\xbe\x57\xbb\xbe\x29\x54\x3a\xf1\x37\x9e\x6f\x68\x27\x24\x27\x74\x55\x68\xa7\x56\x63\x2c\x25\xf0\xdc\xe4\x8f\x1f\xf0\xe0\xdb\x93\xc1\xfb\xc7\x83\x3f\x3f\xa1\xc1\xf9\xa3\xc3\x9e\x22\xbd\xae\xb8\x7a\xa7\x20\xb1\x51\xca\x07\xe5\x04\xd4\xa3\x49\x18\xf6\xce\xb7\xe5\xe9\x2d\x50\xeb\x2f\x71\x04\xda\x15\x9d\x2d\x3b\x44\xd7\x07\xfa\x6f\x75\xfd\x4f\xe8\x25\x50\xc9\x78\xba\x3f\x23\xa6\x21\x96\x30\x4f\x63\xc3\x3a\x32\x26\xcd\x0e\x55\x11\x9e\x69\xb3\x40\x45\x3e\x7c\xd4\xb8\x9e\xd3\x1c\x72\x58\x66\x82\xef\x8d\x7c\x58\x12\x9a\xa7\x9c\x18\xc5\xa5\xca\xbb\x4e\x2d\x3f\xd7\xda\x95\xdd\xa7\x36\x41\xd8\x2c\x03\xc7\x9c\x05\x9a\x44\x79\x98\x7e\x1f\x3e\xee\x9d\x6b\xf7\x3f\x83\x98\x09\x22\x19\xd7\xb9\xac\xd9\xf7\x65\x74\xd3\x2c\x15\x0d\x01\xae\x57\xcd\x03\x9e\xc9\x1a\xaa\xde\xf4\xef\x8a\xc8\x20\x59\x64\xff\x3e\x1c\x6d\x7a\xf3\x5a\x5f\x7c\x2d\xd1\x6d\x8a\xaa\x21\x9a\xbc\x34\x3f\xbd\x59\x8d\x4c\x42\x88\x80\xca\x9b\xba\xce\x68\x89\x65\x4d\x60\xce\x71\x6a\x2a\x09\x22\x21\x6a\x29\x03\xbd\x53\x60\x6d\x94\x39\xc9\x35\xa9\xbc\xab\x43\xef\x84\x0a\x89\xa9\xd7\x41\x6d\xb7\xe6\x59\x65\x90\xc7\xa2\x4c\xf7\x6c\xd3\x79\x40\x04\x22\x02\xc9\x00\x10\xc5\x11\x20\xb6\x44\x98\xa2\xc2\x3a\x44\x0a\xf5\xfa\x08\x86\xab\x21\xba\x1f\xa5\x9f\x70\x48\xbe\x24\x4c\xde\x37\x28\x82\x9a\xcf\x81\xdf\x0e\x0d\xde\xba\xeb\x96\x55\x58\x5c\xc6\xa3\x83\xc6\xd5\x14\xed\x31\xa3\x14\xbc\x5c\xf2\x1d\x27\x70\xa9\x52\xa5\x91\x75\x3a\x37\x76\xa3\x76\xfc\xa1\x48\xeb\xd8\x46\xdf\x80\xc7\x8c\x2e\xc9\x6a\x0f\xad\x77\xb3\x14\x6a\x25\x80\x7c\xb8\x24\x1e\x20\x2f\xc4\x42\x68\x7c\xaf\x8e\x0d\x7d\x54\xc6\xe9\x53\xc2\x4c\x21\x7b\x4e\x42\xc1\xe8\x94\xc4\x20\x4f\xf1\x95\x91\x2a\x64\x0b\x1c\x9e\x92\x2b\xe0\x26\x92\x17\x38\x22\xa1\x64\xd4\xb4\xfe\x37\x5e\x78\xa9\x04\xd3\x72\x0e\x2c\xce\x00\xfb\x66\x09\xff\x4c\xc7\x67\xa6\xb5\x59\x80\x2f\x80\x9f\x50\x2f\x59\x60\xc9\x8c\x5b\xcc\xc1\xc3\x9a\x9c\x3a\xef\xe2\x2c\xfb\x58\x73\xd2\xa1\x75\x07\xed\x26\x93\x75\xd9\xa4\x2d\xb4\x75\x26\x8d\xf3\x44\x6a\x14\xd4\x5e\x07\x73\x10\x32\x83\x30\x5d\x60\x4d\xa4\x35\xe1\x94\x5c\xcd\xb1\xb8\x18\x07\xe0\x5d\x18\x68\x2a\x81\xc8\xae\x39\x19\x77\x69\x70\x5a\x54\xd3\xe3\x86\x0d\x49\x0f\x15\x49\x94\x84\x58\x36\xe1\xc4\x5b\x03\xf6\x4a\x86\xe6\x0d\x6a\x5b\x9a\x1e\x95\x56\xb2\xac\xde\xa8\x34\x96\xaa\x1d\x6a\xb0\x78\x47\xa8\x96\x61\x26\x31\x97\xf6\xe4\x13\xea\xdb\x13\x9f\xd0\x63\xc2\xed\xc9\x5f\x25\xd2\x89\x7e\xc2\x39\xe3\x9d\x9d\xa8\x1a\x99\x56\x1e\x37\xe2\xdd\x1d\x3d\xac\x20\x5d\x2b\xe8\x69\xc6\xc1\x6e\x42\x2b\xe1\x4e\xc0\x4b\xb1\x59\x00\x30\x45\xab\xaf\x7c\xb1\xae\x1e\xf0\x27\x6d\x08\xbb\xfe\xd1\xa3\xb2\xf6\x55\x03\xee\x44\x76\xd8\x5c\x91\x3a\xfa\xd6\x1a\xab\x2b\x96\x3a\x50\x99\x6c\x81\x73\x44\x7c\x1d\x44\xd9\x15\xab\xed\x25\x46\x48\x5e\x7e\x1a\x5c\x84\x7e\xaa\x4c\x69\xc7\xee\xca\xa4\x9b\x66\x8b\xd3\xbb\x4b\x13\x04\xfe\x31\x68\x7a\xf3\x28\xea\xab\xb3\xa0\x86\x2e\x0e\x6a\xe2\x7a\x35\xef\x6e\x8e\x04\x6b\x23\x80\x8e\x5f\xe2\x8f\x09\x07\x4f\xbb\xf1\x8e\x00\xe3\x9c\x4e\xd3\x83\x9f\x72\x4c\xbd\xa0\xdb\x3d\xc7\x2c\x8a\x88\xec\x6c\x9e\xd8\x51\x88\x2b\x07\xea\x31\x63\x7d\x50\xd1\x71\xec\xd4\x5c\x2c\xbd\xe5\xa0\xd5\x7c\x88\x4e\xb1\xbc\x4d\x14\xf7\xe2\xf1\x2d\xb3\xfb\x9b\xca\x36\x46\x41\xb5\xa8\x3d\x8c\xc2\xba\x8f\x81\x76\x38\xbf\xbd\x63\x1b\x5c\xb6\xb5\x41\xd1\x5d\xd9\x1f\xb7\x34\x89\x16\xc0\x1b\x66\x35\x0d\xa7\xbb\xb9\xe1\xb8\x8b\xe9\xe2\x58\x90\x3c\x01\x03\x87\xfe\xc5\xb0\x41\x4e\x6f\x8a\x39\x8e\x40\x82\x0d\x18\xee\xf4\xad\xb8\xb5\x78\x54\xa6\x5a\xd5\x49\x6d\x2a\xd5\x71\xc5\xcc\x58\xc2\x35\x75\xa8\xd6\xf5\x90\xc3\x53\xfa\xcc\x81\x47\x84\xe2\xd0\xae\x92\xe6\x98\xaf\xa0\xe1\xe8\xb8\x85\xb4\xfd\xe0\x86\xb5\x77\xfa\x4a\x73\x7d\xb4\x34\x0a\x76\x1c\xa6\x6d\x68\xd7\x69\x7f\x53\x55\xd2\xe9\x3d\x61\x47\x21\xd8\xb6\xbc\xbf\xad\xaf\x3e\x24\xf5\x69\x53\xd7\x50\x2d\xdf\xfa\xa7\xba\xa9\x28\xc7\xb4\xdb\xf7\x14\xc7\x8c\x13\x61\x7f\x45\x31\xa8\x26\x2b\x0f\x1e\xa2\x9f\xe2\x92\x62\x6b\x30\x5d\xc5\xa6\xc9\xee\x13\x1a\x27\xb2\xba\x2f\x1e\xa2\x71\xc2\x39\x50\x19\xa6\x7d\x84\x69\x8a\x2e\x20\x1d\x5d\xe2\x30\x01\x81\x30\x07\x74\x89\x43\xe2\xa3\x00\xb8\x69\x44\xac\xd4\x69\x3b\x2b\x94\x87\xf4\x7e\xfb\x31\x25\xa3\x2f\x88\x8d\x49\x62\xc7\x15\x91\x15\x27\x4f\x6c\xef\x71\x8c\x07\xad\x7e\xf2\x15\x27\xb2\x75\x02\xeb\xb8\xeb\x9c\x44\x30\x11\x92\x44\x58\x5a\xf4\x3b\x13\xec\xb1\x99\xb3\x56\xbf\x00\xe8\xd8\xe5\x65\xab\xb6\x1b\x08\x9e\x62\x9a\x2c\xb1\x27\x13\x0e\x0e\x63\xc4\x37\x10\x86\xb3\x00\xc7\x0e\x82\x32\x96\x17\x9b\xe4\x85\xfb\x8c\xe4\x6f\xdc\xc8\x8f\xed\xc9\x4f\xf1\xd5\x6b\x16\x3a\xd0\x13\xea\x44\xff\x94\x49\xc9\xa2\x32\xba\x2e\x3c\x8e\x2e\x7a\xeb\x46\xfe\xce\x8d\xfc\xbd\x3d\xf9\x98\x85\x33\xf2\xcd\xc1\xdc\x33\xf6\xd5\x8d\xe1\x05\x90\x55\x20\x1d\xdd\xf3\x6a\xb9\x14\xe0\xc8\xf4\xee\x26\x4c\x6f\x35\x97\x02\xad\x82\x6e\xc0\xf3\xde\x91\x67\x72\x25\x39\xde\x24\x2f\xda\x8a\x55\x97\xd2\xce\x9a\xf7\x3e\x24\xb1\xbc\xcb\xd8\x1c\x80\xd8\x31\x3d\x67\x33\xee\xb9\xb1\x3c\xa1\x32\xc0\xce\x5c\x39\xd2\x10\xcf\x08\x84\xfe\xdd\xfd\x34\x6d\x5b\xd3\xdb\xfc\x34\xa3\x38\x70\x7f\x21\x8b\xaa\x19\xc0\x2f\x64\xd4\x31\x96\xf8\xff\x6a\xce\x5e\x5e\x13\x9b\x87\x91\xfd\x7a\x4b\xe8\x6f\x15\x7b\x5f\x53\xc6\x7d\x5d\x25\xf4\x0d\xc9\xd4\xdf\x89\x87\x1e\x82\x1b\x2f\x6a\xee\x14\x1b\xd6\x67\xa6\x76\x1c\x53\x9c\xbd\x4c\xed\xeb\x52\xdf\xfa\x46\x3f\xbf\xe5\x76\xba\xcf\x97\xe0\xd6\xdd\x9f\x91\x10\x84\xd5\xb1\xda\x51\x16\x97\xb9\xab\x9b\x0e\x1e\xac\xff\x5e\x1f\xfc\x17\x00\x00\xff\xff\xa9\x88\xcb\xed\xc7\x2f\x00\x00")

func workflowSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_workflowSchemaJson,
		"workflow.schema.json",
	)
}

func workflowSchemaJson() (*asset, error) {
	bytes, err := workflowSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "workflow.schema.json", size: 12231, mode: os.FileMode(0640), modTime: time.Unix(1558348772, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xab, 0x1e, 0xea, 0x62, 0xb7, 0x42, 0x44, 0xc8, 0x2b, 0xf4, 0x5f, 0xde, 0xbf, 0x86, 0x73, 0x93, 0xb, 0x33, 0xe5, 0x84, 0x3, 0x7d, 0x20, 0xb2, 0xec, 0x9e, 0xc0, 0xee, 0x7d, 0xa8, 0xb3, 0x50}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"workflow.schema.json": workflowSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"workflow.schema.json": &bintree{workflowSchemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
