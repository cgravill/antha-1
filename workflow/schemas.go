// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/workflow.schema.json (6.269kB)

package workflow

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _workflowSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\x38\xa8\x01\xb2\x75\xb6\x94\xed\x65\x98\xdf\x36\xa7\xe8\x3c\x20\x8d\xb1\x18\x1b\xb0\x22\x2d\x68\xe9\x6c\xb1\x11\x49\xf5\x48\x39\xd1\xba\x7c\xf7\x41\xb2\x4c\xcb\x36\xa5\xc8\xb1\xdd\xed\x4d\x22\xef\xff\xdd\xef\x78\xf7\xe5\x0c\x00\xc0\x3b\xe7\x91\x37\x00\x2f\x36\x26\xd5\x83\x20\x60\xd2\xc4\xcc\x0f\x95\x08\x1e\x14\xdd\xcf\x12\xf5\xa0\xfb\x3a\x8c\x51\x30\xaf\x57\x31\x54\xbf\x15\xd3\x20\x08\x3e\x69\x25\x2b\x22\x5f\xd1\x3c\x88\x88\xcd\x4c\xff\xf2\xc7\x60\x79\xf6\x6a\xc5\x19\xa1\x0e\x89\xa7\x86\x2b\x59\x70\xff\x76\x7b\xf3\x0e\x6e\x4b\x12\x98\x29\x82\xe5\xf5\x94\xcb\x39\x58\xdd\x2b\x56\x93\xa7\x58\xf0\xa8\xe9\x27\x0c\xcd\xea\x94\xf0\x73\xc6\x09\x0b\x07\xde\x97\x27\xe5\xe9\x52\xe4\x1f\x48\xba\x50\x54\x9e\xdf\x55\x0c\x2c\x8a\x78\xa1\x9e\x25\x63\x52\x29\x92\xe1\xa8\xbd\x01\xcc\x58\xa2\xb1\x22\x49\xeb\x17\x5f\xd6\x52\xff\xac\x4c\x1a\x45\x1b\xe7\x1b\xd6\x69\x43\x5c\xce\x2b\xeb\xec\x6d\xca\x8c\x41\x2a\x5d\xfe\xf0\x9e\xf5\xff\xfe\xb9\xff\xd7\x65\xff\xa7\x8f\xd0\xbf\x7b\x7d\xee\x59\xd2\xa7\x35\x97\x77\x8d\x86\x35\x6b\x91\x59\x92\x6c\xeb\x38\x0f\x95\x10\x28\x4d\x71\x3f\xb9\xb9\xba\x19\x00\x17\x69\x82\xc5\x11\x54\x99\x81\x5f\xd9\x02\xe5\x85\x01\x8d\x28\x41\x49\x04\x35\x03\x13\xa3\x46\xe0\xb2\xf8\x80\x07\x9e\x44\x90\xa3\x71\x1b\x35\x92\x0b\x94\x46\x51\xde\x6c\xd9\x46\x76\xbe\xa6\x6d\x9b\x29\xdf\x33\x3f\x28\x33\x51\x54\x90\xf7\x83\x7f\xe9\xdd\x39\xe5\xff\x8e\xa9\xd2\xdc\x28\xda\x2e\x8b\x0e\xee\x0b\x2e\x37\x8a\xed\xfb\xed\xf2\x58\x5e\xe6\xef\x98\x70\x08\x87\xed\x0a\xfa\x86\x0a\x5b\x7c\x8b\xd3\x7f\xe6\xdc\xc4\xd9\xb4\xf8\xfc\x36\xf0\x36\x78\x9f\xdc\x85\x38\x76\x57\xb8\x25\xf3\x5f\x3b\xcf\x97\xb9\x24\x9c\x15\x66\xbc\x0a\x22\x9c\x71\x59\x82\x49\x07\xb4\x0a\x4f\xee\xed\xb0\x3d\x9d\xb9\xff\xea\xe1\x7d\xb3\xac\x86\xbd\x43\xdb\x80\x55\x7b\x3f\xc9\xd3\x86\xab\x0d\xe1\x8c\x88\xe5\x5b\xb2\x2d\x91\xe0\x72\x64\x50\x38\x32\x67\x49\x78\x75\xef\x56\x03\xcd\x71\xc3\xa5\xdf\x85\x99\xbb\x81\x83\x9d\xe0\xc1\x6e\x4e\x61\x89\x4c\x6d\x98\x0c\xbb\xb8\xea\x8c\x63\xdd\xd7\xb6\x52\xb5\x74\xcf\x97\xec\xda\xf1\x1d\xf0\x87\x4a\xce\x38\x09\x30\x31\xd7\x40\x38\xc7\x47\x1f\x26\xc5\x37\xd7\x25\xd2\x25\x13\x25\xfc\x99\x84\x2a\x3e\xc0\x2b\x07\x7b\x80\xfe\xdc\x87\x0b\x91\x7f\x64\x09\xff\x9c\x29\x73\xd1\xe0\x0a\xb4\x37\xde\xef\xce\x1b\xe2\xdd\xe4\x70\x27\xe4\x58\xf2\x16\x04\xad\x03\xd3\x56\x11\xab\x8c\xba\xad\x04\x67\x65\xb8\x4f\x5b\xeb\x65\xa8\xa4\xc4\xb0\xd4\x7c\x20\x4a\x0e\x85\xc0\xca\xa4\xb5\x45\x9d\x01\xd1\xda\xf2\x9e\x7f\xf0\x2d\x69\x7d\x98\xa8\x3a\x47\xaf\x8e\x2d\xf7\xcb\x30\x2c\xaa\x79\xfe\xc2\xc6\xd5\xd6\xf3\x1d\xc0\x89\x31\xbc\x7f\x1e\x36\x10\xe1\x82\x87\x08\x61\xc2\xb4\x5e\x21\xe6\x2d\x4f\xb4\x92\x63\x9e\xa2\xb9\x66\x8f\x17\x3e\x8c\x0c\x08\x96\xc3\x14\x4b\xe6\x90\xe9\xe2\x83\x99\x12\x75\x32\x13\x85\xd4\x94\x70\x86\xc4\xa6\x09\xfa\x8e\xb4\x37\xa1\x6b\x17\x5c\x2f\x7c\x86\x3e\xbc\x4d\xd4\x94\x25\xd7\xfc\x11\xe9\xbc\x73\x67\x3b\x4e\x7d\xb8\xf2\xe1\x2c\xdf\x65\xac\x87\x45\xa8\xdb\x9d\xae\x57\x57\xad\x92\xce\x6a\xb4\x5e\x4d\xf0\xe6\xec\x59\x7b\x5f\x8f\xfc\x42\x5e\x71\xc2\xd0\x29\x78\x47\x41\x35\x3c\x75\xea\x30\xbf\x10\x93\x61\x7c\x5c\x99\x43\x25\x04\x37\x07\xc8\x3c\x49\xa3\x58\x07\xd0\xdd\x1f\xea\x4f\xfc\x91\x73\x67\x87\xd2\xb2\x8d\x1c\x37\xd8\xd5\x44\x36\x66\xe6\x90\x2c\x9e\x24\xe2\x5b\x6e\xf7\x36\x8d\x6d\xcd\x82\x7d\x56\x8f\x9c\x89\x37\xeb\x24\x1f\x3f\x15\xce\x65\xb0\x9b\xe1\x5d\x1d\xb0\x74\x8f\xcf\xcf\x2d\xeb\x2d\x54\x4c\x91\x5a\x06\x94\x96\xc1\xac\xb9\xdb\xec\xaf\x66\xaf\x39\xae\xa1\xe6\x0c\x65\xd8\xc0\xe1\xee\xdb\x2d\x7a\xbc\x31\x23\x26\xd0\x20\x75\x1f\xc7\xbf\x12\x72\xb6\xcb\xb4\x13\x56\x6a\x13\xd9\x91\x51\x73\xab\x32\x72\x60\xd1\xde\xbb\x5f\xdc\xd0\xda\x33\x41\x12\x5c\xb2\xa4\x1b\x8c\x26\x8c\xe6\xd8\xf2\x7c\x1c\xa0\xed\x24\xc9\xaa\xa2\xd3\xb3\x96\xbb\xb3\xe5\x30\xf0\x34\xcd\xad\xb1\x77\xee\xa8\xd9\xa7\xb9\x59\xb0\x1c\xd8\x37\x4f\x89\x17\xeb\x79\x6f\xdb\x5e\x77\x4a\xea\x33\xe1\xb1\xc7\xb5\x52\xf4\xc1\x7b\xfe\x61\xfb\xfb\x7e\x6b\xc8\xf6\xee\x7e\xa5\x88\xeb\x97\xac\xed\xff\x8f\xad\xbd\x1e\x8e\x18\x61\x9d\xb0\x36\xa7\x47\x32\xcd\xcc\x38\x61\x06\xcb\xbd\xd2\x87\x61\x46\x84\xd2\x24\x79\x0f\x98\xcc\xe1\x1e\xf3\x60\xc1\x92\x0c\x35\x30\x42\x58\xb0\x84\x47\x10\x23\x61\x4b\x98\xa0\xcb\x3b\x62\x23\xf4\x5f\x2e\xd3\x3b\xeb\xce\xd9\xd3\xd9\xbf\x01\x00\x00\xff\xff\x32\x52\xc7\xf5\x7d\x18\x00\x00")

func workflowSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_workflowSchemaJson,
		"workflow.schema.json",
	)
}

func workflowSchemaJson() (*asset, error) {
	bytes, err := workflowSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "workflow.schema.json", size: 6269, mode: os.FileMode(0640), modTime: time.Unix(1554815819, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x10, 0x37, 0x75, 0xe9, 0x61, 0x62, 0x47, 0x82, 0x92, 0x2d, 0x89, 0xa3, 0x94, 0x8a, 0x5c, 0x97, 0x92, 0xdf, 0x1a, 0x84, 0xb, 0xef, 0xc7, 0x17, 0x56, 0x40, 0xd0, 0xdb, 0x5, 0x65, 0xaa, 0x4e}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"workflow.schema.json": workflowSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"workflow.schema.json": &bintree{workflowSchemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
