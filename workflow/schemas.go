// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/workflow.schema.json (6.906kB)

package workflow

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _workflowSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\x38\xa8\x01\xb2\x75\xb6\x14\xec\x65\x58\xde\x36\x27\xe8\x32\x20\x8d\xb1\x18\x1b\xb0\x22\x2d\x68\xf9\x6c\xb1\x11\x49\x95\xa4\x92\x68\x99\xbf\xfb\x40\x59\xa6\x2c\x8b\x92\x65\x47\x6e\xe7\x27\x99\xbc\xff\x77\xbf\xe3\x91\x2f\x27\x00\x00\xde\x29\x9d\x79\x17\xe0\x45\x5a\x27\xea\x22\x08\x08\xd7\x11\xf1\x43\xc1\x82\x27\x21\x1f\xe6\xb1\x78\x52\x43\x15\x46\xc8\x88\x37\x28\x18\x8a\xbf\x05\xd3\x45\x10\x7c\x56\x82\x17\x44\xbe\x90\x8b\x60\x26\xc9\x5c\x0f\xcf\x7f\x0a\x56\x6b\x6f\xd6\x9c\x33\x54\xa1\xa4\x89\xa6\x82\x1b\xee\xdf\xef\x6e\xdf\xc3\x5d\x4e\x02\x73\x21\x61\xb5\x3d\xa5\x7c\x01\x56\xf7\x9a\x55\x67\x09\x1a\x1e\x31\xfd\x8c\xa1\x5e\xaf\x4a\xfc\x92\x52\x89\xc6\x81\x0f\xf9\x4a\xbe\xba\x12\xf9\x27\x4a\x65\x14\xe5\xeb\xf7\x05\x03\x99\xcd\xa8\x51\x4f\xe2\xb1\x14\x09\x4a\x4d\x51\x79\x17\x30\x27\xb1\xc2\x82\x24\xd9\xdc\x78\x29\xa5\xfe\x55\x98\x74\x3d\xab\xac\x57\xac\x53\x5a\x52\xbe\x28\xac\xb3\xbb\x09\xd1\x1a\x65\xee\xf2\xc7\x0f\x64\xf8\xcf\x2f\xc3\xbf\xcf\x87\x3f\x7f\x82\xe1\xfd\xdb\x53\xcf\x92\x2e\x4b\x2e\xef\x06\x35\xa9\x6b\x11\x1c\x6f\xe7\x15\x57\xd7\xbf\x17\x6b\x01\x4f\xe3\xd8\x5b\x0e\x5a\x28\x8a\x08\x2e\x2b\x24\xf7\x5b\x26\x9f\x86\x82\x31\xe4\xda\x30\x4c\x6e\x2f\x6f\x2f\x80\xb2\x24\x46\xb3\x04\x45\xa2\xe1\x37\xf2\x88\xfc\x4c\x83\x42\xe4\x20\x38\x82\x98\x83\x8e\x50\x21\x50\x6e\x3e\xe0\x89\xc6\x33\xc8\x50\xbb\x7d\xbc\xe6\x8f\xc8\xb5\x90\x59\x73\x38\x2b\xc9\xfe\x9a\xb6\x55\x2b\x68\xcf\x74\x23\x4f\x99\xc9\x92\xf7\xa3\x7f\xee\xdd\x3b\xe5\xff\x81\x89\x50\x54\x0b\xb9\x5d\x65\x1d\xdc\x2f\xea\x33\x7b\x4f\x98\x83\x19\xb6\x0b\xee\x3b\x69\x74\xf9\x16\xd6\xff\x2e\xa8\x8e\xd2\xa9\xf9\xfc\x3e\xf0\x2a\xbc\x4b\x77\xdd\x8e\xdd\x80\xb0\x64\xfe\x5b\xe7\xfa\x2a\x57\x12\x4d\xc5\x7a\x6f\x82\x19\xce\x29\xcf\xb1\xa7\x02\xb9\x76\x3f\xf3\x6a\x6c\xd5\xba\x5c\x3a\xc3\x77\xb5\xca\xf6\xa1\xa1\x6b\xf4\x64\x92\x25\x0d\x5b\x15\xe1\x44\x4a\x92\x79\x75\x8c\xe5\x44\x54\x23\x6b\x96\xd1\x12\x14\x5c\x39\x65\x6c\xa8\x47\xa5\x1e\x19\xa8\x27\x0c\x56\xb0\x52\x9a\xf0\xb0\x8b\x1f\xce\x20\x59\xaa\xdd\x75\x56\x3a\x54\x43\x64\x28\xf8\x9c\x4a\x06\x3a\xa2\x0a\x24\x2e\xf0\xd9\x87\x89\xf9\xa6\x2a\x87\x1f\x27\x2c\xc7\x24\xe1\x50\xf8\x0d\xb4\x30\x7c\x00\xe8\x2f\x7c\x38\x63\xd9\x27\x12\xd3\x2f\xa9\xd0\x67\x0d\x26\x42\x7b\x73\xfd\xe1\xb4\x21\x8e\x4d\x0e\x77\x2a\x77\x4b\xde\x52\xf6\x65\x60\xda\x32\xbd\xce\x94\xdb\x4a\x70\x66\xdc\xbd\xda\x5a\x07\x23\xc1\x39\x86\xb9\xe6\x6f\x5c\xda\x6b\x93\x4a\x8b\x3a\x17\x7a\x6b\x9f\xda\x7d\xa8\x5b\xd2\xcd\x81\xc1\xdd\x9a\x47\xa6\x72\x17\x47\x68\xca\x0e\x90\x44\x18\x3e\xec\x86\x08\xcc\xf0\x91\x86\x08\x61\x4c\x94\x5a\xa3\xe3\x1d\x8d\x95\xe0\x63\x9a\xa0\xbe\x21\xcf\x67\x3e\x5c\x6b\x60\x24\x83\x29\xe6\xcc\x21\x51\xe6\x83\xe8\x1c\x61\x3c\x65\x46\x6a\x22\x71\x8e\x92\x4c\x63\xf4\x1d\x29\x6e\x42\x52\x1d\x48\x07\x9e\x13\x1f\xdf\xc5\x62\x4a\xe2\x1b\xfa\x8c\xf2\xb4\x73\x77\xea\xa7\x16\x5c\xf9\x70\x96\xea\x2a\xd6\x23\x13\xea\x76\xa7\x77\x57\xd2\x04\x95\x36\xe3\xc1\x81\xa5\x64\x0c\x07\xa7\xe5\x37\xf4\x79\x42\xd4\xc3\xc8\x94\x4f\x03\x4d\xa9\x07\xba\xa1\xba\x51\x4a\x4b\xac\xd8\x86\x1d\x07\x22\xf9\xa4\xfa\xb5\xb4\x17\x05\xab\xa5\x3a\x84\x6f\x4c\x0e\x3d\x9f\xfd\x97\x54\x62\xe8\x14\x5c\x53\x50\x8c\x7d\x9d\xda\xf0\xaf\x92\xf0\x30\xea\x57\xe6\x48\x30\x46\xf5\x2b\x64\x1e\xa3\x9b\x6e\x04\xd0\x0d\x87\xcd\xf9\xa6\xe7\xdc\xd9\x71\x3a\xef\xbf\xfd\x06\xbb\x98\x35\xc7\x44\xbf\x26\x8b\x47\x89\xf8\x96\xdb\x83\xaa\xb1\xad\x59\xb0\xb3\x47\xcf\x99\xb8\x2a\x93\xdc\x7f\x2a\x9c\xb7\xe2\x6e\x86\x77\x75\xc0\xd2\x3d\xef\x1e\xee\xca\x2b\x37\x9b\xa2\x6c\x99\xe2\x5a\xa6\xd7\xe6\x6e\xb3\xbf\x9a\xbd\x86\xdd\x86\x9a\xd3\x32\xc5\x06\x0e\xf7\x81\xd7\xa2\xc7\x1b\x13\x49\x18\x6a\x94\xdd\xef\x22\x5f\x09\x39\xdb\x65\xda\x09\x2b\x1b\x63\x6b\xcf\xa8\xb9\x13\xa9\x74\x60\xd1\xee\xbb\x8f\xdf\xd0\xda\x33\x41\xc9\x28\x27\x71\x37\x18\x4d\x88\x5c\x60\xcb\xf1\xf1\x0a\x6d\x47\x49\x56\x11\x9d\x81\xb5\xdc\x9d\x2d\x87\x81\xc7\x69\x6e\x8d\xbd\xb3\xa6\x66\x9f\xe6\x66\xc1\xf2\xca\xbe\x79\x4c\xbc\x58\xcf\x07\xdb\xf6\xba\x53\xb2\x39\x4c\xf7\x3d\xae\xe5\xa2\xbf\xf1\x23\xc7\x7e\xf7\xb7\xed\x07\x8e\x4b\x21\xa9\x3a\xe4\x6d\xe3\xff\xf1\xb4\xb1\x19\x8e\x08\xa1\x4c\x58\x9b\xd3\xd7\x3c\x49\xf5\x38\x26\x1a\xf3\xb7\x36\x1f\x46\xa9\x94\xc8\x75\x9c\x0d\x80\xf0\x0c\x1e\x30\x0b\x1e\x49\x9c\xa2\x02\x22\x11\x1e\x49\x4c\x67\x10\xa1\xc4\x96\x30\x41\x97\x73\xc4\x46\xe8\xb0\x7b\xca\x31\x5f\x1c\x2a\xd7\xa8\x9e\x61\x62\x10\x2b\xd3\xf2\xf5\x07\xda\xc1\xb2\xba\x28\x76\xea\x57\xb7\xa9\x4e\x52\xbd\xf3\xfa\xb9\x9f\xd0\x09\x65\x78\xa5\x34\x65\x44\x77\xe8\x81\x4d\x82\xdb\xaf\x98\x27\xcb\x93\xff\x02\x00\x00\xff\xff\x13\xc7\x8e\xb8\xfa\x1a\x00\x00")

func workflowSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_workflowSchemaJson,
		"workflow.schema.json",
	)
}

func workflowSchemaJson() (*asset, error) {
	bytes, err := workflowSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "workflow.schema.json", size: 6906, mode: os.FileMode(0644), modTime: time.Unix(1554979777, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x23, 0xce, 0xd3, 0x8e, 0xa7, 0xf7, 0xf5, 0x6b, 0xaa, 0x45, 0x53, 0xa8, 0x99, 0x8b, 0xfd, 0x52, 0x4c, 0xc4, 0x8a, 0x7e, 0xee, 0x2a, 0x23, 0xe7, 0x6e, 0xfe, 0x4e, 0x5d, 0xff, 0x10, 0x22, 0x8a}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"workflow.schema.json": workflowSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"workflow.schema.json": &bintree{workflowSchemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
