// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/workflow.schema.json (8.49kB)

package workflow

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _workflowSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5b\x53\xdb\x38\x14\x7e\xe7\x57\x68\x52\x66\x7a\xd9\x5c\x98\x7d\xd9\x59\xde\x96\xc0\x2c\xec\x2c\x25\x4b\x32\xa5\x85\xa1\x9d\x13\xe7\x24\x56\x91\x25\x57\x92\x21\x6e\x97\xff\xde\xb1\x71\x14\x3b\x91\x1c\x3b\x38\x6d\xdf\x88\xf4\x9d\xfb\xc5\xe7\x88\x6f\x7b\x84\x10\xd2\xda\xa7\x93\xd6\x21\x69\xf9\x5a\x87\xea\xb0\xd7\x03\xae\x7d\xe8\x7a\x22\xe8\x3d\x08\x79\x37\x65\xe2\x41\x75\x94\xe7\x63\x00\xad\x76\x46\x90\xfd\xcc\x88\x0e\x7b\xbd\xcf\x4a\xf0\x0c\xd4\x15\x72\xd6\x9b\x48\x98\xea\xce\xc1\x1f\xbd\xa7\xb3\x17\x0b\xca\x09\x2a\x4f\xd2\x50\x53\xc1\x13\xea\x7f\x86\x17\x6f\xc9\x30\x85\x90\xa9\x90\xe4\xe9\x7a\x4c\xf9\x8c\x18\xd9\x0b\x52\x1d\x87\x98\xd0\x88\xf1\x67\xf4\xf4\xe2\x54\xe2\x97\x88\x4a\x4c\x0c\xb8\x49\x4f\xd2\xd3\x27\x96\xef\x50\xaa\x44\x50\x7a\x7e\x9b\x11\xc0\x64\x42\x13\xf1\xc0\x06\x52\x84\x28\x35\x45\xd5\x3a\x24\x53\x60\x0a\x33\x48\x98\xbf\xf8\xb6\xe4\x7a\x95\xa9\x74\x36\x29\x9c\x17\xb4\x53\x5a\x52\x3e\xcb\xb4\x33\xb7\x21\x68\x8d\x32\x35\xf9\xe3\x0d\x74\xbe\xfe\xd5\xb9\x3e\xe8\xfc\xf9\x89\x74\x6e\xdf\xec\xb7\x0c\xf4\xb1\x9d\xb3\x80\x06\x11\x83\x44\xd1\x1f\x21\xed\x1c\x35\x38\xa5\xdc\x18\x97\x93\x16\x8f\x18\x6b\xdd\xae\xca\xb3\xfb\xcb\xdc\xbf\x85\x00\xad\x37\x36\x5b\xd6\x40\x8f\x7b\xf6\x5f\x79\xfd\xcf\xf8\x3d\x72\x2d\x64\xbc\x3b\x23\x06\x0c\x34\x8e\xe2\xd0\x71\x5f\x30\x05\xa4\x84\x78\x25\x2a\x06\x44\x35\x06\x6e\x1e\x29\x64\x5f\xe2\x34\xe1\xf3\xa2\x37\xc1\x29\xe5\x69\xbe\xaa\x5e\xb8\xd0\x60\xdd\x47\xeb\x7e\x5a\x3f\xb1\x7b\xae\x58\x29\x35\x13\x0d\x79\x14\xa4\xbe\xfd\xbd\x7b\xd0\xba\xb5\xf2\xbf\xc4\x50\x28\xaa\x85\xb4\x39\xd6\x5e\xd3\xe6\x36\x0b\x49\x9c\xe4\x8f\x23\x2a\xf9\x54\x7f\x25\x13\x59\x5d\xd3\xbe\xfe\x9f\x51\xed\x47\xe3\xe4\xcf\xd7\xbd\xa2\xcf\x1e\xed\x15\x33\xd8\x90\x03\xdd\x37\xee\xd8\xdb\x63\x26\x17\xe6\xc7\xdb\x25\xf6\x09\xc3\x00\xb9\xde\xd6\x75\x4e\x4b\x7e\x6a\x22\xe3\x93\x51\xb5\x52\x79\x5d\x87\xd6\x19\x57\x1a\xb8\x57\xc5\x0e\xab\x93\x0c\x6a\x73\x9e\x2d\x0d\xf2\x44\x90\xe8\x9e\x30\x1d\xf9\x54\x11\xaa\x88\xf6\x91\x70\x08\x90\x88\x29\x01\x4e\x32\xeb\x08\xcd\xd4\x6b\x13\xec\xce\xba\xe4\x65\x10\x7f\x02\x46\xbf\x44\x42\xbf\x74\x28\x42\xca\x9b\xf7\x6f\xfb\x0e\x6f\xb9\xcc\xaa\x94\xd4\x06\x5e\x92\xdc\x4b\xf3\xcb\xe2\xb9\x88\x87\x5d\x4b\x62\x8d\xab\xfd\xb4\x34\xda\x7d\xc1\x39\x7a\xa9\xe4\x9f\x9c\xc0\x0b\x95\x96\x1a\x6d\xd9\x99\x57\x8a\x77\xf3\x88\x62\xa0\xf9\xf1\xc7\xde\x80\xfb\x82\x4f\xe9\x6c\x07\xad\xb7\x58\x0a\xb9\x12\x20\x13\xbc\xa7\x1e\x12\x8f\x81\x52\x16\xdf\x9b\xcf\x86\x3d\x2a\xfd\xf8\x88\x0a\x57\xc8\xfe\xa6\x4c\x09\x3e\xa0\x21\xea\x73\x98\x3b\x51\x4c\x8c\x81\x9d\xd3\x39\x4a\x17\xe4\x14\x02\xca\xb4\xe0\xae\xfb\x7f\x61\xec\xc5\x1a\x5d\xd7\xe9\x34\x70\x89\x30\x71\x4b\xf8\x6f\xd0\xbf\x74\xdd\x0d\x7d\xb8\x43\x79\xc6\xbd\x68\x0c\x5a\x38\x59\x8c\xd0\x03\x4b\x4e\xdd\x36\xf1\x2d\xfb\x98\x73\xd2\x7e\xe5\x0e\xda\x4c\x26\xdb\xb2\xc9\x5a\x68\x4f\x99\xd4\x4f\x13\xa9\x54\xd0\xe6\x3a\x18\xa1\xd2\xc9\x08\xf3\xdc\x01\x31\x4e\x4c\x20\x56\x1b\xce\xe9\x7c\x04\xea\xae\xef\xa3\x77\xe7\xc0\x2c\x25\x92\x6a\xdd\xc9\xc9\xa5\xc4\x6b\x41\x4e\x8f\x67\xcf\x8a\xe9\x5f\x8f\x66\x7d\x33\x52\x8a\xab\x51\x6e\xce\x69\x78\x52\x39\xa6\x12\x3d\x2b\xe3\x35\x01\xce\x0d\xc2\xd2\x83\x8e\x24\x70\xcf\x6f\x96\x67\x5f\x04\x01\xd5\x8d\x6d\x3a\xcd\x7c\x15\x72\x0e\xb4\x17\x46\x7e\x1a\x6b\x38\x76\x66\xf8\x8f\x9f\xb9\x02\x5a\x9c\x9d\x4d\xc6\x03\xd0\xcf\x89\xe2\x4e\x3c\xbe\x62\x76\xbb\xa8\x6c\x69\x14\xcc\x0c\xd5\x70\x24\x4e\x96\x41\x6e\x3e\x14\xd6\xd7\x83\x55\x8e\x9b\xfa\x6b\x55\x53\x0c\x6e\xbe\x79\x5c\x5d\x18\xc3\xa3\x60\x8c\xb2\x64\x2e\x2d\x99\xc7\xdd\x7d\xa7\xbe\x98\x5a\xe3\xbb\x23\xfb\xb4\x8c\xd0\x41\x61\xff\x08\x96\xc8\x69\x0d\x40\x42\x80\x1a\x65\xf5\x1d\xea\x07\xd5\xd0\x6a\xc2\x56\xaa\x9a\xdc\x20\xde\x70\xfd\x0c\x45\x24\x2d\x55\x69\xee\xed\x1f\x62\xcf\xe8\x33\x42\x19\x50\x0e\xac\x5a\x41\x8d\x40\xce\xb0\xe4\x43\xf2\x0c\x69\x3b\x09\x56\xe6\x9d\xb6\xd1\xdc\x1e\x2d\x8b\x82\xbb\x69\x73\xce\x2e\xba\x26\xa6\x4e\x9b\x33\xc5\xd2\xe8\x7b\x66\xb3\xf5\x62\x2c\x6f\xaf\xea\x6b\x0f\x49\x7e\xc0\x6e\x7a\x70\x4b\x59\xff\x52\x8f\x33\x8b\xcd\x74\xf5\x69\xe6\x58\x48\xaa\xaa\xbf\xca\x74\x96\xcf\x32\xaf\x5e\x93\x5f\xe2\x5d\x66\x65\x17\x5f\xc6\xa6\xcc\xee\x33\x1e\x46\x7a\xf9\xae\xdd\x25\xfd\x48\x4a\xe4\x9a\xc5\x6d\x02\x3c\x26\x77\x18\xf7\xee\x81\x45\xa8\x08\x48\x24\xf7\xc0\xe8\x84\xf8\x28\x5d\x5b\xb1\x51\x67\xd3\x27\xc3\x78\x68\xbb\xe5\x64\x97\xcf\x25\x85\xdd\xa9\xe1\x8a\x48\x8a\x53\x46\xf5\x9e\xae\x2a\x75\xa6\x8b\x48\x87\x91\xde\xb8\x72\xd6\x63\x3a\xa2\x01\x9e\x28\x4d\x03\xd0\x15\xba\x9d\x8b\xb1\x6b\xad\xcc\xb9\x7c\xf9\x7f\x8d\x86\xfd\xbd\xe8\xd3\x6b\x3d\xd9\x3e\xc5\x02\x8f\xa6\xe0\xe9\x48\xa2\xac\x4e\x75\x85\x8c\x0d\x7d\x08\x6b\x08\x4a\x48\x4e\x8b\xf0\x6c\x72\x74\xc2\xaf\xea\xc1\x8f\xab\xc3\xcf\x61\xfe\x4e\xb0\x1a\x78\xca\x6b\xe1\x8f\x84\xd6\x22\x58\x44\xb7\x0e\x4d\x4d\x17\xbd\xaf\x07\xff\x50\x0f\x7e\x5d\x1d\xde\x17\x6c\x48\xbf\xd6\x30\xf7\x52\x3c\xd4\x23\x38\x45\x3a\xf3\x75\x4d\xf7\x5c\x4c\xa7\x0a\x6b\x12\x7d\xd8\x86\xe8\xfd\x50\x83\xac\x2b\x68\x0b\x9a\xeb\x9a\x34\x27\x73\x2d\xa1\x08\xcf\xda\xca\xa6\xc7\xaf\xbd\xc7\xbd\xef\x01\x00\x00\xff\xff\xfa\xd6\xe5\xb0\x2a\x21\x00\x00")

func workflowSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_workflowSchemaJson,
		"workflow.schema.json",
	)
}

func workflowSchemaJson() (*asset, error) {
	bytes, err := workflowSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "workflow.schema.json", size: 8490, mode: os.FileMode(0640), modTime: time.Unix(1556622868, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x43, 0x82, 0x4c, 0xb4, 0x3f, 0xf7, 0xd1, 0xd8, 0xe5, 0x53, 0x20, 0x14, 0x1b, 0x46, 0xb, 0x3a, 0x81, 0x4, 0xe8, 0xeb, 0x4b, 0x37, 0x1a, 0x9a, 0x6b, 0x3e, 0x8b, 0xac, 0x60, 0x55, 0x8d, 0x6d}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"workflow.schema.json": workflowSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"workflow.schema.json": &bintree{workflowSchemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
