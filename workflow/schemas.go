// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/workflow.schema.json (11.762kB)

package workflow

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _workflowSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5a\x5b\x6f\xdb\x3a\x12\x7e\xcf\xaf\x20\xd4\x00\xbd\x6c\x6c\x17\xfb\xb2\xd8\xbc\xb5\x8e\xb7\xcd\xe2\xa4\xf5\x89\x8d\x5e\x91\x16\x63\x69\x6c\xb1\x91\x48\x95\xa2\xd2\xa8\x3d\xf9\xef\x07\x92\x75\xb3\x4d\x4a\x64\x22\x37\x3d\xf5\x43\x10\x8b\x33\x9c\xfb\xf0\xd3\xd0\x3f\x0e\x08\x21\xc4\x39\xa4\x9e\x73\x4c\x1c\x5f\xca\x28\x3e\x1e\x8d\x80\x49\x1f\x86\x2e\x0f\x47\xdf\xb8\xb8\x5c\x06\xfc\x5b\x3c\x88\x5d\x1f\x43\x70\x8e\x0a\x86\xe2\x6b\xc1\x74\x3c\x1a\x7d\x89\x39\x2b\x88\x86\x5c\xac\x46\x9e\x80\xa5\x1c\x3c\xfd\xcf\x68\xfd\xec\x41\xc9\xe9\x61\xec\x0a\x1a\x49\xca\x59\xc6\xfd\xff\xd9\xeb\x57\x64\x96\x93\x90\x25\x17\x64\xbd\xbc\xa0\x6c\x45\x2a\xd9\x25\xab\x4c\x23\xcc\x78\xf8\xe2\x0b\xba\xb2\x7c\x2a\xf0\x6b\x42\x05\x66\x06\x7c\xcc\x9f\xe4\x4f\xd7\x5b\xbe\x41\x11\x67\x82\xf2\xe7\x17\x05\x03\x78\x1e\xcd\xc4\x43\x30\x15\x3c\x42\x21\x29\xc6\xce\x31\x59\x42\x10\x63\x41\x12\x35\x17\x7e\xd4\xbb\xbe\x2d\x54\x3a\xf5\x36\x9e\x6f\x68\x17\x4b\x41\xd9\xaa\xd0\xae\x5a\x8d\x40\x4a\x14\xb9\xc9\x9f\x3e\xc2\xe0\xfb\xb3\xc1\x87\xa7\x83\xff\x7e\x26\x83\x8b\x27\x87\x4e\x45\x7a\x53\x73\x39\x67\x28\x41\x2b\xe5\x63\xe5\x04\xe2\xb0\x24\x08\x9c\x8b\x6d\x79\x6a\x0b\xaa\xf5\x57\x10\xa2\x72\x45\x65\xcb\x0e\xd1\xcd\x81\xfa\x5b\x53\xff\x53\x76\x85\x4c\x72\x91\xee\xcf\x88\x69\x00\x12\xe7\x69\xa4\x59\x27\xda\xa4\xd9\xa1\x2a\xc2\x33\x6d\x17\x58\x91\x0f\x9f\xb4\xae\xe7\x34\x87\x02\x97\x99\xe0\x07\x23\x0f\x97\x94\xe5\x29\x17\x8f\xa2\x52\xe5\x5d\xa7\x96\x9f\x1b\xe5\xca\xee\x53\x93\x20\x6c\x96\x81\x65\xce\x22\x4b\xc2\x3c\x4c\xff\x1e\x3e\x75\x2e\x94\xfb\x9f\x63\xc4\x63\x2a\xb9\x50\xb9\xac\xdd\xf7\x65\x74\xd3\x2c\x15\x35\x01\x6e\x56\xcd\x23\x91\xc9\x1a\x56\xbd\xe9\xaf\x15\x95\x7e\xb2\xc8\xfe\x7d\x3c\xda\xf4\xe6\x8d\xba\xf8\x3a\xa2\xdb\x16\x55\x4d\x34\x45\x69\x7e\x7a\xbb\x1a\x99\x04\x18\x22\x93\xb7\x75\x9d\xd6\x12\xc3\x9a\x00\x21\x20\xd5\x95\x04\x95\x18\x76\x94\x81\xda\x29\xb8\x36\x4a\x9f\xe4\x8a\x54\xde\xd5\xc1\x39\x65\xb1\x04\xe6\xf6\x50\xdb\x9d\x79\x56\x1b\xe4\xf2\x30\xd3\x3d\xdb\x74\xee\xd3\x98\xd0\x98\x48\x1f\x09\x83\x10\x09\x5f\x12\x60\xa4\xb0\x8e\xd0\x42\xbd\x23\x82\xc3\xd5\x90\x3c\x0c\xd3\xcf\x10\xd0\xaf\x09\x97\x0f\x35\x8a\x90\xf6\x73\xe0\x5f\x87\x1a\x6f\xdd\x77\xcb\x2a\x2c\x2e\xe3\xd1\x43\xe3\x6a\x8b\xf6\x98\x33\x86\x6e\x2e\xf9\x9e\x13\xb8\x54\xa9\xd6\xc8\x38\x9d\x5b\xbb\x51\x37\xfe\xa8\x48\x9b\xd8\x46\xdd\x80\xc7\x9c\x2d\xe9\x6a\x0f\xad\x77\xb3\x14\x1a\x25\x40\x3c\xbc\xa2\x2e\x12\x37\x80\x38\x56\xf8\xbe\x3a\x36\xd4\x51\x19\xa7\xcf\x29\xd7\x85\xec\x05\x0d\x62\xce\xa6\x34\x42\x79\x06\xd7\x5a\xaa\x80\x2f\x20\x38\xa3\xd7\x28\x74\x24\x2f\x21\xa4\x81\xe4\x4c\xb7\xfe\x07\x2c\xdc\x54\xa2\x6e\x39\x07\x16\xe7\x08\x9e\x5e\xc2\x9f\xd3\xf1\xb9\x6e\x6d\xe6\xc3\x25\x8a\x53\xe6\x26\x0b\x90\x5c\xbb\xc5\x1c\x5d\x50\xe4\xd4\x45\x1f\x67\xd9\xa7\x86\x93\x0e\x8d\x3b\x68\x3f\x99\xac\xca\x26\x65\xa1\xad\x33\x69\x9c\x27\x52\xab\xa0\xee\x3a\x98\x63\x2c\x33\x08\xd3\x07\xd6\x24\x4a\x13\xce\xe8\xf5\x1c\xe2\xcb\xb1\x8f\xee\xa5\x86\xa6\x16\x48\xcc\x9a\x93\x76\x97\x16\xa7\x85\x0d\x3d\x6e\xd9\x90\xd4\x50\x91\x86\x49\x00\xb2\x0d\x27\xde\x19\xb0\xd7\x32\x14\x6f\x50\xdb\xd2\xd4\xa8\xb4\x96\x65\xf4\x46\xa5\xb0\xb4\xda\xa1\x01\x8b\x77\x84\x2a\x19\x66\x12\x84\x34\x27\x9f\x30\xcf\x9c\xf8\x94\x9d\x50\x61\x4e\xfe\x3a\x91\x56\xf4\x13\x21\xb8\xe8\xed\x44\x55\xc8\x34\xf2\xb8\x16\xef\xee\xe8\x61\x04\xe9\x3a\x41\x4f\x3b\x0e\xb6\x13\x5a\x0b\xb7\x02\x5e\x15\x9b\x01\x00\xab\x68\xd5\x95\x1f\xaf\xab\x07\xbd\x49\x17\xc2\x6e\x7e\xd4\xa8\xac\x7b\x55\x83\x3b\x89\x19\x36\xaf\x48\x2d\x7d\x6b\x8c\xd5\x2b\x96\x26\x50\x99\x6c\x81\x73\x42\x3d\x15\x44\xd9\x15\xab\xec\x25\x5a\x48\x5e\x7e\x5a\x5c\x44\x7e\xa9\x4c\xe9\xc6\xee\x95\x49\xb7\xcd\x16\xab\x77\x97\x36\x08\xfc\xd3\xd1\xf4\x41\x63\x5b\xa7\xe1\xc5\xcd\xd1\x5f\xe3\x55\xbf\xe7\x97\xf5\x13\x2a\xd0\x55\x6e\xbc\x23\x40\x3b\x8f\x53\xf4\xda\xe7\x02\x98\xeb\xf7\xbb\xe7\x98\x87\x21\x95\xbd\xcd\x0d\xfb\x09\x65\xc3\x81\x6a\x6c\xd8\x1c\x48\xf4\x1c\xbb\x6a\xfe\x95\xde\x71\xa0\xaa\x3f\x2c\xa7\x20\xef\x12\xc5\xbd\x78\x7c\xcb\xec\xa3\x4d\x65\x5b\xa3\x50\xb5\xa2\x9e\x23\xd1\x38\x13\xfb\x0f\x85\x72\x16\xbf\xbd\x63\x17\x3a\x36\x35\xa5\xa2\xbb\x36\x3f\x5d\x59\x12\x2e\x50\xb4\x8c\x66\x5a\x0e\x73\x7d\xdf\xb1\x17\xd3\xc7\x29\x20\x45\x82\x1a\x0e\x75\x07\x6f\x91\xe3\x4c\x41\x40\x88\x12\x4d\xb0\x6f\xaf\x2f\xc1\x9d\x35\xb4\x9d\xb0\x46\x55\xd3\x98\x45\xf5\x5c\x3f\x33\x9e\x08\x45\x55\x56\xeb\x6a\xa0\xe1\x56\xfa\xcc\x51\x84\x94\x41\x60\x56\x50\x73\x10\x2b\x6c\x39\x48\xee\x20\x6d\x2f\xc1\x2a\xbc\x73\x54\x69\xae\x8e\x96\x42\xc1\xfd\xb4\x39\x6d\x17\xdd\x11\x63\xd3\xe6\xaa\x62\xe9\xf5\x76\xb0\xdf\x7a\xa9\x2c\x3f\xda\xd6\x57\x1d\x92\xe6\x8c\xa9\x6f\xe0\x96\x6f\xfd\x4b\xdd\x4f\x94\xc3\xd9\xed\xdb\x89\x13\x2e\x68\x6c\x7e\x31\x31\xa8\xe7\x29\x8f\x1e\x93\x5f\xe2\x6a\x62\x6b\x1c\x5d\xc7\xa6\xcd\xee\x53\x16\x25\xb2\xbe\x25\x1e\x92\x71\x22\x04\x32\x19\xa4\x47\x04\x58\x4a\x2e\x31\x1d\x5d\x41\x90\x60\x4c\x40\x20\xb9\x82\x80\x7a\xc4\x47\xa1\x1b\x0c\x57\xea\x74\x1d\x19\x95\x87\xd4\x7e\xfb\xe9\xef\x38\x8d\x82\xd8\x98\x1f\xf6\x5c\x11\x59\x71\x8a\xc4\xf4\xf6\x46\x7b\xde\xaa\xe7\x5d\x51\x22\x3b\xe7\xae\x96\xbb\xce\x69\x88\x93\x58\xd2\x10\xa4\x41\xbf\xd3\xa1\x1f\x93\xe9\x6a\x7d\xef\xdf\xb3\xcb\xcb\x56\x6d\x36\x06\x3c\x03\x96\x2c\xc1\x95\x89\x40\x8b\xe1\xe1\x5b\x0c\x82\x99\x0f\x91\x85\xa0\x8c\xe5\xe5\x26\x79\xe1\x3e\x2d\xf9\x5b\x3b\xf2\x13\x73\xf2\x33\xb8\x7e\xc3\x03\x0b\x7a\xca\xac\xe8\x9f\x73\x29\x79\x58\x46\xd7\x86\xc7\xd2\x45\xef\xec\xc8\xdf\xdb\x91\x7f\x30\x27\x1f\xf3\x60\x46\xbf\x5b\x98\x7b\xce\xbf\xd9\x31\xbc\x44\xba\xf2\xa5\xa5\x7b\x5e\x2f\x97\x31\x5a\x32\xbd\xbf\x0d\xd3\x3b\xc5\x55\x40\xa7\xa0\x5b\xf0\x7c\xb0\xe4\x99\x5c\x4b\x01\x9b\xe4\x45\x5b\x31\xea\x52\xda\xb9\xe1\xbd\x36\xad\xe6\x3b\xbd\x19\xc7\x14\xb2\x53\x7e\x5f\x77\x4c\xc6\x17\x4c\xf9\xa5\x8b\xd5\xf5\x92\xc4\x72\xdc\xd3\x75\xc5\x62\x16\xc0\x7d\x9c\x38\x2f\xf8\x4c\xb8\x2d\x6a\x2a\x2c\x7b\xc6\xa4\x0f\xd6\x5c\x39\x7a\x8b\xff\x47\x31\xf0\xee\xef\x47\x7e\xdb\x9a\xde\xe5\x47\x2e\x05\x88\xf9\x8d\x2c\xaa\xc7\x2b\xbf\x91\x51\x27\x20\xe1\x9f\x6a\x8e\xae\x47\x1c\xac\xff\xde\x1c\xfc\x1d\x00\x00\xff\xff\x0f\x4e\x2b\x5e\xf2\x2d\x00\x00")

func workflowSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_workflowSchemaJson,
		"workflow.schema.json",
	)
}

func workflowSchemaJson() (*asset, error) {
	bytes, err := workflowSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "workflow.schema.json", size: 11762, mode: os.FileMode(0640), modTime: time.Unix(1558104735, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf7, 0x58, 0xd9, 0x9d, 0x9b, 0x6f, 0x7f, 0xe0, 0x42, 0x58, 0x6c, 0x24, 0xd6, 0x61, 0x33, 0x51, 0x64, 0xdc, 0x58, 0x51, 0xee, 0xc0, 0x89, 0x6b, 0x9a, 0x7b, 0x2d, 0xbe, 0x98, 0x4c, 0x84, 0x4e}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"workflow.schema.json": workflowSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"workflow.schema.json": &bintree{workflowSchemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
