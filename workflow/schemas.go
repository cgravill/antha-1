// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/workflow.schema.json (8.492kB)
// schemas/workflow.schema.json.orig (8.692kB)

package workflow

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _workflowSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\x5b\x53\xdb\x38\x14\x7e\xe7\x57\x68\x52\x66\x7a\xd9\x5c\x98\x7d\xd9\x59\xde\x96\xc0\x2c\xec\x2c\x25\x4b\x32\xa5\x85\xa1\x9d\x13\xe7\x24\x56\x91\x25\x57\x92\x21\x6e\x97\xff\xde\xb1\x71\x14\x3b\x91\x1c\x3b\x38\x6d\xdf\x62\xe9\x3b\xf7\x8b\x8e\x94\x6f\x7b\x84\x10\xd2\xda\xa7\x93\xd6\x21\x69\xf9\x5a\x87\xea\xb0\xd7\x03\xae\x7d\xe8\x7a\x22\xe8\x3d\x08\x79\x37\x65\xe2\x41\x75\x94\xe7\x63\x00\xad\x76\x46\x90\x7d\x66\x44\x87\xbd\xde\x67\x25\x78\x06\xea\x0a\x39\xeb\x4d\x24\x4c\x75\xe7\xe0\x8f\xde\xd3\xda\x8b\x05\xe5\x04\x95\x27\x69\xa8\xa9\xe0\x09\xf5\x3f\xc3\x8b\xb7\x64\x98\x42\xc8\x54\x48\xf2\xb4\x3d\xa6\x7c\x46\x8c\xec\x05\xa9\x8e\x43\x4c\x68\xc4\xf8\x33\x7a\x7a\xb1\x2a\xf1\x4b\x44\x25\x26\x06\xdc\xa4\x2b\xe9\xea\x13\xcb\x77\x28\x55\x22\x28\x5d\xbf\xcd\x08\x60\x32\xa1\x89\x78\x60\x03\x29\x42\x94\x9a\xa2\x6a\x1d\x92\x29\x30\x85\x19\x24\xcc\x6f\x7c\x5b\x72\xbd\xca\x54\x3a\x9b\x14\xd6\x0b\xda\x29\x2d\x29\x9f\x65\xda\x99\xdd\x10\xb4\x46\x99\x9a\xfc\xf1\x06\x3a\x5f\xff\xea\x5c\x1f\x74\xfe\xfc\x44\x3a\xb7\x6f\xf6\x5b\x06\xfa\xd8\xce\x59\x40\x83\x88\x41\xa2\xe8\x8f\x90\x76\x8e\x1a\x9c\x52\x6e\x8c\xcb\x49\x8b\x47\x8c\xb5\x6e\x57\xe5\xd9\xfd\x65\xf6\xdf\x42\x80\xd6\x1d\x9b\x2d\x6b\xa0\xc7\x3d\xfb\x57\x5e\xff\x33\x7e\x8f\x5c\x0b\x19\xef\xce\x88\x01\x03\x8d\xa3\x38\x74\xec\x17\x4c\x01\x29\x21\x5e\x89\x8a\x01\x51\x8d\x81\x9b\x47\x0a\xd9\x97\x38\x4d\xf8\xbc\xe8\x4d\x70\x4a\x79\x9a\xaf\xaa\x17\x2e\x34\x58\xf7\xd1\xba\x9f\xd6\x57\xec\x9e\x2b\x56\x4a\xcd\x44\x43\x1e\x05\xa9\x6f\x7f\xef\x1e\xb4\x6e\xad\xfc\x2f\x31\x14\x8a\x6a\x21\x6d\x8e\xb5\xd7\xb4\xd9\xcd\x42\x12\x27\xf9\xe3\x88\x4a\x3e\xd5\x5f\xc9\x44\x56\xd7\xb4\xaf\xff\x67\x54\xfb\xd1\x38\xf9\xf9\xba\x57\xf4\xd9\xa3\xbd\x62\x06\x1b\x72\xa0\xfb\xc6\x1d\x7b\x7b\xcc\xe4\xc2\xfc\x78\xbb\xc4\x3e\x61\x18\x20\xd7\xdb\xba\xce\x69\xc9\x4f\x4d\x64\x7c\x32\xaa\x56\x2a\xaf\xeb\xd0\x3a\xe3\x4a\x03\xf7\xaa\xd8\x61\x75\x92\x41\x6d\xce\xb3\xa5\x41\x9e\x08\x12\xdd\x13\xa6\x23\x9f\x2a\x42\x15\xd1\x3e\x12\x0e\x01\x12\x31\x25\xc0\x49\x66\x1d\xa1\x99\x7a\x6d\x82\xdd\x59\x97\xbc\x0c\xe2\x4f\xc0\xe8\x97\x48\xe8\x97\x0e\x45\x48\x79\xf3\xfe\x6d\xdf\xe1\x2d\x97\x59\x95\x92\xda\xc0\x4b\x92\x7b\x69\x7e\x59\x3c\x17\xf1\xb0\x6b\x49\xac\x71\xb5\xaf\x96\x46\xbb\x2f\x38\x47\x2f\x95\xfc\x93\x13\x78\xa1\xd2\x52\xa3\x2d\x3b\xf3\x4a\xf1\x6e\x1e\x51\x0c\x34\x3f\xfe\xd8\x1b\x70\x5f\xf0\x29\x9d\xed\xa0\xf5\x16\x4b\x21\x57\x02\x64\x82\xf7\xd4\x43\xe2\x31\x50\xca\xe2\x7b\x73\x6c\xd8\xa3\xd2\x8f\x8f\xa8\x70\x85\xec\x6f\xca\x94\xe0\x03\x1a\xa2\x3e\x87\xb9\x13\xc5\xc4\x18\xd8\x39\x9d\xa3\x74\x41\x4e\x21\xa0\x4c\x0b\xee\xda\xff\x17\xc6\x5e\xac\xd1\xb5\x9d\x4e\x03\x97\x08\x13\xb7\x84\xff\x06\xfd\x4b\xd7\xde\xd0\x87\x3b\x94\x67\xdc\x8b\xc6\xa0\x85\x93\xc5\x08\x3d\xb0\xe4\xd4\x6d\x13\x67\xd9\xc7\x9c\x93\xf6\x2b\x77\xd0\x66\x32\xd9\x96\x4d\xd6\x42\x7b\xca\xa4\x7e\x9a\x48\xa5\x82\x36\xd7\xc1\x08\x95\x4e\x46\x98\x26\x06\x44\x62\x35\xe1\x9c\xce\x47\xa0\xee\xfa\x3e\x7a\x77\x0e\xcc\x52\x20\xa9\xd6\x9c\x9c\x5c\x4a\x9c\x16\xe4\xf4\x78\xf6\xa8\x98\xfe\x7a\x34\xb7\x37\x23\xa5\x78\x33\xca\x8d\x39\x0d\x0f\x2a\xc7\x54\xa2\x67\x65\xbc\x26\xc0\x79\x81\xb0\xb4\xa0\x23\x09\xdc\xf3\x9b\xe5\xd9\x17\x41\x40\x75\x63\x17\x9d\x66\x0e\x85\x9c\x03\xed\x75\x91\x1f\xc6\x1a\x8e\x9d\x99\xfd\xe3\x67\xde\x00\x2d\xce\xce\x06\xe3\x01\xe8\xe7\x44\x71\x27\x1e\x5f\x31\xbb\x5d\x54\xb6\x34\x0a\x66\x84\x6a\x38\x12\x27\xcb\x20\x37\x1f\x0a\xeb\xe3\xc1\x2a\xc7\x4d\xed\xb5\xaa\x29\x06\x37\xdf\x3c\xad\x2e\x8c\xe1\x51\x30\x46\x59\x32\x96\x96\x8c\xe3\xee\xbe\x53\x5f\x4c\xad\xe9\xdd\x91\x7d\x5a\x46\xe8\xa0\xb0\x9f\x81\x25\x72\x5a\x03\x90\x10\xa0\x46\x59\xfd\x0a\xf5\x83\x6a\x68\x35\x61\x2b\x55\x4d\x6e\x0e\x6f\xb8\x7e\x86\x22\x92\x96\xaa\x34\xfb\xf6\x83\xd8\x33\xfa\x8c\x50\x06\x94\x03\xab\x56\x50\x23\x90\x33\x2c\x39\x48\x9e\x21\x6d\x27\xc1\xca\xbc\xd3\x36\x9a\xdb\xa3\x65\x51\x70\x37\x6d\xce\xd9\x45\xd7\xc4\xd4\x69\x73\xa6\x58\x1a\x7d\xce\x6c\xb6\x5e\x8c\xe5\xed\x55\x7d\xed\x21\xc9\xcf\xd7\x4d\x0f\x6e\x29\xeb\x5f\xea\x6d\x66\x71\x31\x5d\x7d\x99\x39\x16\x92\xaa\xea\x8f\x32\x9d\xe5\xab\xcc\xab\xd7\xe4\x97\x78\x96\x59\xb9\x8a\x2f\x63\x53\x66\xf7\x19\x0f\x23\xbd\x7c\xd6\xee\x92\x7e\x24\x25\x72\xcd\xe2\x36\x01\x1e\x93\x3b\x8c\x7b\xf7\xc0\x22\x54\x04\x24\x92\x7b\x60\x74\x42\x7c\x94\xae\x4b\xb1\x51\x67\xd3\x91\x61\x3c\xb4\xdd\xe5\x64\x97\xaf\x25\x85\xbb\x53\xc3\x15\x91\x14\xa7\x8c\xaa\xbe\x5c\x39\xcf\x5b\x4b\x6b\xba\x88\x74\x18\xe9\x8d\x77\xce\x9a\x5c\x47\x34\xc0\x13\xa5\x69\x00\xba\x42\xbf\x73\x4d\x3f\x55\x5e\xb9\x97\xff\x6c\x34\xec\xf2\x45\xab\x5e\x6b\xcb\xf6\x41\x16\x78\x34\x05\x4f\x47\x12\x65\x75\xaa\x2b\x64\x6c\xe8\x43\x58\x43\x50\x42\x72\x5a\x84\x67\xee\x73\xc2\xaf\xea\xc1\x8f\xab\xc3\xcf\x61\xfe\x4e\xb0\x1a\x78\xca\x6b\xe1\x8f\x84\xd6\x22\x58\x44\xb7\x0e\x4d\x4d\x17\xbd\xaf\x07\xff\x50\x0f\x7e\x5d\x1d\xde\x17\x6c\x48\xbf\xd6\x30\xf7\x52\x3c\xd4\x23\x38\x45\x3a\xf3\x75\x4d\xf7\x5c\x4c\xa7\x0a\x6b\x12\x7d\xd8\x86\xe8\xfd\x50\x83\xac\x2b\x68\x0b\x9a\xeb\x9a\x34\x27\x73\x2d\xa1\x08\xcf\xda\xca\xa6\xf7\xaf\xbd\xc7\xbd\xef\x01\x00\x00\xff\xff\x7f\xf9\xb8\x81\x2c\x21\x00\x00")

func workflowSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_workflowSchemaJson,
		"workflow.schema.json",
	)
}

func workflowSchemaJson() (*asset, error) {
	bytes, err := workflowSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "workflow.schema.json", size: 8492, mode: os.FileMode(0640), modTime: time.Unix(1556796525, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfd, 0xe3, 0x99, 0x30, 0xe7, 0xf3, 0xd5, 0x2b, 0xe5, 0xc, 0x8a, 0x96, 0xda, 0xcf, 0xd6, 0x70, 0x32, 0xd9, 0x98, 0xf7, 0xf4, 0x29, 0x77, 0x67, 0xc6, 0xbf, 0x6d, 0x6e, 0x80, 0xca, 0xc2, 0x20}}
	return a, nil
}

var _workflowSchemaJsonOrig = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x19\x5d\x6f\xdb\x36\xf0\x3d\xbf\x82\x70\x03\xf4\x63\xb6\x55\xec\x65\x58\xb0\x0d\x68\x9c\x60\xc9\xb0\x34\x5e\x6c\x34\x6d\x82\x34\x38\xcb\x27\x8b\x8d\x44\xaa\x24\x95\x58\x6d\xf3\xdf\x07\xc9\x32\x2d\xdb\xa4\x2c\x39\x72\x5b\xbd\x34\x26\xef\xfb\x8b\x77\xd7\xaf\x7b\x84\x10\xd2\xda\xa7\xe3\xd6\x01\x69\xf9\x4a\x45\xf2\xc0\x71\x80\x29\x1f\xba\x2e\x0f\x9d\x07\x2e\xee\xbc\x80\x3f\xc8\x8e\x74\x7d\x0c\xa1\xd5\xce\x11\xf2\x9f\x39\xd2\x81\xe3\x7c\x92\x9c\xe5\x40\x5d\x2e\x26\xce\x58\x80\xa7\x3a\xaf\x7f\x73\x66\x67\xcf\xe6\x98\x63\x94\xae\xa0\x91\xa2\x9c\xa5\xd8\xff\x0c\xce\xdf\x92\x41\x06\x42\x3c\x2e\xc8\xec\x7a\x44\xd9\x84\x68\xde\x73\x54\x95\x44\x98\xe2\xf0\xd1\x27\x74\xd5\xfc\x54\xe0\xe7\x98\x0a\x4c\x15\xb8\xce\x4e\xb2\xd3\x19\xc9\x77\x28\x64\xca\x28\x3b\xbf\xc9\x11\x60\x3c\xa6\x29\x7b\x08\xfa\x82\x47\x28\x14\x45\xd9\x3a\x20\x1e\x04\x12\x73\x90\xa8\x78\xf1\x75\x41\xf5\x32\x17\xe9\x74\xbc\x74\xbe\x24\x9d\x54\x82\xb2\x49\x2e\x9d\xbe\x8d\x40\x29\x14\x99\xca\x1f\xaf\xa1\xf3\xe5\x4d\xe7\xea\x75\xe7\xf7\x5b\xd2\xb9\x79\xb5\xdf\xd2\xa0\x8f\xed\x82\x06\x34\x8c\x03\x48\x05\xfd\x1e\xdc\xce\x50\x81\x95\xcb\xb5\x36\x39\x69\xb1\x38\x08\x5a\x37\xab\xfc\xcc\xf6\xd2\xf7\x6f\x21\x44\xe3\x8d\x49\x97\x35\xa0\xc7\x3d\xf3\xaf\xa2\xfc\xa7\xec\x1e\x99\xe2\x22\xd9\x9d\x12\xfd\x00\x14\x0e\x93\xc8\x72\xbf\xa4\x0a\x08\x01\xc9\x8a\x57\x34\x10\x55\x18\xda\x69\x64\x20\xfb\x02\xbd\x94\xce\x33\x67\x8c\x1e\x65\x59\xbc\x4a\x27\x9a\x4b\xb0\x6e\xa3\x75\x3b\xad\x9f\x98\x2d\xb7\x9c\x29\x35\x03\x0d\x59\x1c\x66\xb6\xfd\xb5\xfb\xba\x75\x63\xa4\x7f\x81\x11\x97\x54\x71\x61\x32\xac\x39\xa7\xf5\x6d\xee\x92\x24\x8d\x1f\x8b\x57\x8a\xa1\xfe\x42\xa4\xbc\xba\xba\x7c\x7d\x9b\x50\xe5\xc7\xa3\xf4\xcf\x97\xce\xb2\xcd\x1e\xcd\x19\xd3\xdf\x10\x03\xdd\x57\x76\xdf\x9b\x7d\x26\xe6\xea\x27\xdb\x05\xf6\x71\x80\x21\x32\xb5\xad\xe9\xac\x9a\xfc\xd0\x40\xc6\x99\x52\xb5\x42\x79\x5d\x86\xd6\x29\x93\x0a\x98\x5b\x45\x0f\xa3\x91\x34\xd4\xe6\x38\x5b\x28\xe4\xf2\x30\x95\x3d\x25\x3a\xf4\xa9\x24\x54\x12\xe5\x23\x61\x10\x22\xe1\x1e\x01\x46\x72\xed\x08\xcd\xc5\x6b\x13\xec\x4e\xba\xe4\x79\x98\xdc\x42\x40\x3f\xc7\x5c\x3d\xb7\x08\x42\xca\x8b\xf7\x2f\xfb\x16\x6b\xd9\xd4\xaa\x14\xd4\x1a\xbc\x24\xb8\x17\xea\x97\xf9\x73\xee\x0f\xb3\x94\xc4\xe8\x57\xf3\x69\xa9\xb7\x7b\x9c\x31\x74\x33\xce\x3f\x38\x80\xe7\x22\x2d\x24\xda\xb2\x32\xaf\x24\xef\xe6\x16\x45\x83\x16\xdb\x1f\x73\x01\xee\x71\xe6\xd1\xc9\x0e\x4a\xef\x72\x2a\x14\x52\x80\x8c\xf1\x9e\xba\x48\xdc\x00\xa4\x34\xd8\x5e\x3f\x1b\x66\xaf\xf4\x92\x43\xca\x6d\x2e\xfb\x9b\x06\x92\xb3\x3e\x8d\x50\x9d\xc1\xd4\x0a\x15\xf0\x11\x04\x67\x74\x8a\xc2\x06\x72\x02\x21\x0d\x14\x67\xb6\xfb\x7f\x61\xe4\x26\x0a\x6d\xd7\x59\x37\x70\x81\x30\xb6\x73\xf8\xaf\xdf\xbb\xb0\xdd\x0d\x7c\xb8\x43\x71\xca\xdc\x78\x04\x8a\x5b\x49\x0c\xd1\x05\x43\x4c\xdd\x34\xf1\x96\x7d\x2c\x18\x69\xbf\x72\x05\x6d\x26\x92\x4d\xd1\x64\x4c\xb4\x59\x24\xf5\xb2\x40\x2a\x65\xb4\x39\x0f\x86\x28\x55\xda\xc2\xa4\xdc\xff\x98\x7d\xe4\xe4\xf8\xcd\xd1\x93\xba\xc5\x24\xd5\x87\xa4\x24\xbf\xcd\x3e\x12\xa2\x98\xe0\x98\xa4\xb9\xc1\x19\xc9\x0a\x96\xe2\x42\x6e\x93\x7b\x9a\xf6\x9f\xb3\x6f\xcb\xf7\x3f\x23\xf1\xd7\xec\x23\x1e\x82\x8a\x05\x3a\x5e\x9c\xfe\x73\x2b\x81\x51\x95\xac\x7b\xe3\x8c\x4e\x87\x20\xef\x7a\x3e\xba\x77\x39\x85\x55\x98\x85\x10\xa4\x5a\x9d\xb5\x52\x21\x76\xff\x87\x05\x39\x9e\xdc\xf5\x66\x7f\x3d\xea\x41\x54\x73\x59\x1e\xf2\x0a\x1d\x5b\xc3\x3d\xd7\x11\x15\xe8\x1a\x09\xaf\x31\xb0\xce\x42\x86\x6a\x7a\x28\x80\xb9\x7e\xb3\x34\x7b\x3c\x0c\xa9\x6a\x6c\x66\x6b\xe6\x7d\x2b\x18\xd0\x9c\xe2\xc5\xbe\xb2\x61\xdf\xe9\x31\x26\x79\xe2\x30\x6b\x30\x76\xde\xe3\xf7\x41\x3d\xc5\x8b\x3b\xb1\xf8\x8a\xda\xed\x65\x61\x4b\xbd\xa0\xbb\xc1\x86\x3d\x71\xbc\x70\x72\xf3\xae\x30\xee\x41\x56\x29\x6e\x7a\x1c\xaa\xaa\xa2\xe1\xa6\x9b\x1b\xef\xb9\x32\x2c\x0e\x47\x28\x4a\x3a\xec\x92\xc9\xc2\x5e\x77\xea\xb3\xa9\x35\x88\x58\xa2\x4f\x89\x18\x2d\x18\xe6\xe7\xbc\x84\x4f\xab\x0f\x02\x42\x54\x28\xaa\x4f\x83\xdf\x29\x87\x56\x03\xb6\x52\xd6\x14\x46\x8a\x86\xf3\x67\xc0\x63\x61\xc8\x4a\x7d\x6f\x7e\x88\x5d\x2d\xcf\x10\x45\x48\x19\x04\xd5\x12\x6a\x08\x62\x82\x25\x0f\xc9\x13\xb8\xed\xc4\x59\xb9\x75\xda\x5a\x72\xb3\xb7\x0c\x02\xee\xa6\xcc\x59\xab\xe8\x1a\x9b\x3a\x65\x4e\x27\x4b\xa3\x9b\xd9\x66\xf3\x45\x6b\xde\x5e\x95\xd7\xec\x92\xe2\xa8\xd0\x74\xe3\x96\x91\xfe\xa9\xd6\x4c\xf3\x19\x7b\x75\xc9\x74\xc4\x05\x95\xd5\xf7\x4b\x9d\xc5\x82\xe9\xc5\x4b\xf2\x53\x6c\x98\x56\xb6\x0a\x0b\xdf\x94\xe9\x7d\xca\xa2\x58\x2d\x36\xf4\x5d\xd2\x8b\x85\x40\xa6\x82\xa4\x4d\x80\x25\xe4\x0e\x13\xe7\x1e\x82\x18\x25\x01\x81\xe4\x1e\x02\x3a\x26\x3e\x0a\xdb\x7c\xaf\xc5\xd9\xf4\x64\x68\x0b\x6d\x37\x9c\xec\x72\xf1\xb3\x34\x3b\x35\x9c\x11\x69\x72\x8a\xb8\xde\x12\xae\x52\x65\x3a\x8f\x55\x14\xab\x8d\x23\x67\x3d\xa2\x43\x1a\xe2\xb1\x54\x34\x04\x55\xa1\xda\xd9\x08\xdb\xc6\xca\x82\xc9\x17\xff\x43\xd3\xb0\xbd\xe7\x75\x7a\xad\x26\x9b\xbb\x58\x60\xb1\x07\x6e\x3a\xe1\x8b\xea\x58\x97\x18\x04\x03\x1f\xa2\x1a\x8c\x52\x94\x93\x65\xf0\xbc\x73\xb4\x82\x5f\xd6\x03\x3f\xaa\x0e\x7e\x06\xd3\x77\x3c\xa8\x01\x4f\x59\x2d\xf8\x43\xae\x14\x0f\xe7\xde\xad\x83\x53\xd3\x44\xef\xeb\x81\x7f\xa8\x07\x7e\x55\x1d\xbc\xc7\x83\x01\xfd\x52\x43\xdd\x0b\xfe\x50\x0f\xe1\x04\xe9\xc4\x57\x35\xcd\x73\xee\x79\x12\x6b\x22\x7d\xd8\x06\xe9\xfd\x40\x81\xa8\xcb\x68\x0b\x9c\xab\x9a\x38\xc7\x53\x25\x60\x19\x3c\x2f\x2b\x9b\x96\x5f\x7b\x8f\x7b\xff\x07\x00\x00\xff\xff\xa8\x2a\xd9\x16\xf4\x21\x00\x00")

func workflowSchemaJsonOrigBytes() ([]byte, error) {
	return bindataRead(
		_workflowSchemaJsonOrig,
		"workflow.schema.json.orig",
	)
}

func workflowSchemaJsonOrig() (*asset, error) {
	bytes, err := workflowSchemaJsonOrigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "workflow.schema.json.orig", size: 8692, mode: os.FileMode(0640), modTime: time.Unix(1556640133, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb9, 0x39, 0x9b, 0x21, 0xb3, 0xa2, 0x3, 0xef, 0x5f, 0x56, 0xcb, 0x4b, 0x9f, 0x24, 0x29, 0xd1, 0xf7, 0xb, 0x7c, 0x9b, 0x22, 0xf4, 0x3f, 0x37, 0xa, 0xc2, 0xc0, 0xb1, 0xf8, 0x33, 0xe2, 0xe8}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"workflow.schema.json": workflowSchemaJson,

	"workflow.schema.json.orig": workflowSchemaJsonOrig,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"workflow.schema.json":      &bintree{workflowSchemaJson, map[string]*bintree{}},
	"workflow.schema.json.orig": &bintree{workflowSchemaJsonOrig, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
