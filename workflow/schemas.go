// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/workflow.schema.json (10.079kB)

package workflow

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _workflowSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xdb\x6e\xdb\x38\x13\xbe\xcf\x53\x10\x6a\x80\x1e\xfe\xd8\x2e\xfe\x9b\xc5\xe6\x6e\xeb\x18\x5b\x2f\xd6\xad\x37\x36\x7a\x44\x5a\x8c\xa5\xb1\xc5\x46\x22\x55\x92\x4a\xac\x76\xf3\xee\x0b\xc9\x3a\xd9\x26\x65\x2a\x91\xd1\xf4\xa2\x88\xc9\x6f\x38\xe7\xe1\x70\xf4\xf3\x84\x10\x42\x9c\x53\xea\x39\xe7\xc4\xf1\x95\x8a\xe4\xf9\x60\x00\x4c\xf9\xd0\x77\x79\x38\xb8\xe5\xe2\x7a\x19\xf0\x5b\xd9\x93\xae\x8f\x21\x38\x67\x39\x41\xfe\x33\x27\x3a\x1f\x0c\xbe\x49\xce\x72\x50\x9f\x8b\xd5\xc0\x13\xb0\x54\xbd\x97\xbf\x0d\x36\x6b\x4f\x0a\x4a\x0f\xa5\x2b\x68\xa4\x28\x67\x29\xf5\x5f\xb3\xb7\x6f\xc8\x2c\x83\x90\x25\x17\x64\xb3\xbd\xa0\x6c\x45\x4a\xde\x05\xa9\x4a\x22\x4c\x69\xf8\xe2\x1b\xba\xaa\x58\x15\xf8\x3d\xa6\x02\x53\x05\x3e\x67\x2b\xd9\xea\xe6\xc8\x77\x28\x64\xca\x28\x5b\xbf\xca\x09\xc0\xf3\x68\xca\x1e\x82\xa9\xe0\x11\x0a\x45\x51\x3a\xe7\x64\x09\x81\xc4\x1c\x12\xd5\x37\x7e\x56\xa7\xbe\xcf\x45\x1a\x7b\x5b\xeb\x5b\xd2\x49\x25\x28\x5b\xe5\xd2\x95\xbb\x11\x28\x85\x22\x53\xf9\xcb\x67\xe8\xfd\xf8\xa3\xf7\xe9\x65\xef\xf7\xaf\xa4\x77\xf5\xe2\xd4\x29\xa1\x77\x15\x95\x33\x41\x05\x46\x2e\x9f\x4b\x23\x10\x87\xc5\x41\xe0\x5c\xed\xf2\xd3\x6b\x50\xee\xbf\x81\x10\xb5\x3b\x3a\x5d\xf6\x40\x77\x27\xfa\x5f\x75\xf9\xc7\xec\x06\x99\xe2\x22\x39\x9e\x12\xd3\x00\x14\xce\x93\xc8\xb0\x4f\x8c\x41\xb3\x87\xca\xdd\x33\x6d\x66\x58\xc2\xfb\x2f\x1a\xf7\x33\xcc\xa9\xc0\x65\xca\xf8\xc9\xc0\xc3\x25\x65\x59\xc8\xc9\x41\x54\x88\xbc\x6f\xd4\xe2\xdf\x9d\x76\x67\x7f\xd5\xc6\x09\xdb\x69\xd0\x32\x66\x91\xc5\x61\xe6\xa6\xff\xf7\x5f\x3a\x57\xda\xf3\x2f\x31\xe2\x92\x2a\x2e\x74\x26\x6b\xb6\x7d\xe1\xdd\x24\x0d\x45\x83\x83\xeb\x59\xf3\x4c\xa4\xbc\xfa\x65\x6d\xfa\x77\x45\x95\x1f\x2f\xd2\x3f\x9f\x0f\xb6\xad\x79\xa7\x4f\xbe\x03\xde\x6d\xf2\xaa\xc1\x9b\xa2\x50\x3f\xb9\x5f\x8e\x8c\x02\x0c\x91\xa9\xfb\x9a\xce\xa8\x89\x65\x4e\x80\x10\x90\x98\x52\x82\x2a\x0c\x0f\xa4\x81\xde\x28\xb8\x51\xca\x1c\xe4\x9a\x50\xde\x97\xc1\x19\x33\xa9\x80\xb9\x1d\xe4\xf6\xc1\x38\xab\x14\x72\x79\x98\xca\x9e\x1e\x3a\xf7\xa9\x24\x54\x12\xe5\x23\x61\x10\x22\xe1\x4b\x02\x8c\xe4\xda\x11\x9a\x8b\x77\x46\xb0\xbf\xea\x93\xa7\x61\xf2\x15\x02\xfa\x3d\xe6\xea\xa9\x41\x10\xd2\x7c\x0f\xfc\xef\xd4\x60\xad\x5f\x5d\xb2\x72\x8d\x0b\x7f\x74\x50\xb8\x9a\xbc\x3d\xe4\x8c\xa1\x9b\x71\xfe\xc5\x01\x5c\x88\x54\x49\x64\x1d\xce\x8d\xd5\xe8\x70\xff\x51\x42\xeb\xbd\x8d\xbe\x00\x0f\x39\x5b\xd2\xd5\x11\x4a\xef\x76\x2a\xd4\x52\x80\x78\x78\x43\x5d\x24\x6e\x00\x52\x6a\x6c\x5f\x5e\x1b\x7a\xaf\x0c\x93\x57\x94\x9b\x5c\xf6\x27\x0d\x24\x67\x53\x1a\xa1\x9a\xc0\xda\x88\x0a\xf8\x02\x82\x09\x5d\xa3\x30\x41\x5e\x43\x48\x03\xc5\x99\x69\xff\x6f\x58\xb8\x89\x42\xd3\x76\xd6\x58\x5c\x22\x78\x66\x0e\xff\x4c\x87\x97\xa6\xbd\x99\x0f\xd7\x28\xc6\xcc\x8d\x17\xa0\xb8\xf1\x88\x39\xba\xa0\x89\xa9\xab\x2e\xee\xb2\x2f\x35\x23\x9d\x5a\x57\xd0\x6e\x22\x59\x17\x4d\xda\x44\xdb\x44\xd2\x30\x0b\xa4\x46\x46\x87\xf3\x60\x8e\x52\xa5\x2d\x4c\x17\xbd\x26\xd1\xaa\x30\xa1\xeb\x39\xc8\xeb\xa1\x8f\xee\xb5\x01\x53\x31\x24\x76\xc5\xc9\x78\x4a\x83\xd1\xc2\x9a\x1c\xf7\x2c\x48\xfa\x56\x91\x86\x71\x00\xaa\xa9\x4f\x7c\x70\xc3\x5e\xf1\xd0\xbc\xa0\x76\xb9\xe9\xbb\xd2\x8a\x97\xd5\x8b\x4a\xa3\x69\x79\x42\xad\x2d\xde\x63\xaa\x25\x98\x29\x10\xca\x1e\x3e\x62\x9e\x3d\x78\xcc\x2e\xa8\xb0\x87\xbf\x8d\x55\x2b\xfc\x48\x08\x2e\x3a\xbb\x51\x35\x3c\xad\x2c\x6e\xec\x77\xf7\xe4\x38\x4a\x4b\x37\xda\xe9\xdd\x08\xf5\x74\x37\x58\xc5\x46\x1b\x62\x8f\xb7\x53\x93\x9b\xf4\x42\x2f\x57\xb4\xf3\x37\x66\xe7\x9d\xcc\x49\xed\x58\xa7\xa6\xca\xf6\xd8\xa5\xf6\xcc\xea\xf8\xa1\x74\x41\x05\xba\xda\x83\xf7\x18\x18\x67\x21\x9a\x38\x7f\x25\x80\xb9\x7e\xb7\x67\x0e\x79\x18\x52\xd5\xd9\xcc\xa6\x1b\x57\xd6\x0c\xa8\xbf\x97\xeb\x8f\xc1\x8e\x7d\x57\xce\x1e\x92\x07\x0e\xb3\xcc\x85\x6a\x0a\xea\x21\x5e\x3c\x8a\xc5\x77\xd4\x3e\xdb\x16\xb6\xd1\x0b\xe5\x13\xae\x63\x4f\x8c\x2a\x27\x77\xef\x0a\xed\x1c\x74\xf7\xc4\x43\x9d\x89\xad\x2a\x25\x6e\x7d\xb8\x06\x17\xca\xb0\x38\x5c\xa0\x68\xa8\xb5\x0d\x37\x8c\xb9\xee\xb4\x67\xd3\xea\x4e\x32\x44\x9f\x12\x31\x1a\x28\xf4\x15\xbc\x81\x8f\x33\x05\x01\x21\x2a\xb4\xe9\x3b\x3a\x7d\x80\x1c\xcc\xa1\xdd\x80\xb5\xca\x9a\xda\x1c\xa0\xe3\xfc\x99\xf1\x58\x68\xb2\xb2\xdc\xd7\xdf\xf6\x6e\x29\xcf\x1c\x45\x48\x19\x04\x76\x09\x35\x07\xb1\xc2\x86\x8b\xe4\x01\xdc\x8e\xe2\xac\xdc\x3a\x67\xa5\xe4\x7a\x6f\x69\x04\x3c\x4e\x99\x33\x56\xd1\x3d\x36\x6d\xca\x5c\x99\x2c\x9d\x7e\x99\xe9\x36\x5f\x4a\xcd\xcf\x76\xe5\xd5\xbb\xa4\xfe\xbe\xef\xba\x71\xcb\x8e\x7e\x54\xb3\xe1\x62\x30\xb6\x3b\x19\xbe\xe0\x82\x4a\xfb\xa1\x70\xaf\x7a\xcb\x3e\x7b\x4e\x1e\xc5\x63\x63\x67\x14\x58\xf9\xa6\x49\xef\x31\x8b\x62\x55\x7d\xa1\xeb\x93\x61\x2c\x04\x32\x15\x24\x67\x04\x58\x42\xae\x31\x19\xdc\x40\x10\xa3\x24\x20\x90\xdc\x40\x40\x3d\xe2\xa3\x30\x0d\xe5\x4a\x71\x0e\x5d\x19\xa5\x85\x1e\xc9\x1b\xa7\x96\x10\x5b\xb3\x9b\x8e\x33\x22\x4d\x4e\x11\xdb\x4e\xce\x8d\xf7\xad\x7e\xd6\x10\xc5\xea\xe0\xcc\xab\xe5\xa9\x73\x1a\xe2\x48\x2a\x1a\x82\xb2\xa8\x77\xa6\xee\xc7\x66\xb2\x55\x7d\x73\xed\xd8\xe4\x45\xa9\xb6\x1b\xc1\x4c\x80\xc5\x4b\x70\x55\x2c\xb0\xc5\xe0\xe6\x3d\x06\xc1\xcc\x87\xa8\x05\xa3\x94\xe4\xf5\x36\x3c\x37\x9f\x11\xfe\xbe\x1d\xfc\xc2\x1e\x3e\x81\xf5\x3b\x1e\xb4\xc0\x53\xd6\x0a\xff\x8a\x2b\xc5\xc3\xc2\xbb\x6d\x68\x5a\x9a\xe8\x43\x3b\xf8\xc7\x76\xf0\x4f\xf6\xf0\x21\x0f\x66\xf4\x47\x0b\x75\x2f\xf9\x6d\x3b\x82\xd7\x48\x57\xbe\x6a\x69\x9e\xb7\xcb\xa5\xc4\x96\x44\x1f\xef\x43\xf4\x41\x33\x86\x3d\xc8\xe8\x1e\x34\x9f\x5a\xd2\x8c\xd6\x4a\xc0\x36\x3c\x2f\x2b\x56\x55\x6a\x6f\x78\x77\xdc\xee\xb5\x5d\xed\xd2\xbc\xf0\xad\x47\xe6\x0a\x8b\x31\x8a\x1d\xc9\x14\xd2\x36\xa1\x10\xf7\x48\xdf\x09\xac\x3f\x12\x64\x83\x73\x9b\x99\x77\xcd\xab\x27\x9b\xff\xef\x4e\xfe\x0b\x00\x00\xff\xff\x96\x29\x24\xe0\x5f\x27\x00\x00")

func workflowSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_workflowSchemaJson,
		"workflow.schema.json",
	)
}

func workflowSchemaJson() (*asset, error) {
	bytes, err := workflowSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "workflow.schema.json", size: 10079, mode: os.FileMode(0640), modTime: time.Unix(1558091776, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x76, 0x8, 0x73, 0x62, 0x9e, 0x1b, 0xb6, 0x75, 0xa4, 0xd2, 0x2d, 0x9d, 0x6e, 0x42, 0x2f, 0xcb, 0x6c, 0x1b, 0x72, 0xec, 0x15, 0x74, 0xb5, 0x56, 0x45, 0xbc, 0xa4, 0x6e, 0x78, 0x7d, 0x6e, 0x49}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"workflow.schema.json": workflowSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"workflow.schema.json": &bintree{workflowSchemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
