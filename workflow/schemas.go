// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/workflow.schema.json (6.954kB)

package workflow

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _workflowSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xdf\x6f\xdb\xb6\x13\x7f\xcf\x5f\x71\x50\x03\xe4\xfb\xed\x6c\x29\xdb\xcb\xb0\xbc\x6d\x4e\xd0\x65\x40\x1a\x63\x31\x36\x60\x45\x5a\xd0\xf2\xd9\x62\x23\x92\x2a\x49\x25\xd1\xba\xfc\xef\x03\x25\x99\x92\x6c\x4a\x91\x6d\xb9\xd8\x9b\x44\xde\xef\xbb\xcf\xf1\xc8\xaf\x27\x00\x00\xde\x29\x5d\x78\x17\xe0\x45\x5a\x27\xea\x22\x08\x08\xd7\x11\xf1\x43\xc1\x82\x27\x21\x1f\x96\xb1\x78\x52\x63\x15\x46\xc8\x88\x37\x2a\x19\xca\xdf\x92\xe9\x22\x08\x3e\x2b\xc1\x4b\x22\x5f\xc8\x55\xb0\x90\x64\xa9\xc7\xe7\x3f\x06\xc5\xda\x9b\x35\xe7\x02\x55\x28\x69\xa2\xa9\xe0\x86\xfb\xb7\xbb\xdb\xf7\x70\x97\x93\xc0\x52\x48\x28\xb6\xe7\x94\xaf\xc0\xea\x5e\xb3\xea\x2c\x41\xc3\x23\xe6\x9f\x31\xd4\xeb\x55\x89\x5f\x52\x2a\xd1\x38\xf0\x21\x5f\xc9\x57\x0b\x91\x7f\xa0\x54\x46\x51\xbe\x7e\x5f\x32\x90\xc5\x82\x1a\xf5\x24\x9e\x4a\x91\xa0\xd4\x14\x95\x77\x01\x4b\x12\x2b\x2c\x49\x92\xfa\xc6\xd7\x4a\xea\x9f\xa5\x49\xd7\x8b\xc6\x7a\xc3\x3a\xa5\x25\xe5\xab\xd2\x3a\xbb\x9b\x10\xad\x51\xe6\x2e\x7f\xfc\x40\xc6\x7f\xff\x3c\xfe\xeb\x7c\xfc\xd3\x27\x18\xdf\xbf\x3d\xf5\x2c\xe9\x4b\xc5\xe5\xdd\xa0\x26\xed\x5a\x78\x1a\xc7\x9b\x3a\x4e\x43\xc1\x18\x72\x6d\xf6\x67\xb7\x97\xb7\x17\x40\x59\x12\xa3\x59\x82\x32\x33\xf0\x2b\x79\x44\x7e\xa6\x41\x21\x72\x10\x1c\x41\x2c\x41\x47\xa8\x10\x28\x37\x1f\xf0\x44\xe3\x05\x64\xa8\xdd\x46\x5d\xf3\x47\xe4\x5a\xc8\xac\xdd\xb2\x46\x76\xbe\xa5\x6d\xcd\x94\xef\x98\x1f\xe4\x29\x33\x15\xe4\xfd\xe0\x9f\x7b\xf7\x4e\xf9\xbf\x63\x22\x14\xd5\x42\x6e\x96\x45\x0f\xf7\x19\xe5\x8d\x62\xfb\x7e\xb3\x3c\x8a\xcd\xec\x3d\x61\x0e\xe1\xb0\x59\x41\xff\x93\xc6\x16\xdf\xe2\xf4\x9f\x15\xd5\x51\x3a\x37\x9f\xff\x0f\xbc\x06\xef\x8b\xbb\x10\xa7\xee\x0a\xb7\x64\xfe\x5b\xe7\x7a\x91\x4b\x89\x4b\x63\xc6\x9b\x60\x81\x4b\xca\x73\x30\xa9\x40\xae\xc3\x93\x79\x5b\x6c\x2f\x27\xee\xbf\x7a\x78\xaf\x8a\x6a\xd8\x39\xb4\x2d\x58\xb5\xfb\xb3\x2c\x69\xd9\x6a\x08\x27\x52\x92\x6c\x43\xb6\x25\x62\x94\x5f\x6b\x64\x8e\xcc\x59\x12\x5a\xee\xbb\xd5\x40\x7b\xdc\xb0\xf0\xdb\x98\xb9\x1d\x38\xd8\x0a\x1e\x6c\xe7\x14\x0a\x64\x2a\x4d\x78\xd8\xc7\x55\x67\x1c\xeb\xbe\x76\x95\xaa\xa5\x7b\xbd\x64\x2b\xc7\xb7\xc0\x1f\x0a\xbe\xa4\x92\x81\x8e\xa8\x02\x89\x2b\x7c\xf6\x61\x66\xbe\xa9\xca\x91\xce\x09\xcb\xe1\x4f\x38\x94\xf1\x01\x5a\x3a\x38\x02\xf4\x57\x3e\x9c\xb1\xec\x13\x89\xe9\x97\x54\xe8\xb3\x16\x57\xa0\xbb\xf1\x7e\x77\xda\x12\xef\x36\x87\x7b\x21\xc7\x92\x77\x20\xa8\x0a\x4c\x57\x45\xac\x33\xea\xb6\x12\x9c\x95\xe1\x5e\xed\xac\x97\x89\xe0\x1c\xc3\x5c\xf3\x81\x28\x39\x14\x02\x6b\x93\x2a\x8b\x7a\x03\xa2\xb3\xe5\xbd\x7e\xe0\x5b\xd2\xfa\x30\x51\x76\x8e\x51\x1d\x5b\xee\x93\x61\x62\xaa\x79\xb5\x67\xe3\xea\xea\xf9\x0e\xe0\x44\x18\x3e\xbc\x0e\x1b\x58\xe0\x23\x0d\x11\xc2\x98\x28\xb5\x46\xcc\x3b\x1a\x2b\xc1\xa7\x34\x41\x7d\x43\x9e\xcf\x7c\xb8\xd6\xc0\x48\x06\x73\xcc\x99\x43\xa2\xcc\x07\xd1\x39\xea\x78\xca\x8c\xd4\x44\xe2\x12\x25\x99\xc7\xe8\x3b\xd2\xde\x86\xae\x6d\x70\xed\x79\x0c\x7d\x7c\x17\x8b\x39\x89\x6f\xe8\x33\xca\xd3\xde\x9d\x6d\x98\xfa\x70\xe5\xc3\x59\xbe\x45\xac\x27\x26\xd4\xdd\x4e\xd7\xab\xcb\x5d\x49\x33\x54\xda\x4c\x27\x7b\x96\x92\x31\x1c\x9c\x96\xdf\xd0\xe7\x19\x51\x0f\x13\x53\x3e\x2d\x34\x95\x1e\xe8\x87\xf4\x56\x29\x1d\xb1\x62\x35\x3b\xf6\x44\xf7\x49\xf3\xeb\xc5\x5e\x2c\xac\x96\xe6\xd0\x5e\x1b\x4c\x06\x1e\x2d\x2e\xa9\xc4\xd0\x29\x78\x4b\x41\x39\x75\xf6\x6a\xcd\xbf\x48\xc2\xc3\x68\x58\x99\x13\xc1\x18\xd5\x07\xc8\x3c\x4a\x87\xad\x02\xe8\x86\x43\x7d\x36\x1a\x38\x77\x76\x9a\xcf\xfb\xef\xb0\xc1\x2e\x47\xd9\x29\xd1\x87\x64\xf1\x28\x11\xdf\x70\x7b\xd4\x34\xb6\x33\x0b\x76\x1e\x19\x38\x13\x57\x55\x92\x87\x4f\x85\xf3\x16\xdd\xcf\xf0\xbe\x0e\x58\xba\xe7\xd7\x07\xbe\xea\xfa\xce\xe6\x28\x3b\x26\xbb\x8e\x89\xb6\xbd\xdb\xec\xae\x66\xa7\x01\xb8\xa5\xe6\xb4\x4c\xb1\x85\xc3\x7d\xe0\x75\xe8\xf1\xa6\x44\x12\x86\x1a\x65\xff\x7b\xcc\x37\x42\xce\x66\x99\xf6\xc2\x4a\x6d\x94\x1d\x18\x35\x77\x22\x95\x0e\x2c\xda\x7d\xf7\xf1\x1b\x5a\x7b\x66\x28\x19\xe5\x24\xee\x07\xa3\x19\x91\x2b\xec\x38\x3e\x0e\xd0\x76\x94\x64\x95\xd1\x19\x59\xcb\xdd\xd9\x72\x18\x78\x9c\xe6\xd6\xda\x3b\xb7\xd4\xec\xd2\xdc\x2c\x58\x0e\xec\x9b\xc7\xc4\x8b\xf5\x7c\xb4\x69\xaf\x3b\x25\xf5\x61\x7a\xe8\x71\x2d\x17\x7d\xf0\x03\xc9\x61\x0f\x1f\xbb\xdd\xdf\x36\x1f\x3d\x2e\x85\xa4\x6a\x9f\xf7\x8e\xff\xc6\x73\x47\x3d\x1c\x11\x42\x95\xb0\x2e\xa7\xaf\x79\x92\xea\x69\x4c\x34\xe6\x17\x72\x1f\x26\xa9\x94\xc8\x75\x9c\x8d\x80\xf0\x0c\x1e\x30\x0b\x1e\x49\x9c\xa2\x02\x22\x11\x1e\x49\x4c\x17\x10\xa1\xc4\x8e\x30\x41\x9f\x73\xc4\x46\x68\xbf\x7b\xca\x30\x38\x72\xa3\xa4\x71\x8d\x1a\x18\x26\x06\xb1\x32\xad\x5e\x84\xa0\x1b\x2c\xc5\x45\xb1\x57\xbf\xba\x4d\x75\x92\xea\x57\xaf\x9f\xbb\x09\x9d\x51\x86\x57\x4a\x53\x46\x74\x8f\x1e\xd8\x26\xb8\xfb\x8a\x79\xf2\x72\xf2\x6f\x00\x00\x00\xff\xff\x59\x8e\xb5\x4d\x2a\x1b\x00\x00")

func workflowSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_workflowSchemaJson,
		"workflow.schema.json",
	)
}

func workflowSchemaJson() (*asset, error) {
	bytes, err := workflowSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "workflow.schema.json", size: 6954, mode: os.FileMode(0644), modTime: time.Unix(1554826852, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x73, 0xc1, 0x5b, 0xa, 0x2e, 0x97, 0x26, 0xc, 0xe7, 0x8c, 0x81, 0x49, 0xfe, 0xb2, 0xc3, 0x9f, 0xfe, 0x57, 0x22, 0x76, 0xc9, 0x21, 0x9d, 0x9, 0x70, 0x74, 0xeb, 0x56, 0xce, 0xc8, 0x7d, 0x43}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"workflow.schema.json": workflowSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"workflow.schema.json": &bintree{workflowSchemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
