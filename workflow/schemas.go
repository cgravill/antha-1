// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/workflow.schema.json (7.016kB)

package workflow

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _workflowSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\x38\xa8\x01\xb2\x75\xb6\x54\xec\x65\x58\xde\x36\x27\xe8\x32\x20\x8d\xb1\x18\x1b\xb0\x22\x2d\x68\xf9\x6c\xb1\x11\x49\x95\xa4\x92\x68\x99\xbf\xfb\x40\x59\xa6\x25\x8b\x92\x65\x47\x4e\xe7\x27\x99\xbc\xff\x77\xbf\xe3\x91\xcf\x27\x00\x00\xde\x29\x9d\x79\xe7\xe0\x45\x5a\x27\xea\x3c\x08\x08\xd7\x11\xf1\x43\xc1\x82\x47\x21\xef\xe7\xb1\x78\x54\x43\x15\x46\xc8\x88\x37\x28\x18\x8a\xbf\x05\xd3\x79\x10\x7c\x51\x82\x17\x44\xbe\x90\x8b\x60\x26\xc9\x5c\x0f\xdf\xfd\x14\xac\xd6\xde\xac\x39\x67\xa8\x42\x49\x13\x4d\x05\x37\xdc\xbf\xdf\xde\x7c\x80\xdb\x9c\x04\xe6\x42\xc2\x6a\x7b\x4a\xf9\x02\xac\xee\x35\xab\xce\x12\x34\x3c\x62\xfa\x05\x43\xbd\x5e\x95\xf8\x35\xa5\x12\x8d\x03\x1f\xf3\x95\x7c\x75\x25\xf2\x4f\x94\xca\x28\xca\xd7\xef\x0a\x06\x32\x9b\x51\xa3\x9e\xc4\x63\x29\x12\x94\x9a\xa2\xf2\xce\x61\x4e\x62\x85\x05\x49\x52\xde\x78\xde\x48\xfd\xab\x30\xe9\x6a\x56\x59\xaf\x58\xa7\xb4\xa4\x7c\x51\x58\x67\x77\x13\xa2\x35\xca\xdc\xe5\x4f\x1f\xc9\xf0\x9f\x5f\x86\x7f\xbf\x1b\xfe\xfc\x19\x86\x77\x6f\x4f\x3d\x4b\xba\x1c\x94\x3c\xa0\x2c\x8d\x89\x31\xf4\x35\xb4\x5d\xa3\x26\x75\x2d\x82\xe3\xcd\xbc\x12\xd8\xf5\xef\xd9\x5a\xc0\xd3\x38\xf6\x96\x83\x16\x8a\x22\x5f\xcb\x0a\xc9\xdd\x96\xc9\xa7\xa1\x60\x0c\xb9\x36\x0c\x93\x9b\x8b\x9b\x73\xa0\x2c\x89\xd1\x2c\x41\x51\x56\xf0\x1b\x79\x40\x7e\xa6\x41\x21\x72\x10\x1c\x41\xcc\x41\x47\xa8\x10\x28\x37\x1f\xf0\x48\xe3\x19\x64\xa8\xdd\x3e\x5e\xf1\x07\xe4\x5a\xc8\xac\x39\x9c\x95\xd2\x7a\x4d\xdb\xaa\xf5\xba\x67\xba\x91\xa7\xcc\x64\xc9\xfb\xd1\x7f\xe7\xdd\x39\xe5\xff\x81\x89\x50\x54\x0b\xb9\x5d\xd3\x1d\xdc\x2f\xd0\x90\x7d\x20\xcc\xc1\x0c\xdb\x05\xf7\x9d\x34\xba\x7c\xdb\x44\xfe\x5d\x50\x1d\xa5\x53\xf3\xf9\x7d\xe0\x55\x78\x97\xee\xba\x1d\xbb\xe1\x67\xc9\xfc\xb7\xce\xf5\x55\xae\x24\x9a\x8a\xf5\xde\x04\x33\x9c\x53\x9e\x23\x5d\x05\x72\xed\x7e\xe6\xd5\xd8\xaa\x75\xb9\x74\x86\xef\x72\x95\xed\x43\x43\xd7\xe8\xc9\x24\x4b\x1a\xb6\x2a\xc2\x89\x94\x24\xf3\xea\x18\xcb\x89\xa8\x46\xd6\x2c\xa3\x25\x28\xb8\x72\xca\xd8\x50\x8f\x4a\x3d\x32\x50\x4f\x18\xac\x60\xa5\x34\xe1\x61\x17\x3f\x9c\x41\xb2\x54\xbb\xeb\x6c\xe3\x50\x0d\x91\xa1\xe0\x73\x2a\x19\xe8\x88\x2a\x90\xb8\xc0\x27\x1f\x26\xe6\x9b\xaa\x1c\x7e\x9c\xb0\x1c\x93\x84\x43\xe1\x37\xd0\xc2\xf0\x01\xa0\xbf\xf0\xe1\x8c\x65\x9f\x49\x4c\xbf\xa6\x42\x9f\x35\x98\x08\xed\xcd\xf5\x87\xd3\x86\x38\x36\x39\xdc\xa9\xdc\x2d\x79\x4b\xd9\x6f\x02\xd3\x96\xe9\x75\xa6\xdc\x56\x82\x33\xe3\xee\xd5\xd6\x3a\x18\x09\xce\x31\xcc\x35\x7f\xe3\xd2\x5e\x9b\xb4\xb1\xa8\x73\xa1\xb7\xf6\xa9\xdd\x23\x84\x25\x2d\x8f\x27\xee\xd6\x3c\x32\x95\xbb\x38\x42\x53\x76\x80\x24\xc2\xf0\x7e\x37\x44\x60\x86\x0f\x34\x44\x08\x63\xa2\xd4\x1a\x1d\xef\x69\xac\x04\x1f\xd3\x04\xf5\x35\x79\x3a\xf3\xe1\x4a\x03\x23\x19\x4c\x31\x67\x0e\x89\x32\x1f\x44\xe7\x08\xe3\x29\x33\x52\x13\x89\x73\x94\x64\x1a\xa3\xef\x48\x71\x13\x92\xea\x40\x3a\xf0\x9c\xf8\xf4\x3e\x16\x53\x12\x5f\xd3\x27\x94\xa7\x9d\xbb\x53\x3f\xb5\xe0\xca\x87\xb3\x54\x57\xb1\x1e\x99\x50\xb7\x3b\xbd\xbb\x92\x26\xa8\xb4\x19\x0f\x0e\x2c\x25\x63\x38\x38\x2d\xbf\xa6\x4f\x13\xa2\xee\x47\xa6\x7c\x1a\x68\x36\x7a\xa0\x1b\xaa\x1b\xa5\xb4\xc4\x8a\x95\xec\x38\x10\xc9\x27\xd5\xaf\xa5\xbd\x96\x58\x2d\xd5\x91\xbf\x34\x39\xf4\x7c\xf6\x5f\x50\x89\xa1\x53\x70\x4d\x41\x31\xf6\x75\x6a\xc3\xbf\x4a\xc2\xc3\xa8\x5f\x99\x23\xc1\x18\xd5\x2f\x90\x79\x8c\x6e\x5a\x0a\xa0\x1b\x0e\xe5\xf9\xa6\xe7\xdc\xd9\x71\x3a\xef\xbf\xfd\x06\xbb\x98\x35\xc7\x44\xbf\x24\x8b\x47\x89\xf8\x96\xdb\x83\xaa\xb1\xad\x59\xb0\xb3\x47\xcf\x99\xb8\xdc\x24\xb9\xff\x54\x38\x6f\xc5\xdd\x0c\xef\xea\x80\xa5\x7b\xda\x3d\xdc\x6d\xae\xdc\x6c\x8a\xb2\x65\x8a\x6b\x99\x5e\x9b\xbb\xcd\xfe\x6a\xf6\x1a\x76\x1b\x6a\x4e\xcb\x14\x1b\x38\xdc\x07\x5e\x8b\x1e\x6f\x4c\x24\x61\xa8\x51\x76\xbf\x8b\xbc\x12\x72\xb6\xcb\xb4\x13\x56\x4a\x63\x6b\xcf\xa8\xb9\x15\xa9\x74\x60\xd1\xee\xbb\x8f\xdf\xd0\xda\x33\x41\xc9\x28\x27\x71\x37\x18\x4d\x88\x5c\x60\xcb\xf1\xf1\x02\x6d\x47\x49\x56\x11\x9d\x81\xb5\xdc\x9d\x2d\x87\x81\xc7\x69\x6e\x8d\xbd\xb3\xa6\x66\x9f\xe6\x66\xc1\xf2\xc2\xbe\x79\x4c\xbc\x58\xcf\x07\xdb\xf6\xba\x53\x52\x1e\xa6\xfb\x1e\xd7\x72\xd1\xdf\xf8\x91\x63\xbf\xfb\xdb\xf6\x03\xc7\x85\x90\x54\x1d\xf2\xb6\xf1\xff\x78\xda\x28\x87\x23\x42\xd8\x24\xac\xcd\xe9\x2b\x9e\xa4\x7a\x1c\x13\x8d\xf9\x5b\x9b\x0f\xa3\x54\x4a\xe4\x3a\xce\x06\x40\x78\x06\xf7\x98\x05\x0f\x24\x4e\x51\x01\x91\x08\x0f\x24\xa6\x33\x88\x50\x62\x4b\x98\xa0\xcb\x39\x62\x23\x74\xd8\x3d\xe5\x98\x2f\x0e\x95\x6b\x54\xcf\x30\x31\x88\x95\xe9\xe6\xf5\x07\xda\xc1\xb2\xba\x28\x76\xea\x57\x37\xa9\x4e\x52\xbd\xf3\xfa\xb9\x9f\xd0\x09\x65\x78\xa9\x34\x65\x44\x77\xe8\x81\x4d\x82\xdb\xaf\x98\x27\xcb\x93\xff\x02\x00\x00\xff\xff\x52\x36\x61\xbc\x68\x1b\x00\x00")

func workflowSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_workflowSchemaJson,
		"workflow.schema.json",
	)
}

func workflowSchemaJson() (*asset, error) {
	bytes, err := workflowSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "workflow.schema.json", size: 7016, mode: os.FileMode(0640), modTime: time.Unix(1556283610, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd6, 0x43, 0x8b, 0xdd, 0xd3, 0x6c, 0x39, 0x98, 0xe7, 0x63, 0x7b, 0xa6, 0x4e, 0xff, 0x1e, 0x31, 0xdf, 0x34, 0xda, 0xf4, 0xa6, 0x5f, 0x79, 0xc1, 0xe0, 0x1c, 0x37, 0x39, 0x89, 0x7d, 0xc6, 0xb8}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"workflow.schema.json": workflowSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"workflow.schema.json": &bintree{workflowSchemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
