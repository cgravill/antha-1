// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schemas/workflow.schema.json (6.325kB)

package workflow

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _workflowSchemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\x38\xa8\x01\xb2\x75\xb2\x94\xed\x65\x58\x5e\x86\x2d\x29\xba\x14\x48\x63\x2c\xc6\x1e\x56\xb8\x05\x2d\x9d\x2d\x36\x22\xa9\x92\x94\x13\xad\xcb\x77\x1f\x24\xcb\xd4\x3f\x4a\x56\x6a\xbb\x43\x9f\x2c\x93\x77\xbc\xbb\xdf\xfd\xee\x78\xfc\x7c\x02\x00\xe0\x9c\xd2\xd0\xb9\x00\x27\xd2\x3a\x51\x17\xbe\x4f\xb8\x8e\x88\x17\x08\xe6\x3f\x08\x79\xbf\x8c\xc5\x83\x9a\xa8\x20\x42\x46\x1c\xb7\x54\x28\xff\x96\x4a\x17\xbe\xff\x51\x09\x5e\x0a\x79\x42\xae\xfc\x50\x92\xa5\x9e\x9c\xff\xec\x6f\xd6\x5e\x6c\x35\x43\x54\x81\xa4\x89\xa6\x82\xe7\xda\x6f\xee\x6e\xdf\xc2\x5d\x21\x02\x4b\x21\x61\xb3\xbd\xa0\x7c\x05\xc6\xf6\x56\x55\x67\x09\xe6\x3a\x62\xf1\x11\x03\xbd\x5d\x95\xf8\x29\xa5\x12\xf3\x00\xde\x15\x2b\xc5\xea\xe6\xc8\xbf\x50\xaa\xdc\x50\xb1\x3e\x2f\x15\x48\x18\xd2\xdc\x3c\x89\xa7\x52\x24\x28\x35\x45\xe5\x5c\xc0\x92\xc4\x0a\x4b\x91\xa4\xbe\xf1\xb9\x3a\xb5\x0a\xbb\x5a\x6c\xb8\xa6\xb4\xa4\x7c\xe5\x98\xcd\x27\xb7\x52\x7e\x23\x16\xd7\xe1\x4e\x55\xb7\xb9\x9b\x10\xad\x51\x16\x50\xbd\x7f\x47\x26\xff\xfc\x36\xf9\x7b\x5e\xfe\x9e\x4f\x7e\xf9\x00\x93\xf9\xcb\x53\xbb\xb9\x1b\xd4\x03\x8e\xf2\x34\x8e\xdb\xb6\x4e\x03\xc1\x18\x72\x9d\xef\xcf\x6e\xaf\x6e\x2f\x80\xb2\x24\xc6\x7c\x09\xca\xcc\xc2\x1f\x64\x8d\xfc\x4c\x83\x42\xe4\x20\x38\x82\x58\x82\x8e\x50\x21\x50\x9e\x7f\xc0\x03\x8d\x43\xc8\x50\xdb\x9d\xba\xe6\x6b\xe4\x5a\xc8\xac\xdf\xb3\x46\x76\xbf\xa6\x6f\x4d\xca\x74\xfc\xeb\x7a\x70\x25\xe0\x01\x81\x23\x86\xa0\x23\xaa\x7e\x85\x3b\x44\xa6\x40\x62\x98\xf2\x90\x70\x0d\x5a\x40\x44\xd6\x08\x25\x6d\x80\xf0\x10\x1a\x56\x60\x21\x74\x04\x21\x2e\x29\xc7\xd0\x6b\xc7\x3c\xcc\x0c\xe4\x29\xcb\x39\xef\xfc\xe4\x9d\x3b\x73\x6b\x44\x7f\x62\x22\x14\xd5\x42\xb6\x89\x3c\x02\x70\x46\x79\xa3\x3c\x7e\x6c\x13\x73\xb3\x99\xbd\x25\xcc\x72\x38\xb4\xb9\xfb\x9d\xcc\x7d\xf1\x4c\x67\xf9\x77\x45\x75\x94\x2e\xf2\xcf\xef\x7d\xa7\xa1\xfb\x64\x2f\x81\xa9\xbd\x26\x8d\x98\xf7\xd2\xba\xbe\xc9\x9d\xc4\x65\xee\xc6\x0b\xbf\xc0\xba\x28\x7f\xe5\xcb\x2d\x3c\x99\xd3\x51\x7b\x3a\xb1\xff\xab\xc3\xfb\x6a\xc3\xbf\x67\x43\xdb\xd3\x5d\xcc\xfe\x2c\x4b\x7a\xb6\x1a\x87\x13\x29\x49\xd6\x3a\xdb\x08\x31\xca\xaf\x35\x32\x4b\xe6\x8c\x08\x2d\xf7\xed\x66\xa0\x1f\x37\xdc\xc4\x9d\xbb\xd9\x05\x0e\x3a\xe0\x41\x37\xa7\xb0\xe9\x05\x4a\x13\x1e\x8c\x09\xd5\x8a\x63\x3d\xd6\x21\xaa\x1a\xb9\xdd\x94\xad\x02\xef\x14\x7b\x20\xf8\x92\x4a\x56\x54\x3a\x48\x5c\xe1\xa3\x07\xb3\xfc\x9b\xaa\xa2\xb7\x70\xc2\x8a\x86\x43\x38\x94\xf8\x00\x2d\x03\x74\x01\xbd\x95\x07\x67\x2c\xfb\x40\x62\xfa\x29\x15\xfa\xac\x27\x14\xe8\x69\xf9\x79\xab\x9f\xcc\x7f\x38\xed\x81\xbb\x2f\xde\x51\x85\x63\xc4\x07\x0a\xa8\xc2\x65\x88\x10\xdb\x84\xda\xbd\x04\x2b\x31\xec\xab\x83\x74\xb9\x14\x9c\x63\x50\x58\xde\xb3\x48\xf6\xad\x80\xad\x4b\x95\x47\xa3\xeb\x61\xb0\xe3\xed\x9e\x50\x8c\x68\x7d\xfa\x29\x1b\x87\x5b\x2f\x2d\xfb\xc5\x70\x99\x93\x79\xf5\x85\x7d\x6b\xa8\xe5\x5b\xea\x26\xc2\xe0\x7e\x77\xd5\x40\x88\x6b\x1a\x20\x04\x31\x51\x6a\x5b\x30\xaf\x69\xac\x04\x9f\xd2\x04\xf5\x0d\x79\xb4\x15\xcd\xf8\x62\xf9\xc2\x5b\xe5\xfd\xeb\x58\x2c\x48\x7c\x43\x1f\x51\x9e\x8e\x6e\x54\x87\xc9\xb7\x0d\x5f\x2b\x1d\x37\xd8\x5d\xe6\xd0\x0d\x07\x5d\x67\x4b\x8d\x19\x27\x35\x59\xa7\x76\x70\x73\xf8\xad\x5d\x97\x07\xbe\xf0\xae\xa8\xc4\xc0\x7a\x70\xc7\x40\x7b\xc0\xee\x89\xb4\xd0\xf9\x5d\x12\x1e\x44\x87\x3d\xf3\x52\x30\x46\xf5\x1e\x67\x1e\xa5\xf0\x2b\x00\xed\xf5\x5e\xbf\xb1\x0f\x9c\x3b\x33\x63\x16\x6d\xe1\xb0\x60\x97\x03\xd6\x94\xe8\x7d\xb2\x78\x14\xc4\x5b\x61\xbb\x4d\x67\x07\xb3\x60\xae\xc9\x03\x67\xe2\x55\x95\xe4\xc3\xa7\xc2\xfa\x9a\x1c\xe7\xf8\xd8\x00\x8c\xdc\xe3\xee\x39\xa4\x7a\xc6\xb2\x05\xca\x81\x81\x63\x60\xce\xea\xef\x36\xcf\x37\xb3\xc7\x5c\x33\x25\x92\x30\xd4\x28\xc7\xcf\xc1\x5f\x89\xe3\x6d\x42\xb9\x0d\x67\x47\x71\xbc\x36\x19\x1d\x98\xed\x77\x22\x95\x96\x1a\x32\xfb\xf6\x9b\x32\x30\xfe\xcc\x50\x32\xca\x49\x3c\x8e\xfe\x33\x22\x57\x38\xd0\xf6\xf7\xb0\x76\x94\xd4\x95\xe8\xb8\xc6\x73\x7b\xb6\x2c\x0e\x1e\xa7\x29\xf5\xf6\xbc\x8e\x99\xe7\x34\x25\xc3\xc6\x3d\xfb\xdd\x31\xab\xc7\x44\xee\xb6\xfd\xb5\xa7\xa4\x3e\xcb\x1d\x7a\xcc\x2a\x8e\xde\xfb\xb9\xbd\xdf\x33\xfa\x79\xcf\x81\xf6\x13\xfa\x4a\x48\xaa\xbe\xdd\xd7\x73\x1d\x8e\x08\xa1\x4a\xd8\x50\xd0\xd7\x3c\x49\xf5\x34\x26\x1a\x8b\xf7\x9d\x07\x97\xa9\x94\xc8\x75\x9c\xb9\x40\x78\x06\xf7\x98\xf9\x6b\x12\xa7\xa8\x80\x48\x84\x35\x89\x69\x08\x11\x4a\x1c\x80\x09\xc6\xdc\x2a\x06\xa1\xff\xf3\x51\xdb\x79\xa6\x9c\x3c\xfd\x17\x00\x00\xff\xff\xe9\xf0\x87\xac\xb5\x18\x00\x00")

func workflowSchemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_workflowSchemaJson,
		"workflow.schema.json",
	)
}

func workflowSchemaJson() (*asset, error) {
	bytes, err := workflowSchemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "workflow.schema.json", size: 6325, mode: os.FileMode(420), modTime: time.Unix(1554383548, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x89, 0x86, 0x4c, 0x9d, 0x86, 0xe7, 0xd2, 0x47, 0x34, 0x6a, 0x94, 0x95, 0xaa, 0x1d, 0x61, 0xd9, 0x4e, 0xc, 0xcb, 0x2c, 0x2e, 0x8, 0x71, 0xe3, 0x9b, 0x7, 0x65, 0xb7, 0xc, 0x69, 0x99, 0xcb}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"workflow.schema.json": workflowSchemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"workflow.schema.json": &bintree{workflowSchemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
