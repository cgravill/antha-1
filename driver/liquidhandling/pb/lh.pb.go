// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/antha-lang/antha/driver/liquidhandling/pb/lh.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddPlateToRequest struct {
	Position             string   `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	Plate_JSON           string   `protobuf:"bytes,2,opt,name=plate_JSON,json=plateJSON,proto3" json:"plate_JSON,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddPlateToRequest) Reset()         { *m = AddPlateToRequest{} }
func (m *AddPlateToRequest) String() string { return proto.CompactTextString(m) }
func (*AddPlateToRequest) ProtoMessage()    {}
func (*AddPlateToRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_lh_c68294f182eef188, []int{0}
}
func (m *AddPlateToRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddPlateToRequest.Unmarshal(m, b)
}
func (m *AddPlateToRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddPlateToRequest.Marshal(b, m, deterministic)
}
func (dst *AddPlateToRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPlateToRequest.Merge(dst, src)
}
func (m *AddPlateToRequest) XXX_Size() int {
	return xxx_messageInfo_AddPlateToRequest.Size(m)
}
func (m *AddPlateToRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPlateToRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddPlateToRequest proto.InternalMessageInfo

func (m *AddPlateToRequest) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *AddPlateToRequest) GetPlate_JSON() string {
	if m != nil {
		return m.Plate_JSON
	}
	return ""
}

func (m *AddPlateToRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type FinalizeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FinalizeRequest) Reset()         { *m = FinalizeRequest{} }
func (m *FinalizeRequest) String() string { return proto.CompactTextString(m) }
func (*FinalizeRequest) ProtoMessage()    {}
func (*FinalizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_lh_c68294f182eef188, []int{1}
}
func (m *FinalizeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FinalizeRequest.Unmarshal(m, b)
}
func (m *FinalizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FinalizeRequest.Marshal(b, m, deterministic)
}
func (dst *FinalizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinalizeRequest.Merge(dst, src)
}
func (m *FinalizeRequest) XXX_Size() int {
	return xxx_messageInfo_FinalizeRequest.Size(m)
}
func (m *FinalizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FinalizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FinalizeRequest proto.InternalMessageInfo

type ConfigureRequest struct {
	Data                 [][]byte `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigureRequest) Reset()         { *m = ConfigureRequest{} }
func (m *ConfigureRequest) String() string { return proto.CompactTextString(m) }
func (*ConfigureRequest) ProtoMessage()    {}
func (*ConfigureRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_lh_c68294f182eef188, []int{2}
}
func (m *ConfigureRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigureRequest.Unmarshal(m, b)
}
func (m *ConfigureRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigureRequest.Marshal(b, m, deterministic)
}
func (dst *ConfigureRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigureRequest.Merge(dst, src)
}
func (m *ConfigureRequest) XXX_Size() int {
	return xxx_messageInfo_ConfigureRequest.Size(m)
}
func (m *ConfigureRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigureRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigureRequest proto.InternalMessageInfo

func (m *ConfigureRequest) GetData() [][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetOutputFileRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetOutputFileRequest) Reset()         { *m = GetOutputFileRequest{} }
func (m *GetOutputFileRequest) String() string { return proto.CompactTextString(m) }
func (*GetOutputFileRequest) ProtoMessage()    {}
func (*GetOutputFileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_lh_c68294f182eef188, []int{3}
}
func (m *GetOutputFileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetOutputFileRequest.Unmarshal(m, b)
}
func (m *GetOutputFileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetOutputFileRequest.Marshal(b, m, deterministic)
}
func (dst *GetOutputFileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOutputFileRequest.Merge(dst, src)
}
func (m *GetOutputFileRequest) XXX_Size() int {
	return xxx_messageInfo_GetOutputFileRequest.Size(m)
}
func (m *GetOutputFileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOutputFileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOutputFileRequest proto.InternalMessageInfo

type InitializeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InitializeRequest) Reset()         { *m = InitializeRequest{} }
func (m *InitializeRequest) String() string { return proto.CompactTextString(m) }
func (*InitializeRequest) ProtoMessage()    {}
func (*InitializeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_lh_c68294f182eef188, []int{4}
}
func (m *InitializeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InitializeRequest.Unmarshal(m, b)
}
func (m *InitializeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InitializeRequest.Marshal(b, m, deterministic)
}
func (dst *InitializeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InitializeRequest.Merge(dst, src)
}
func (m *InitializeRequest) XXX_Size() int {
	return xxx_messageInfo_InitializeRequest.Size(m)
}
func (m *InitializeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InitializeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InitializeRequest proto.InternalMessageInfo

type MessageRequest struct {
	Level                int32    `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Text                 string   `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	ShowCancel           bool     `protobuf:"varint,4,opt,name=show_cancel,json=showCancel,proto3" json:"show_cancel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageRequest) Reset()         { *m = MessageRequest{} }
func (m *MessageRequest) String() string { return proto.CompactTextString(m) }
func (*MessageRequest) ProtoMessage()    {}
func (*MessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_lh_c68294f182eef188, []int{5}
}
func (m *MessageRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageRequest.Unmarshal(m, b)
}
func (m *MessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageRequest.Marshal(b, m, deterministic)
}
func (dst *MessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageRequest.Merge(dst, src)
}
func (m *MessageRequest) XXX_Size() int {
	return xxx_messageInfo_MessageRequest.Size(m)
}
func (m *MessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MessageRequest proto.InternalMessageInfo

func (m *MessageRequest) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *MessageRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MessageRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *MessageRequest) GetShowCancel() bool {
	if m != nil {
		return m.ShowCancel
	}
	return false
}

type RemoveAllPlatesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoveAllPlatesRequest) Reset()         { *m = RemoveAllPlatesRequest{} }
func (m *RemoveAllPlatesRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveAllPlatesRequest) ProtoMessage()    {}
func (*RemoveAllPlatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_lh_c68294f182eef188, []int{6}
}
func (m *RemoveAllPlatesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoveAllPlatesRequest.Unmarshal(m, b)
}
func (m *RemoveAllPlatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoveAllPlatesRequest.Marshal(b, m, deterministic)
}
func (dst *RemoveAllPlatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoveAllPlatesRequest.Merge(dst, src)
}
func (m *RemoveAllPlatesRequest) XXX_Size() int {
	return xxx_messageInfo_RemoveAllPlatesRequest.Size(m)
}
func (m *RemoveAllPlatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoveAllPlatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemoveAllPlatesRequest proto.InternalMessageInfo

type RemovePlateAtRequest struct {
	Position             string   `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemovePlateAtRequest) Reset()         { *m = RemovePlateAtRequest{} }
func (m *RemovePlateAtRequest) String() string { return proto.CompactTextString(m) }
func (*RemovePlateAtRequest) ProtoMessage()    {}
func (*RemovePlateAtRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_lh_c68294f182eef188, []int{7}
}
func (m *RemovePlateAtRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemovePlateAtRequest.Unmarshal(m, b)
}
func (m *RemovePlateAtRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemovePlateAtRequest.Marshal(b, m, deterministic)
}
func (dst *RemovePlateAtRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemovePlateAtRequest.Merge(dst, src)
}
func (m *RemovePlateAtRequest) XXX_Size() int {
	return xxx_messageInfo_RemovePlateAtRequest.Size(m)
}
func (m *RemovePlateAtRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RemovePlateAtRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RemovePlateAtRequest proto.InternalMessageInfo

func (m *RemovePlateAtRequest) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

type AspirateRequest struct {
	Volume               []float64 `protobuf:"fixed64,1,rep,packed,name=volume,proto3" json:"volume,omitempty"`
	Overstroke           []bool    `protobuf:"varint,2,rep,packed,name=overstroke,proto3" json:"overstroke,omitempty"`
	Head                 int32     `protobuf:"varint,3,opt,name=head,proto3" json:"head,omitempty"`
	Multi                int32     `protobuf:"varint,4,opt,name=multi,proto3" json:"multi,omitempty"`
	Platetype            []string  `protobuf:"bytes,5,rep,name=platetype,proto3" json:"platetype,omitempty"`
	What                 []string  `protobuf:"bytes,6,rep,name=what,proto3" json:"what,omitempty"`
	Llf                  []bool    `protobuf:"varint,7,rep,packed,name=llf,proto3" json:"llf,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *AspirateRequest) Reset()         { *m = AspirateRequest{} }
func (m *AspirateRequest) String() string { return proto.CompactTextString(m) }
func (*AspirateRequest) ProtoMessage()    {}
func (*AspirateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_lh_c68294f182eef188, []int{8}
}
func (m *AspirateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AspirateRequest.Unmarshal(m, b)
}
func (m *AspirateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AspirateRequest.Marshal(b, m, deterministic)
}
func (dst *AspirateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AspirateRequest.Merge(dst, src)
}
func (m *AspirateRequest) XXX_Size() int {
	return xxx_messageInfo_AspirateRequest.Size(m)
}
func (m *AspirateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AspirateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AspirateRequest proto.InternalMessageInfo

func (m *AspirateRequest) GetVolume() []float64 {
	if m != nil {
		return m.Volume
	}
	return nil
}

func (m *AspirateRequest) GetOverstroke() []bool {
	if m != nil {
		return m.Overstroke
	}
	return nil
}

func (m *AspirateRequest) GetHead() int32 {
	if m != nil {
		return m.Head
	}
	return 0
}

func (m *AspirateRequest) GetMulti() int32 {
	if m != nil {
		return m.Multi
	}
	return 0
}

func (m *AspirateRequest) GetPlatetype() []string {
	if m != nil {
		return m.Platetype
	}
	return nil
}

func (m *AspirateRequest) GetWhat() []string {
	if m != nil {
		return m.What
	}
	return nil
}

func (m *AspirateRequest) GetLlf() []bool {
	if m != nil {
		return m.Llf
	}
	return nil
}

type DispenseRequest struct {
	Volume               []float64 `protobuf:"fixed64,1,rep,packed,name=volume,proto3" json:"volume,omitempty"`
	Blowout              []bool    `protobuf:"varint,2,rep,packed,name=blowout,proto3" json:"blowout,omitempty"`
	Head                 int32     `protobuf:"varint,3,opt,name=head,proto3" json:"head,omitempty"`
	Multi                int32     `protobuf:"varint,4,opt,name=multi,proto3" json:"multi,omitempty"`
	Platetype            []string  `protobuf:"bytes,5,rep,name=platetype,proto3" json:"platetype,omitempty"`
	What                 []string  `protobuf:"bytes,6,rep,name=what,proto3" json:"what,omitempty"`
	Llf                  []bool    `protobuf:"varint,7,rep,packed,name=llf,proto3" json:"llf,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DispenseRequest) Reset()         { *m = DispenseRequest{} }
func (m *DispenseRequest) String() string { return proto.CompactTextString(m) }
func (*DispenseRequest) ProtoMessage()    {}
func (*DispenseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_lh_c68294f182eef188, []int{9}
}
func (m *DispenseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DispenseRequest.Unmarshal(m, b)
}
func (m *DispenseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DispenseRequest.Marshal(b, m, deterministic)
}
func (dst *DispenseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DispenseRequest.Merge(dst, src)
}
func (m *DispenseRequest) XXX_Size() int {
	return xxx_messageInfo_DispenseRequest.Size(m)
}
func (m *DispenseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DispenseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DispenseRequest proto.InternalMessageInfo

func (m *DispenseRequest) GetVolume() []float64 {
	if m != nil {
		return m.Volume
	}
	return nil
}

func (m *DispenseRequest) GetBlowout() []bool {
	if m != nil {
		return m.Blowout
	}
	return nil
}

func (m *DispenseRequest) GetHead() int32 {
	if m != nil {
		return m.Head
	}
	return 0
}

func (m *DispenseRequest) GetMulti() int32 {
	if m != nil {
		return m.Multi
	}
	return 0
}

func (m *DispenseRequest) GetPlatetype() []string {
	if m != nil {
		return m.Platetype
	}
	return nil
}

func (m *DispenseRequest) GetWhat() []string {
	if m != nil {
		return m.What
	}
	return nil
}

func (m *DispenseRequest) GetLlf() []bool {
	if m != nil {
		return m.Llf
	}
	return nil
}

type LoadTipsRequest struct {
	Channels             []int32  `protobuf:"varint,1,rep,packed,name=channels,proto3" json:"channels,omitempty"`
	Head                 int32    `protobuf:"varint,2,opt,name=head,proto3" json:"head,omitempty"`
	Multi                int32    `protobuf:"varint,3,opt,name=multi,proto3" json:"multi,omitempty"`
	Platetype            []string `protobuf:"bytes,4,rep,name=platetype,proto3" json:"platetype,omitempty"`
	Position             []string `protobuf:"bytes,5,rep,name=position,proto3" json:"position,omitempty"`
	Well                 []string `protobuf:"bytes,6,rep,name=well,proto3" json:"well,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoadTipsRequest) Reset()         { *m = LoadTipsRequest{} }
func (m *LoadTipsRequest) String() string { return proto.CompactTextString(m) }
func (*LoadTipsRequest) ProtoMessage()    {}
func (*LoadTipsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_lh_c68294f182eef188, []int{10}
}
func (m *LoadTipsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoadTipsRequest.Unmarshal(m, b)
}
func (m *LoadTipsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoadTipsRequest.Marshal(b, m, deterministic)
}
func (dst *LoadTipsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadTipsRequest.Merge(dst, src)
}
func (m *LoadTipsRequest) XXX_Size() int {
	return xxx_messageInfo_LoadTipsRequest.Size(m)
}
func (m *LoadTipsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadTipsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoadTipsRequest proto.InternalMessageInfo

func (m *LoadTipsRequest) GetChannels() []int32 {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *LoadTipsRequest) GetHead() int32 {
	if m != nil {
		return m.Head
	}
	return 0
}

func (m *LoadTipsRequest) GetMulti() int32 {
	if m != nil {
		return m.Multi
	}
	return 0
}

func (m *LoadTipsRequest) GetPlatetype() []string {
	if m != nil {
		return m.Platetype
	}
	return nil
}

func (m *LoadTipsRequest) GetPosition() []string {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *LoadTipsRequest) GetWell() []string {
	if m != nil {
		return m.Well
	}
	return nil
}

type MixRequest struct {
	Head                 int32     `protobuf:"varint,1,opt,name=head,proto3" json:"head,omitempty"`
	Volume               []float64 `protobuf:"fixed64,2,rep,packed,name=volume,proto3" json:"volume,omitempty"`
	Platetype            []string  `protobuf:"bytes,3,rep,name=platetype,proto3" json:"platetype,omitempty"`
	Cycles               []int32   `protobuf:"varint,4,rep,packed,name=cycles,proto3" json:"cycles,omitempty"`
	Multi                int32     `protobuf:"varint,5,opt,name=multi,proto3" json:"multi,omitempty"`
	What                 []string  `protobuf:"bytes,6,rep,name=what,proto3" json:"what,omitempty"`
	Blowout              []bool    `protobuf:"varint,7,rep,packed,name=blowout,proto3" json:"blowout,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *MixRequest) Reset()         { *m = MixRequest{} }
func (m *MixRequest) String() string { return proto.CompactTextString(m) }
func (*MixRequest) ProtoMessage()    {}
func (*MixRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_lh_c68294f182eef188, []int{11}
}
func (m *MixRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MixRequest.Unmarshal(m, b)
}
func (m *MixRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MixRequest.Marshal(b, m, deterministic)
}
func (dst *MixRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MixRequest.Merge(dst, src)
}
func (m *MixRequest) XXX_Size() int {
	return xxx_messageInfo_MixRequest.Size(m)
}
func (m *MixRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MixRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MixRequest proto.InternalMessageInfo

func (m *MixRequest) GetHead() int32 {
	if m != nil {
		return m.Head
	}
	return 0
}

func (m *MixRequest) GetVolume() []float64 {
	if m != nil {
		return m.Volume
	}
	return nil
}

func (m *MixRequest) GetPlatetype() []string {
	if m != nil {
		return m.Platetype
	}
	return nil
}

func (m *MixRequest) GetCycles() []int32 {
	if m != nil {
		return m.Cycles
	}
	return nil
}

func (m *MixRequest) GetMulti() int32 {
	if m != nil {
		return m.Multi
	}
	return 0
}

func (m *MixRequest) GetWhat() []string {
	if m != nil {
		return m.What
	}
	return nil
}

func (m *MixRequest) GetBlowout() []bool {
	if m != nil {
		return m.Blowout
	}
	return nil
}

type MoveRequest struct {
	Deckposition         []string  `protobuf:"bytes,1,rep,name=deckposition,proto3" json:"deckposition,omitempty"`
	Wellcoords           []string  `protobuf:"bytes,2,rep,name=wellcoords,proto3" json:"wellcoords,omitempty"`
	Reference            []int32   `protobuf:"varint,3,rep,packed,name=reference,proto3" json:"reference,omitempty"`
	OffsetX              []float64 `protobuf:"fixed64,4,rep,packed,name=offset_x,json=offsetX,proto3" json:"offset_x,omitempty"`
	OffsetY              []float64 `protobuf:"fixed64,5,rep,packed,name=offset_y,json=offsetY,proto3" json:"offset_y,omitempty"`
	OffsetZ              []float64 `protobuf:"fixed64,6,rep,packed,name=offset_z,json=offsetZ,proto3" json:"offset_z,omitempty"`
	PlateType            []string  `protobuf:"bytes,7,rep,name=plate_type,json=plateType,proto3" json:"plate_type,omitempty"`
	Head                 int32     `protobuf:"varint,8,opt,name=head,proto3" json:"head,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *MoveRequest) Reset()         { *m = MoveRequest{} }
func (m *MoveRequest) String() string { return proto.CompactTextString(m) }
func (*MoveRequest) ProtoMessage()    {}
func (*MoveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_lh_c68294f182eef188, []int{12}
}
func (m *MoveRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MoveRequest.Unmarshal(m, b)
}
func (m *MoveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MoveRequest.Marshal(b, m, deterministic)
}
func (dst *MoveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoveRequest.Merge(dst, src)
}
func (m *MoveRequest) XXX_Size() int {
	return xxx_messageInfo_MoveRequest.Size(m)
}
func (m *MoveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MoveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MoveRequest proto.InternalMessageInfo

func (m *MoveRequest) GetDeckposition() []string {
	if m != nil {
		return m.Deckposition
	}
	return nil
}

func (m *MoveRequest) GetWellcoords() []string {
	if m != nil {
		return m.Wellcoords
	}
	return nil
}

func (m *MoveRequest) GetReference() []int32 {
	if m != nil {
		return m.Reference
	}
	return nil
}

func (m *MoveRequest) GetOffsetX() []float64 {
	if m != nil {
		return m.OffsetX
	}
	return nil
}

func (m *MoveRequest) GetOffsetY() []float64 {
	if m != nil {
		return m.OffsetY
	}
	return nil
}

func (m *MoveRequest) GetOffsetZ() []float64 {
	if m != nil {
		return m.OffsetZ
	}
	return nil
}

func (m *MoveRequest) GetPlateType() []string {
	if m != nil {
		return m.PlateType
	}
	return nil
}

func (m *MoveRequest) GetHead() int32 {
	if m != nil {
		return m.Head
	}
	return 0
}

type ResetPistonsRequest struct {
	Head                 int32    `protobuf:"varint,1,opt,name=head,proto3" json:"head,omitempty"`
	Channel              int32    `protobuf:"varint,2,opt,name=channel,proto3" json:"channel,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResetPistonsRequest) Reset()         { *m = ResetPistonsRequest{} }
func (m *ResetPistonsRequest) String() string { return proto.CompactTextString(m) }
func (*ResetPistonsRequest) ProtoMessage()    {}
func (*ResetPistonsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_lh_c68294f182eef188, []int{13}
}
func (m *ResetPistonsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResetPistonsRequest.Unmarshal(m, b)
}
func (m *ResetPistonsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResetPistonsRequest.Marshal(b, m, deterministic)
}
func (dst *ResetPistonsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResetPistonsRequest.Merge(dst, src)
}
func (m *ResetPistonsRequest) XXX_Size() int {
	return xxx_messageInfo_ResetPistonsRequest.Size(m)
}
func (m *ResetPistonsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResetPistonsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResetPistonsRequest proto.InternalMessageInfo

func (m *ResetPistonsRequest) GetHead() int32 {
	if m != nil {
		return m.Head
	}
	return 0
}

func (m *ResetPistonsRequest) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

type SetDriveSpeedRequest struct {
	Drive                string   `protobuf:"bytes,1,opt,name=drive,proto3" json:"drive,omitempty"`
	Rate                 float64  `protobuf:"fixed64,2,opt,name=rate,proto3" json:"rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetDriveSpeedRequest) Reset()         { *m = SetDriveSpeedRequest{} }
func (m *SetDriveSpeedRequest) String() string { return proto.CompactTextString(m) }
func (*SetDriveSpeedRequest) ProtoMessage()    {}
func (*SetDriveSpeedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_lh_c68294f182eef188, []int{14}
}
func (m *SetDriveSpeedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetDriveSpeedRequest.Unmarshal(m, b)
}
func (m *SetDriveSpeedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetDriveSpeedRequest.Marshal(b, m, deterministic)
}
func (dst *SetDriveSpeedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDriveSpeedRequest.Merge(dst, src)
}
func (m *SetDriveSpeedRequest) XXX_Size() int {
	return xxx_messageInfo_SetDriveSpeedRequest.Size(m)
}
func (m *SetDriveSpeedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDriveSpeedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetDriveSpeedRequest proto.InternalMessageInfo

func (m *SetDriveSpeedRequest) GetDrive() string {
	if m != nil {
		return m.Drive
	}
	return ""
}

func (m *SetDriveSpeedRequest) GetRate() float64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

type SetPipetteSpeedRequest struct {
	Head                 int32    `protobuf:"varint,1,opt,name=head,proto3" json:"head,omitempty"`
	Channel              int32    `protobuf:"varint,2,opt,name=channel,proto3" json:"channel,omitempty"`
	Rate                 float64  `protobuf:"fixed64,3,opt,name=rate,proto3" json:"rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SetPipetteSpeedRequest) Reset()         { *m = SetPipetteSpeedRequest{} }
func (m *SetPipetteSpeedRequest) String() string { return proto.CompactTextString(m) }
func (*SetPipetteSpeedRequest) ProtoMessage()    {}
func (*SetPipetteSpeedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_lh_c68294f182eef188, []int{15}
}
func (m *SetPipetteSpeedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SetPipetteSpeedRequest.Unmarshal(m, b)
}
func (m *SetPipetteSpeedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SetPipetteSpeedRequest.Marshal(b, m, deterministic)
}
func (dst *SetPipetteSpeedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetPipetteSpeedRequest.Merge(dst, src)
}
func (m *SetPipetteSpeedRequest) XXX_Size() int {
	return xxx_messageInfo_SetPipetteSpeedRequest.Size(m)
}
func (m *SetPipetteSpeedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetPipetteSpeedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetPipetteSpeedRequest proto.InternalMessageInfo

func (m *SetPipetteSpeedRequest) GetHead() int32 {
	if m != nil {
		return m.Head
	}
	return 0
}

func (m *SetPipetteSpeedRequest) GetChannel() int32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *SetPipetteSpeedRequest) GetRate() float64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

type UnloadTipsRequest struct {
	Channels             []int32  `protobuf:"varint,1,rep,packed,name=channels,proto3" json:"channels,omitempty"`
	Head                 int32    `protobuf:"varint,2,opt,name=head,proto3" json:"head,omitempty"`
	Multi                int32    `protobuf:"varint,3,opt,name=multi,proto3" json:"multi,omitempty"`
	Platetype            []string `protobuf:"bytes,4,rep,name=platetype,proto3" json:"platetype,omitempty"`
	Position             []string `protobuf:"bytes,5,rep,name=position,proto3" json:"position,omitempty"`
	Well                 []string `protobuf:"bytes,6,rep,name=well,proto3" json:"well,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnloadTipsRequest) Reset()         { *m = UnloadTipsRequest{} }
func (m *UnloadTipsRequest) String() string { return proto.CompactTextString(m) }
func (*UnloadTipsRequest) ProtoMessage()    {}
func (*UnloadTipsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_lh_c68294f182eef188, []int{16}
}
func (m *UnloadTipsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnloadTipsRequest.Unmarshal(m, b)
}
func (m *UnloadTipsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnloadTipsRequest.Marshal(b, m, deterministic)
}
func (dst *UnloadTipsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnloadTipsRequest.Merge(dst, src)
}
func (m *UnloadTipsRequest) XXX_Size() int {
	return xxx_messageInfo_UnloadTipsRequest.Size(m)
}
func (m *UnloadTipsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnloadTipsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnloadTipsRequest proto.InternalMessageInfo

func (m *UnloadTipsRequest) GetChannels() []int32 {
	if m != nil {
		return m.Channels
	}
	return nil
}

func (m *UnloadTipsRequest) GetHead() int32 {
	if m != nil {
		return m.Head
	}
	return 0
}

func (m *UnloadTipsRequest) GetMulti() int32 {
	if m != nil {
		return m.Multi
	}
	return 0
}

func (m *UnloadTipsRequest) GetPlatetype() []string {
	if m != nil {
		return m.Platetype
	}
	return nil
}

func (m *UnloadTipsRequest) GetPosition() []string {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *UnloadTipsRequest) GetWell() []string {
	if m != nil {
		return m.Well
	}
	return nil
}

type UpdateMetaDataRequest struct {
	LHProperties_JSON    string   `protobuf:"bytes,1,opt,name=LH_properties_JSON,json=LHPropertiesJSON,proto3" json:"LH_properties_JSON,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateMetaDataRequest) Reset()         { *m = UpdateMetaDataRequest{} }
func (m *UpdateMetaDataRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateMetaDataRequest) ProtoMessage()    {}
func (*UpdateMetaDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_lh_c68294f182eef188, []int{17}
}
func (m *UpdateMetaDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateMetaDataRequest.Unmarshal(m, b)
}
func (m *UpdateMetaDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateMetaDataRequest.Marshal(b, m, deterministic)
}
func (dst *UpdateMetaDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMetaDataRequest.Merge(dst, src)
}
func (m *UpdateMetaDataRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateMetaDataRequest.Size(m)
}
func (m *UpdateMetaDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMetaDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMetaDataRequest proto.InternalMessageInfo

func (m *UpdateMetaDataRequest) GetLHProperties_JSON() string {
	if m != nil {
		return m.LHProperties_JSON
	}
	return ""
}

type WaitRequest struct {
	Time                 float64  `protobuf:"fixed64,1,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WaitRequest) Reset()         { *m = WaitRequest{} }
func (m *WaitRequest) String() string { return proto.CompactTextString(m) }
func (*WaitRequest) ProtoMessage()    {}
func (*WaitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_lh_c68294f182eef188, []int{18}
}
func (m *WaitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WaitRequest.Unmarshal(m, b)
}
func (m *WaitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WaitRequest.Marshal(b, m, deterministic)
}
func (dst *WaitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WaitRequest.Merge(dst, src)
}
func (m *WaitRequest) XXX_Size() int {
	return xxx_messageInfo_WaitRequest.Size(m)
}
func (m *WaitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WaitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WaitRequest proto.InternalMessageInfo

func (m *WaitRequest) GetTime() float64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type TransferRequest struct {
	What                 []string  `protobuf:"bytes,1,rep,name=what,proto3" json:"what,omitempty"`
	Platefrom            []string  `protobuf:"bytes,2,rep,name=platefrom,proto3" json:"platefrom,omitempty"`
	Wellfrom             []string  `protobuf:"bytes,3,rep,name=wellfrom,proto3" json:"wellfrom,omitempty"`
	Plateto              []string  `protobuf:"bytes,4,rep,name=plateto,proto3" json:"plateto,omitempty"`
	Wellto               []string  `protobuf:"bytes,5,rep,name=wellto,proto3" json:"wellto,omitempty"`
	Volume               []float64 `protobuf:"fixed64,6,rep,packed,name=volume,proto3" json:"volume,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TransferRequest) Reset()         { *m = TransferRequest{} }
func (m *TransferRequest) String() string { return proto.CompactTextString(m) }
func (*TransferRequest) ProtoMessage()    {}
func (*TransferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_lh_c68294f182eef188, []int{19}
}
func (m *TransferRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransferRequest.Unmarshal(m, b)
}
func (m *TransferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransferRequest.Marshal(b, m, deterministic)
}
func (dst *TransferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransferRequest.Merge(dst, src)
}
func (m *TransferRequest) XXX_Size() int {
	return xxx_messageInfo_TransferRequest.Size(m)
}
func (m *TransferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransferRequest proto.InternalMessageInfo

func (m *TransferRequest) GetWhat() []string {
	if m != nil {
		return m.What
	}
	return nil
}

func (m *TransferRequest) GetPlatefrom() []string {
	if m != nil {
		return m.Platefrom
	}
	return nil
}

func (m *TransferRequest) GetWellfrom() []string {
	if m != nil {
		return m.Wellfrom
	}
	return nil
}

func (m *TransferRequest) GetPlateto() []string {
	if m != nil {
		return m.Plateto
	}
	return nil
}

func (m *TransferRequest) GetWellto() []string {
	if m != nil {
		return m.Wellto
	}
	return nil
}

func (m *TransferRequest) GetVolume() []float64 {
	if m != nil {
		return m.Volume
	}
	return nil
}

type CommandReply struct {
	Errorcode            int32    `protobuf:"varint,2,opt,name=errorcode,proto3" json:"errorcode,omitempty"`
	Msg                  string   `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommandReply) Reset()         { *m = CommandReply{} }
func (m *CommandReply) String() string { return proto.CompactTextString(m) }
func (*CommandReply) ProtoMessage()    {}
func (*CommandReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_lh_c68294f182eef188, []int{20}
}
func (m *CommandReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommandReply.Unmarshal(m, b)
}
func (m *CommandReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommandReply.Marshal(b, m, deterministic)
}
func (dst *CommandReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommandReply.Merge(dst, src)
}
func (m *CommandReply) XXX_Size() int {
	return xxx_messageInfo_CommandReply.Size(m)
}
func (m *CommandReply) XXX_DiscardUnknown() {
	xxx_messageInfo_CommandReply.DiscardUnknown(m)
}

var xxx_messageInfo_CommandReply proto.InternalMessageInfo

func (m *CommandReply) GetErrorcode() int32 {
	if m != nil {
		return m.Errorcode
	}
	return 0
}

func (m *CommandReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type ConfigureReply struct {
	LHProperties_JSON    string        `protobuf:"bytes,1,opt,name=LH_properties_JSON,json=LHPropertiesJSON,proto3" json:"LH_properties_JSON,omitempty"`
	Status               *CommandReply `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ConfigureReply) Reset()         { *m = ConfigureReply{} }
func (m *ConfigureReply) String() string { return proto.CompactTextString(m) }
func (*ConfigureReply) ProtoMessage()    {}
func (*ConfigureReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_lh_c68294f182eef188, []int{21}
}
func (m *ConfigureReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigureReply.Unmarshal(m, b)
}
func (m *ConfigureReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigureReply.Marshal(b, m, deterministic)
}
func (dst *ConfigureReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigureReply.Merge(dst, src)
}
func (m *ConfigureReply) XXX_Size() int {
	return xxx_messageInfo_ConfigureReply.Size(m)
}
func (m *ConfigureReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigureReply.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigureReply proto.InternalMessageInfo

func (m *ConfigureReply) GetLHProperties_JSON() string {
	if m != nil {
		return m.LHProperties_JSON
	}
	return ""
}

func (m *ConfigureReply) GetStatus() *CommandReply {
	if m != nil {
		return m.Status
	}
	return nil
}

type GetOutputFileReply struct {
	OutputFile           []byte        `protobuf:"bytes,1,opt,name=output_file,json=outputFile,proto3" json:"output_file,omitempty"`
	Status               *CommandReply `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetOutputFileReply) Reset()         { *m = GetOutputFileReply{} }
func (m *GetOutputFileReply) String() string { return proto.CompactTextString(m) }
func (*GetOutputFileReply) ProtoMessage()    {}
func (*GetOutputFileReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_lh_c68294f182eef188, []int{22}
}
func (m *GetOutputFileReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetOutputFileReply.Unmarshal(m, b)
}
func (m *GetOutputFileReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetOutputFileReply.Marshal(b, m, deterministic)
}
func (dst *GetOutputFileReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOutputFileReply.Merge(dst, src)
}
func (m *GetOutputFileReply) XXX_Size() int {
	return xxx_messageInfo_GetOutputFileReply.Size(m)
}
func (m *GetOutputFileReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOutputFileReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetOutputFileReply proto.InternalMessageInfo

func (m *GetOutputFileReply) GetOutputFile() []byte {
	if m != nil {
		return m.OutputFile
	}
	return nil
}

func (m *GetOutputFileReply) GetStatus() *CommandReply {
	if m != nil {
		return m.Status
	}
	return nil
}

func init() {
	proto.RegisterType((*AddPlateToRequest)(nil), "pb.AddPlateToRequest")
	proto.RegisterType((*FinalizeRequest)(nil), "pb.FinalizeRequest")
	proto.RegisterType((*ConfigureRequest)(nil), "pb.ConfigureRequest")
	proto.RegisterType((*GetOutputFileRequest)(nil), "pb.GetOutputFileRequest")
	proto.RegisterType((*InitializeRequest)(nil), "pb.InitializeRequest")
	proto.RegisterType((*MessageRequest)(nil), "pb.MessageRequest")
	proto.RegisterType((*RemoveAllPlatesRequest)(nil), "pb.RemoveAllPlatesRequest")
	proto.RegisterType((*RemovePlateAtRequest)(nil), "pb.RemovePlateAtRequest")
	proto.RegisterType((*AspirateRequest)(nil), "pb.AspirateRequest")
	proto.RegisterType((*DispenseRequest)(nil), "pb.DispenseRequest")
	proto.RegisterType((*LoadTipsRequest)(nil), "pb.LoadTipsRequest")
	proto.RegisterType((*MixRequest)(nil), "pb.MixRequest")
	proto.RegisterType((*MoveRequest)(nil), "pb.MoveRequest")
	proto.RegisterType((*ResetPistonsRequest)(nil), "pb.ResetPistonsRequest")
	proto.RegisterType((*SetDriveSpeedRequest)(nil), "pb.SetDriveSpeedRequest")
	proto.RegisterType((*SetPipetteSpeedRequest)(nil), "pb.SetPipetteSpeedRequest")
	proto.RegisterType((*UnloadTipsRequest)(nil), "pb.UnloadTipsRequest")
	proto.RegisterType((*UpdateMetaDataRequest)(nil), "pb.UpdateMetaDataRequest")
	proto.RegisterType((*WaitRequest)(nil), "pb.WaitRequest")
	proto.RegisterType((*TransferRequest)(nil), "pb.TransferRequest")
	proto.RegisterType((*CommandReply)(nil), "pb.CommandReply")
	proto.RegisterType((*ConfigureReply)(nil), "pb.ConfigureReply")
	proto.RegisterType((*GetOutputFileReply)(nil), "pb.GetOutputFileReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LowLevelLiquidhandlingDriverClient is the client API for LowLevelLiquidhandlingDriver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LowLevelLiquidhandlingDriverClient interface {
	AddPlateTo(ctx context.Context, in *AddPlateToRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Finalize(ctx context.Context, in *FinalizeRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureReply, error)
	GetOutputFile(ctx context.Context, in *GetOutputFileRequest, opts ...grpc.CallOption) (*GetOutputFileReply, error)
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Message(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*CommandReply, error)
	RemoveAllPlates(ctx context.Context, in *RemoveAllPlatesRequest, opts ...grpc.CallOption) (*CommandReply, error)
	RemovePlateAt(ctx context.Context, in *RemovePlateAtRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Aspirate(ctx context.Context, in *AspirateRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Dispense(ctx context.Context, in *DispenseRequest, opts ...grpc.CallOption) (*CommandReply, error)
	LoadTips(ctx context.Context, in *LoadTipsRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Mix(ctx context.Context, in *MixRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*CommandReply, error)
	ResetPistons(ctx context.Context, in *ResetPistonsRequest, opts ...grpc.CallOption) (*CommandReply, error)
	SetDriveSpeed(ctx context.Context, in *SetDriveSpeedRequest, opts ...grpc.CallOption) (*CommandReply, error)
	SetPipetteSpeed(ctx context.Context, in *SetPipetteSpeedRequest, opts ...grpc.CallOption) (*CommandReply, error)
	UnloadTips(ctx context.Context, in *UnloadTipsRequest, opts ...grpc.CallOption) (*CommandReply, error)
	UpdateMetaData(ctx context.Context, in *UpdateMetaDataRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Wait(ctx context.Context, in *WaitRequest, opts ...grpc.CallOption) (*CommandReply, error)
}

type lowLevelLiquidhandlingDriverClient struct {
	cc *grpc.ClientConn
}

func NewLowLevelLiquidhandlingDriverClient(cc *grpc.ClientConn) LowLevelLiquidhandlingDriverClient {
	return &lowLevelLiquidhandlingDriverClient{cc}
}

func (c *lowLevelLiquidhandlingDriverClient) AddPlateTo(ctx context.Context, in *AddPlateToRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/AddPlateTo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) Finalize(ctx context.Context, in *FinalizeRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/Finalize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureReply, error) {
	out := new(ConfigureReply)
	err := c.cc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) GetOutputFile(ctx context.Context, in *GetOutputFileRequest, opts ...grpc.CallOption) (*GetOutputFileReply, error) {
	out := new(GetOutputFileReply)
	err := c.cc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/GetOutputFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/Initialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) Message(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/Message", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) RemoveAllPlates(ctx context.Context, in *RemoveAllPlatesRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/RemoveAllPlates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) RemovePlateAt(ctx context.Context, in *RemovePlateAtRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/RemovePlateAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) Aspirate(ctx context.Context, in *AspirateRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/Aspirate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) Dispense(ctx context.Context, in *DispenseRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/Dispense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) LoadTips(ctx context.Context, in *LoadTipsRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/LoadTips", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) Mix(ctx context.Context, in *MixRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/Mix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) Move(ctx context.Context, in *MoveRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/Move", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) ResetPistons(ctx context.Context, in *ResetPistonsRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/ResetPistons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) SetDriveSpeed(ctx context.Context, in *SetDriveSpeedRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/SetDriveSpeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) SetPipetteSpeed(ctx context.Context, in *SetPipetteSpeedRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/SetPipetteSpeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) UnloadTips(ctx context.Context, in *UnloadTipsRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/UnloadTips", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) UpdateMetaData(ctx context.Context, in *UpdateMetaDataRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/UpdateMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lowLevelLiquidhandlingDriverClient) Wait(ctx context.Context, in *WaitRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/pb.LowLevelLiquidhandlingDriver/Wait", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LowLevelLiquidhandlingDriverServer is the server API for LowLevelLiquidhandlingDriver service.
type LowLevelLiquidhandlingDriverServer interface {
	AddPlateTo(context.Context, *AddPlateToRequest) (*CommandReply, error)
	Finalize(context.Context, *FinalizeRequest) (*CommandReply, error)
	Configure(context.Context, *ConfigureRequest) (*ConfigureReply, error)
	GetOutputFile(context.Context, *GetOutputFileRequest) (*GetOutputFileReply, error)
	Initialize(context.Context, *InitializeRequest) (*CommandReply, error)
	Message(context.Context, *MessageRequest) (*CommandReply, error)
	RemoveAllPlates(context.Context, *RemoveAllPlatesRequest) (*CommandReply, error)
	RemovePlateAt(context.Context, *RemovePlateAtRequest) (*CommandReply, error)
	Aspirate(context.Context, *AspirateRequest) (*CommandReply, error)
	Dispense(context.Context, *DispenseRequest) (*CommandReply, error)
	LoadTips(context.Context, *LoadTipsRequest) (*CommandReply, error)
	Mix(context.Context, *MixRequest) (*CommandReply, error)
	Move(context.Context, *MoveRequest) (*CommandReply, error)
	ResetPistons(context.Context, *ResetPistonsRequest) (*CommandReply, error)
	SetDriveSpeed(context.Context, *SetDriveSpeedRequest) (*CommandReply, error)
	SetPipetteSpeed(context.Context, *SetPipetteSpeedRequest) (*CommandReply, error)
	UnloadTips(context.Context, *UnloadTipsRequest) (*CommandReply, error)
	UpdateMetaData(context.Context, *UpdateMetaDataRequest) (*CommandReply, error)
	Wait(context.Context, *WaitRequest) (*CommandReply, error)
}

func RegisterLowLevelLiquidhandlingDriverServer(s *grpc.Server, srv LowLevelLiquidhandlingDriverServer) {
	s.RegisterService(&_LowLevelLiquidhandlingDriver_serviceDesc, srv)
}

func _LowLevelLiquidhandlingDriver_AddPlateTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPlateToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).AddPlateTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/AddPlateTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).AddPlateTo(ctx, req.(*AddPlateToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_Finalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).Finalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/Finalize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).Finalize(ctx, req.(*FinalizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).Configure(ctx, req.(*ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_GetOutputFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOutputFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).GetOutputFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/GetOutputFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).GetOutputFile(ctx, req.(*GetOutputFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_Message_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).Message(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/Message",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).Message(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_RemoveAllPlates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAllPlatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).RemoveAllPlates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/RemoveAllPlates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).RemoveAllPlates(ctx, req.(*RemoveAllPlatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_RemovePlateAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePlateAtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).RemovePlateAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/RemovePlateAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).RemovePlateAt(ctx, req.(*RemovePlateAtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_Aspirate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AspirateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).Aspirate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/Aspirate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).Aspirate(ctx, req.(*AspirateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_Dispense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DispenseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).Dispense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/Dispense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).Dispense(ctx, req.(*DispenseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_LoadTips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadTipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).LoadTips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/LoadTips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).LoadTips(ctx, req.(*LoadTipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_Mix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MixRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).Mix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/Mix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).Mix(ctx, req.(*MixRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/Move",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).Move(ctx, req.(*MoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_ResetPistons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPistonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).ResetPistons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/ResetPistons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).ResetPistons(ctx, req.(*ResetPistonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_SetDriveSpeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDriveSpeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).SetDriveSpeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/SetDriveSpeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).SetDriveSpeed(ctx, req.(*SetDriveSpeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_SetPipetteSpeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPipetteSpeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).SetPipetteSpeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/SetPipetteSpeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).SetPipetteSpeed(ctx, req.(*SetPipetteSpeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_UnloadTips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnloadTipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).UnloadTips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/UnloadTips",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).UnloadTips(ctx, req.(*UnloadTipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_UpdateMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetaDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).UpdateMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/UpdateMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).UpdateMetaData(ctx, req.(*UpdateMetaDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LowLevelLiquidhandlingDriver_Wait_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WaitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LowLevelLiquidhandlingDriverServer).Wait(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LowLevelLiquidhandlingDriver/Wait",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LowLevelLiquidhandlingDriverServer).Wait(ctx, req.(*WaitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LowLevelLiquidhandlingDriver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.LowLevelLiquidhandlingDriver",
	HandlerType: (*LowLevelLiquidhandlingDriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPlateTo",
			Handler:    _LowLevelLiquidhandlingDriver_AddPlateTo_Handler,
		},
		{
			MethodName: "Finalize",
			Handler:    _LowLevelLiquidhandlingDriver_Finalize_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _LowLevelLiquidhandlingDriver_Configure_Handler,
		},
		{
			MethodName: "GetOutputFile",
			Handler:    _LowLevelLiquidhandlingDriver_GetOutputFile_Handler,
		},
		{
			MethodName: "Initialize",
			Handler:    _LowLevelLiquidhandlingDriver_Initialize_Handler,
		},
		{
			MethodName: "Message",
			Handler:    _LowLevelLiquidhandlingDriver_Message_Handler,
		},
		{
			MethodName: "RemoveAllPlates",
			Handler:    _LowLevelLiquidhandlingDriver_RemoveAllPlates_Handler,
		},
		{
			MethodName: "RemovePlateAt",
			Handler:    _LowLevelLiquidhandlingDriver_RemovePlateAt_Handler,
		},
		{
			MethodName: "Aspirate",
			Handler:    _LowLevelLiquidhandlingDriver_Aspirate_Handler,
		},
		{
			MethodName: "Dispense",
			Handler:    _LowLevelLiquidhandlingDriver_Dispense_Handler,
		},
		{
			MethodName: "LoadTips",
			Handler:    _LowLevelLiquidhandlingDriver_LoadTips_Handler,
		},
		{
			MethodName: "Mix",
			Handler:    _LowLevelLiquidhandlingDriver_Mix_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _LowLevelLiquidhandlingDriver_Move_Handler,
		},
		{
			MethodName: "ResetPistons",
			Handler:    _LowLevelLiquidhandlingDriver_ResetPistons_Handler,
		},
		{
			MethodName: "SetDriveSpeed",
			Handler:    _LowLevelLiquidhandlingDriver_SetDriveSpeed_Handler,
		},
		{
			MethodName: "SetPipetteSpeed",
			Handler:    _LowLevelLiquidhandlingDriver_SetPipetteSpeed_Handler,
		},
		{
			MethodName: "UnloadTips",
			Handler:    _LowLevelLiquidhandlingDriver_UnloadTips_Handler,
		},
		{
			MethodName: "UpdateMetaData",
			Handler:    _LowLevelLiquidhandlingDriver_UpdateMetaData_Handler,
		},
		{
			MethodName: "Wait",
			Handler:    _LowLevelLiquidhandlingDriver_Wait_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/antha-lang/antha/driver/liquidhandling/pb/lh.proto",
}

// HighLevelLiquidhandlingDriverClient is the client API for HighLevelLiquidhandlingDriver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HighLevelLiquidhandlingDriverClient interface {
	AddPlateTo(ctx context.Context, in *AddPlateToRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Finalize(ctx context.Context, in *FinalizeRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureReply, error)
	GetOutputFile(ctx context.Context, in *GetOutputFileRequest, opts ...grpc.CallOption) (*GetOutputFileReply, error)
	Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Message(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*CommandReply, error)
	RemoveAllPlates(ctx context.Context, in *RemoveAllPlatesRequest, opts ...grpc.CallOption) (*CommandReply, error)
	RemovePlateAt(ctx context.Context, in *RemovePlateAtRequest, opts ...grpc.CallOption) (*CommandReply, error)
	Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*CommandReply, error)
}

type highLevelLiquidhandlingDriverClient struct {
	cc *grpc.ClientConn
}

func NewHighLevelLiquidhandlingDriverClient(cc *grpc.ClientConn) HighLevelLiquidhandlingDriverClient {
	return &highLevelLiquidhandlingDriverClient{cc}
}

func (c *highLevelLiquidhandlingDriverClient) AddPlateTo(ctx context.Context, in *AddPlateToRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/pb.HighLevelLiquidhandlingDriver/AddPlateTo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highLevelLiquidhandlingDriverClient) Finalize(ctx context.Context, in *FinalizeRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/pb.HighLevelLiquidhandlingDriver/Finalize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highLevelLiquidhandlingDriverClient) Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*ConfigureReply, error) {
	out := new(ConfigureReply)
	err := c.cc.Invoke(ctx, "/pb.HighLevelLiquidhandlingDriver/Configure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highLevelLiquidhandlingDriverClient) GetOutputFile(ctx context.Context, in *GetOutputFileRequest, opts ...grpc.CallOption) (*GetOutputFileReply, error) {
	out := new(GetOutputFileReply)
	err := c.cc.Invoke(ctx, "/pb.HighLevelLiquidhandlingDriver/GetOutputFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highLevelLiquidhandlingDriverClient) Initialize(ctx context.Context, in *InitializeRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/pb.HighLevelLiquidhandlingDriver/Initialize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highLevelLiquidhandlingDriverClient) Message(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/pb.HighLevelLiquidhandlingDriver/Message", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highLevelLiquidhandlingDriverClient) RemoveAllPlates(ctx context.Context, in *RemoveAllPlatesRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/pb.HighLevelLiquidhandlingDriver/RemoveAllPlates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highLevelLiquidhandlingDriverClient) RemovePlateAt(ctx context.Context, in *RemovePlateAtRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/pb.HighLevelLiquidhandlingDriver/RemovePlateAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *highLevelLiquidhandlingDriverClient) Transfer(ctx context.Context, in *TransferRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, "/pb.HighLevelLiquidhandlingDriver/Transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HighLevelLiquidhandlingDriverServer is the server API for HighLevelLiquidhandlingDriver service.
type HighLevelLiquidhandlingDriverServer interface {
	AddPlateTo(context.Context, *AddPlateToRequest) (*CommandReply, error)
	Finalize(context.Context, *FinalizeRequest) (*CommandReply, error)
	Configure(context.Context, *ConfigureRequest) (*ConfigureReply, error)
	GetOutputFile(context.Context, *GetOutputFileRequest) (*GetOutputFileReply, error)
	Initialize(context.Context, *InitializeRequest) (*CommandReply, error)
	Message(context.Context, *MessageRequest) (*CommandReply, error)
	RemoveAllPlates(context.Context, *RemoveAllPlatesRequest) (*CommandReply, error)
	RemovePlateAt(context.Context, *RemovePlateAtRequest) (*CommandReply, error)
	Transfer(context.Context, *TransferRequest) (*CommandReply, error)
}

func RegisterHighLevelLiquidhandlingDriverServer(s *grpc.Server, srv HighLevelLiquidhandlingDriverServer) {
	s.RegisterService(&_HighLevelLiquidhandlingDriver_serviceDesc, srv)
}

func _HighLevelLiquidhandlingDriver_AddPlateTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPlateToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighLevelLiquidhandlingDriverServer).AddPlateTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HighLevelLiquidhandlingDriver/AddPlateTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighLevelLiquidhandlingDriverServer).AddPlateTo(ctx, req.(*AddPlateToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighLevelLiquidhandlingDriver_Finalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinalizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighLevelLiquidhandlingDriverServer).Finalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HighLevelLiquidhandlingDriver/Finalize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighLevelLiquidhandlingDriverServer).Finalize(ctx, req.(*FinalizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighLevelLiquidhandlingDriver_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighLevelLiquidhandlingDriverServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HighLevelLiquidhandlingDriver/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighLevelLiquidhandlingDriverServer).Configure(ctx, req.(*ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighLevelLiquidhandlingDriver_GetOutputFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOutputFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighLevelLiquidhandlingDriverServer).GetOutputFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HighLevelLiquidhandlingDriver/GetOutputFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighLevelLiquidhandlingDriverServer).GetOutputFile(ctx, req.(*GetOutputFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighLevelLiquidhandlingDriver_Initialize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitializeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighLevelLiquidhandlingDriverServer).Initialize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HighLevelLiquidhandlingDriver/Initialize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighLevelLiquidhandlingDriverServer).Initialize(ctx, req.(*InitializeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighLevelLiquidhandlingDriver_Message_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighLevelLiquidhandlingDriverServer).Message(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HighLevelLiquidhandlingDriver/Message",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighLevelLiquidhandlingDriverServer).Message(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighLevelLiquidhandlingDriver_RemoveAllPlates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAllPlatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighLevelLiquidhandlingDriverServer).RemoveAllPlates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HighLevelLiquidhandlingDriver/RemoveAllPlates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighLevelLiquidhandlingDriverServer).RemoveAllPlates(ctx, req.(*RemoveAllPlatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighLevelLiquidhandlingDriver_RemovePlateAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePlateAtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighLevelLiquidhandlingDriverServer).RemovePlateAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HighLevelLiquidhandlingDriver/RemovePlateAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighLevelLiquidhandlingDriverServer).RemovePlateAt(ctx, req.(*RemovePlateAtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HighLevelLiquidhandlingDriver_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HighLevelLiquidhandlingDriverServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.HighLevelLiquidhandlingDriver/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HighLevelLiquidhandlingDriverServer).Transfer(ctx, req.(*TransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HighLevelLiquidhandlingDriver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.HighLevelLiquidhandlingDriver",
	HandlerType: (*HighLevelLiquidhandlingDriverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPlateTo",
			Handler:    _HighLevelLiquidhandlingDriver_AddPlateTo_Handler,
		},
		{
			MethodName: "Finalize",
			Handler:    _HighLevelLiquidhandlingDriver_Finalize_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _HighLevelLiquidhandlingDriver_Configure_Handler,
		},
		{
			MethodName: "GetOutputFile",
			Handler:    _HighLevelLiquidhandlingDriver_GetOutputFile_Handler,
		},
		{
			MethodName: "Initialize",
			Handler:    _HighLevelLiquidhandlingDriver_Initialize_Handler,
		},
		{
			MethodName: "Message",
			Handler:    _HighLevelLiquidhandlingDriver_Message_Handler,
		},
		{
			MethodName: "RemoveAllPlates",
			Handler:    _HighLevelLiquidhandlingDriver_RemoveAllPlates_Handler,
		},
		{
			MethodName: "RemovePlateAt",
			Handler:    _HighLevelLiquidhandlingDriver_RemovePlateAt_Handler,
		},
		{
			MethodName: "Transfer",
			Handler:    _HighLevelLiquidhandlingDriver_Transfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/antha-lang/antha/driver/liquidhandling/pb/lh.proto",
}

func init() {
	proto.RegisterFile("github.com/antha-lang/antha/driver/liquidhandling/pb/lh.proto", fileDescriptor_lh_c68294f182eef188)
}

var fileDescriptor_lh_c68294f182eef188 = []byte{
	// 1223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x57, 0x5f, 0x6f, 0x1c, 0x35,
	0x10, 0x67, 0x73, 0x7f, 0x33, 0x49, 0x73, 0x89, 0x93, 0x1e, 0xdb, 0xa8, 0xa5, 0x61, 0x1f, 0x50,
	0x10, 0x90, 0x88, 0xf4, 0xa1, 0x0f, 0xa8, 0x82, 0x28, 0xa1, 0x84, 0xea, 0x42, 0xa3, 0x4d, 0x2a,
	0xa0, 0x2f, 0x27, 0xdf, 0xad, 0xef, 0xce, 0xaa, 0x6f, 0xbd, 0x59, 0xfb, 0x2e, 0x49, 0xbf, 0x0f,
	0x42, 0xbc, 0x20, 0xc1, 0x0b, 0x9f, 0x84, 0x4f, 0xc2, 0x17, 0x40, 0xb6, 0xf7, 0x8f, 0x77, 0xb3,
	0x07, 0xed, 0x0b, 0x12, 0x82, 0x37, 0xcf, 0x8c, 0x67, 0xf6, 0x37, 0x33, 0xb6, 0xe7, 0xb7, 0xf0,
	0x64, 0x4c, 0xe5, 0x64, 0x36, 0xd8, 0x1b, 0xf2, 0xe9, 0x3e, 0x0e, 0xe5, 0x04, 0x7f, 0xc2, 0x70,
	0x38, 0x36, 0xcb, 0xfd, 0x20, 0xa6, 0x73, 0x12, 0xef, 0x33, 0x7a, 0x39, 0xa3, 0xc1, 0x04, 0x87,
	0x01, 0xa3, 0xe1, 0x78, 0x3f, 0x1a, 0xec, 0xb3, 0xc9, 0x5e, 0x14, 0x73, 0xc9, 0xd1, 0x52, 0x34,
	0xf0, 0x06, 0xb0, 0x71, 0x18, 0x04, 0x67, 0x0c, 0x4b, 0x72, 0xc1, 0x7d, 0x72, 0x39, 0x23, 0x42,
	0xa2, 0x6d, 0x68, 0x47, 0x5c, 0x50, 0x49, 0x79, 0xe8, 0x3a, 0x3b, 0xce, 0xee, 0xb2, 0x9f, 0xc9,
	0xe8, 0x01, 0x40, 0xa4, 0x76, 0xf7, 0x9f, 0x9d, 0x3f, 0xff, 0xc6, 0x5d, 0xd2, 0xd6, 0x65, 0xad,
	0x51, 0x0a, 0x84, 0xa0, 0x1e, 0xe2, 0x29, 0x71, 0x6b, 0xda, 0xa0, 0xd7, 0xde, 0x06, 0x74, 0x9e,
	0xd2, 0x10, 0x33, 0xfa, 0x9a, 0x24, 0x5f, 0xf0, 0x3e, 0x80, 0xf5, 0x23, 0x1e, 0x8e, 0xe8, 0x78,
	0x16, 0xa7, 0x3a, 0xe5, 0x1a, 0x60, 0x89, 0x5d, 0x67, 0xa7, 0xb6, 0xbb, 0xea, 0xeb, 0xb5, 0xd7,
	0x85, 0xad, 0xaf, 0x88, 0x7c, 0x3e, 0x93, 0xd1, 0x4c, 0x3e, 0xa5, 0x2c, 0xf3, 0xdf, 0x84, 0x8d,
	0xaf, 0x43, 0x2a, 0x69, 0x21, 0xe8, 0x25, 0xac, 0x9d, 0x12, 0x21, 0xf0, 0x38, 0x0b, 0xb9, 0x05,
	0x0d, 0x46, 0xe6, 0x84, 0xe9, 0x2c, 0x1a, 0xbe, 0x11, 0x94, 0x56, 0x52, 0xc9, 0x48, 0x82, 0xde,
	0x08, 0xea, 0xf3, 0x92, 0x5c, 0xcb, 0x14, 0xb9, 0x5a, 0xa3, 0x87, 0xb0, 0x22, 0x26, 0xfc, 0xaa,
	0x3f, 0xc4, 0xe1, 0x90, 0x30, 0xb7, 0xbe, 0xe3, 0xec, 0xb6, 0x7d, 0x50, 0xaa, 0x23, 0xad, 0xf1,
	0x5c, 0xe8, 0xfa, 0x64, 0xca, 0xe7, 0xe4, 0x90, 0x31, 0x5d, 0x44, 0x91, 0x82, 0x39, 0x80, 0x2d,
	0x63, 0xd1, 0xea, 0x43, 0xf9, 0x06, 0xb5, 0xf5, 0x7e, 0x73, 0xa0, 0x73, 0x28, 0x22, 0x1a, 0x63,
	0x99, 0xa5, 0xd0, 0x85, 0xe6, 0x9c, 0xb3, 0xd9, 0x94, 0xe8, 0xba, 0x38, 0x7e, 0x22, 0xa1, 0xf7,
	0x00, 0xf8, 0x9c, 0xc4, 0x42, 0xc6, 0xfc, 0x95, 0xca, 0xa4, 0xa6, 0x90, 0xe5, 0x1a, 0x95, 0xce,
	0x84, 0xe0, 0x40, 0xa7, 0xd3, 0xf0, 0xf5, 0x5a, 0x25, 0x3e, 0x9d, 0x31, 0x49, 0x75, 0x22, 0x0d,
	0xdf, 0x08, 0xe8, 0x3e, 0x98, 0xfe, 0xc9, 0x9b, 0x88, 0xb8, 0x8d, 0x9d, 0x5a, 0xd6, 0x50, 0xa5,
	0x50, 0x71, 0xae, 0x26, 0x58, 0xba, 0x4d, 0x6d, 0xd0, 0x6b, 0xb4, 0x0e, 0x35, 0xc6, 0x46, 0x6e,
	0x4b, 0x7f, 0x54, 0x2d, 0xbd, 0x5f, 0x1c, 0xe8, 0x1c, 0x53, 0x11, 0x91, 0x50, 0xfc, 0x2d, 0x72,
	0x17, 0x5a, 0x03, 0xc6, 0xaf, 0xf8, 0x4c, 0x26, 0xb0, 0x53, 0xf1, 0x1f, 0xc6, 0xfc, 0x83, 0x03,
	0x9d, 0x1e, 0xc7, 0xc1, 0x05, 0x8d, 0x84, 0xd5, 0x9d, 0xe1, 0x04, 0x87, 0x21, 0x61, 0x42, 0xa3,
	0x6e, 0xf8, 0x99, 0x9c, 0xa1, 0x5b, 0xaa, 0x42, 0x57, 0x5b, 0x88, 0xae, 0x5e, 0x46, 0x67, 0x9f,
	0x00, 0x03, 0x3d, 0xbf, 0x5d, 0x0a, 0x39, 0x61, 0x2c, 0x43, 0x4e, 0x18, 0xf3, 0x7e, 0x75, 0x00,
	0x4e, 0xe9, 0xb5, 0x75, 0x4d, 0x34, 0x0c, 0xc7, 0x82, 0x91, 0x97, 0x7a, 0xa9, 0x50, 0xea, 0x02,
	0x90, 0x5a, 0x19, 0x48, 0x17, 0x9a, 0xc3, 0x9b, 0x21, 0x23, 0x42, 0x63, 0x6c, 0xf8, 0x89, 0x94,
	0x27, 0xd5, 0xb0, 0x93, 0xaa, 0x2a, 0xaa, 0xd5, 0xca, 0x56, 0xa1, 0x95, 0xde, 0x1f, 0x0e, 0xac,
	0x9c, 0xf2, 0x79, 0x76, 0x18, 0x3c, 0x58, 0x0d, 0xc8, 0xf0, 0x95, 0x75, 0xf4, 0x55, 0x94, 0x82,
	0x4e, 0x1d, 0x69, 0x95, 0xf0, 0x90, 0xf3, 0x38, 0x10, 0x3a, 0x93, 0x65, 0xdf, 0xd2, 0xa8, 0x6c,
	0x62, 0x32, 0x22, 0x31, 0x09, 0x87, 0x26, 0x9b, 0x86, 0x9f, 0x2b, 0xd0, 0x3d, 0x68, 0xf3, 0xd1,
	0x48, 0x10, 0xd9, 0xbf, 0xd6, 0xf9, 0x38, 0x7e, 0xcb, 0xc8, 0xdf, 0x59, 0xa6, 0x1b, 0x5d, 0xf1,
	0xcc, 0xf4, 0xbd, 0x65, 0x7a, 0xad, 0x33, 0xcb, 0x4c, 0x2f, 0xf3, 0x97, 0x4e, 0x57, 0xaf, 0x65,
	0x55, 0xef, 0x22, 0x39, 0x64, 0xba, 0x0f, 0xed, 0xbc, 0x0f, 0xde, 0x11, 0x6c, 0xfa, 0x44, 0x10,
	0x79, 0x46, 0x85, 0xe4, 0xa1, 0xf8, 0xab, 0x96, 0xb9, 0xd0, 0x4a, 0x4e, 0x56, 0x72, 0xa0, 0x52,
	0xd1, 0xfb, 0x02, 0xb6, 0xce, 0x89, 0x3c, 0x56, 0xcf, 0xf7, 0x79, 0x44, 0x48, 0x60, 0x3d, 0x66,
	0xfa, 0x4d, 0x4f, 0x9e, 0x0d, 0x23, 0xa8, 0xd8, 0xea, 0xb9, 0xd0, 0x41, 0x1c, 0x5f, 0xaf, 0xbd,
	0x97, 0xd0, 0x3d, 0x57, 0x20, 0x22, 0x22, 0x65, 0x31, 0xc6, 0x5b, 0x21, 0xc9, 0x62, 0xd7, 0xac,
	0xd8, 0x3f, 0x3a, 0xb0, 0xf1, 0x22, 0x64, 0xff, 0x82, 0x7b, 0xf3, 0x25, 0xdc, 0x7d, 0x11, 0x05,
	0x58, 0x92, 0x53, 0x22, 0xf1, 0x31, 0x96, 0x38, 0x05, 0xfb, 0x31, 0xa0, 0xde, 0x49, 0x3f, 0x8a,
	0x79, 0x44, 0x62, 0x49, 0x89, 0x30, 0xa3, 0xcc, 0x54, 0x75, 0xbd, 0x77, 0x72, 0x96, 0x19, 0x94,
	0xde, 0x7b, 0x1f, 0x56, 0xbe, 0xc5, 0x54, 0x5a, 0x15, 0x94, 0x74, 0x6a, 0x9a, 0xe0, 0xf8, 0x7a,
	0xed, 0xfd, 0xe4, 0x40, 0xe7, 0x22, 0xc6, 0xa1, 0x18, 0x91, 0xd8, 0xda, 0xa7, 0xaf, 0x8b, 0x63,
	0x5d, 0x97, 0x34, 0xbf, 0x51, 0xcc, 0xa7, 0xc9, 0xf9, 0xce, 0x15, 0x2a, 0x3f, 0x85, 0x5b, 0x1b,
	0xcd, 0x5d, 0xcd, 0x64, 0xd5, 0x23, 0x53, 0x08, 0x9e, 0xd4, 0x25, 0x15, 0xd5, 0x25, 0x56, 0xbb,
	0x24, 0x4f, 0x6a, 0x92, 0x48, 0xd6, 0x93, 0xd0, 0xb4, 0x9f, 0x04, 0xef, 0x18, 0x56, 0x8f, 0xf8,
	0x74, 0x8a, 0xc3, 0xc0, 0x27, 0x11, 0xbb, 0x51, 0x98, 0x48, 0x1c, 0xf3, 0x78, 0xc8, 0x03, 0x92,
	0xb4, 0x28, 0x57, 0xa8, 0x57, 0x73, 0x2a, 0xc6, 0xc9, 0x4c, 0x54, 0xcb, 0x67, 0xf5, 0xb6, 0xb3,
	0xbe, 0xe4, 0x4d, 0x60, 0xcd, 0x9a, 0xdf, 0x2a, 0xce, 0x5b, 0x15, 0x15, 0xed, 0x42, 0x53, 0x48,
	0x2c, 0x67, 0x42, 0x7f, 0x72, 0xe5, 0x60, 0x7d, 0x2f, 0x1a, 0xec, 0xd9, 0xb8, 0xfc, 0xc4, 0xee,
	0xf5, 0x01, 0x95, 0x18, 0x80, 0xfa, 0xda, 0x43, 0x58, 0xe1, 0x5a, 0xd5, 0x1f, 0x51, 0x66, 0x9a,
	0xb1, 0xea, 0x03, 0xcf, 0x76, 0xbd, 0xf9, 0x07, 0x0e, 0x7e, 0x6f, 0xc3, 0xfd, 0x1e, 0xbf, 0xea,
	0x29, 0x6a, 0xd0, 0x2b, 0x90, 0x25, 0x7d, 0x05, 0x63, 0xf4, 0x18, 0x20, 0xa7, 0x48, 0xe8, 0xae,
	0x0a, 0x74, 0x8b, 0x32, 0x6d, 0xdf, 0x8a, 0xef, 0xbd, 0x83, 0x1e, 0x41, 0x3b, 0xe5, 0x3d, 0x68,
	0x53, 0xd9, 0x4b, 0x2c, 0xa8, 0xd2, 0xe9, 0x31, 0x2c, 0x67, 0x95, 0x45, 0x5b, 0x66, 0x43, 0x91,
	0x28, 0x6d, 0xa3, 0x92, 0xd6, 0x38, 0x1e, 0xc1, 0x9d, 0x42, 0xa1, 0x90, 0xab, 0xb6, 0x55, 0xb1,
	0xa7, 0xed, 0x6e, 0x85, 0x25, 0xfd, 0x3a, 0xe4, 0xbc, 0xca, 0xe4, 0x7a, 0x8b, 0x67, 0x55, 0xc2,
	0xfe, 0x14, 0x5a, 0x09, 0xf7, 0x42, 0x1a, 0x5e, 0x91, 0x88, 0x55, 0xba, 0x1c, 0x42, 0xa7, 0xc4,
	0x9d, 0xd0, 0xb6, 0xda, 0x56, 0x4d, 0xa8, 0x2a, 0x43, 0x3c, 0x81, 0x3b, 0x05, 0x92, 0x65, 0x72,
	0xae, 0xe2, 0x5d, 0x8b, 0x1a, 0x94, 0xd2, 0x2d, 0xd3, 0xa0, 0x12, 0xf9, 0x5a, 0xe4, 0x94, 0x32,
	0x1d, 0xe3, 0x54, 0xe2, 0x3d, 0x8b, 0x9c, 0x52, 0xaa, 0x61, 0x9c, 0x4a, 0xc4, 0xa3, 0xd2, 0xe9,
	0x43, 0xa8, 0x9d, 0xd2, 0x6b, 0xb4, 0xa6, 0xeb, 0x99, 0x11, 0x80, 0xca, 0xad, 0x1f, 0x41, 0x5d,
	0x4d, 0x5b, 0xd4, 0xd1, 0x7b, 0xf3, 0xb9, 0x5b, 0xb9, 0xf9, 0x33, 0x58, 0xb5, 0xa7, 0x14, 0x7a,
	0xd7, 0x14, 0xed, 0xd6, 0xdc, 0x5a, 0x54, 0xf2, 0xc2, 0x74, 0x32, 0x25, 0xaf, 0x1a, 0x58, 0x8b,
	0x9a, 0x5e, 0x1a, 0x4d, 0xa6, 0xe9, 0xd5, 0xf3, 0x6a, 0xc1, 0x0d, 0x81, 0x7c, 0x00, 0x99, 0x33,
	0x7a, 0x6b, 0x20, 0x55, 0x3a, 0x7e, 0x0e, 0x6b, 0xc5, 0x81, 0x80, 0xee, 0x69, 0xe7, 0xaa, 0x21,
	0xb1, 0xa8, 0xca, 0x6a, 0x14, 0x98, 0x2a, 0x5b, 0x43, 0xa1, 0x6a, 0xf3, 0xc1, 0xcf, 0x75, 0x78,
	0x70, 0x42, 0xc7, 0x93, 0xff, 0x1f, 0x96, 0xff, 0xe4, 0xc3, 0x92, 0xf2, 0x01, 0xd3, 0xa0, 0x12,
	0x3b, 0xa8, 0x72, 0x1a, 0x34, 0xf5, 0x5f, 0xf9, 0xa3, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x89,
	0xc0, 0x45, 0xaf, 0xd6, 0x0f, 0x00, 0x00,
}
